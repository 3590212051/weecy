document.write("<br /><p><b>\ngoconfig is a easy-use comments-support configuration file parser.</b></p>\n\n\n\n\n<h3 id=\"_index\">\n	Index \n	\n	<span class=\"label label-success\">\n		Documentation complete 100%(23/23)\n	</span>\n	\n</h3>\n\n<ul class=\"unstyled\">\n	\n	<li>\n		<a href=\"#_constants\">Constants</a>\n	</li>\n	\n	\n	\n	<li>\n		<a href=\"#_variables\">Variables</a>\n	</li>\n	\n	\n	\n	<li>\n		<a href=\"#SaveConfigFile\">func SaveConfigFile(c *ConfigFile, filename string) (err error)</a>\n	</li>\n	\n\n	\n	\n	<li>\n		<a href=\"#ConfigFile\">type ConfigFile</a>\n	</li>\n	\n	\n	<ul>\n		<li>\n			<a href=\"#LoadConfigFile\">func LoadConfigFile(filename string) (c *ConfigFile, err error)</a>\n		</li>\n	</ul>\n	\n	\n	\n	<ul>\n		<li>\n			<a href=\"#ConfigFile_Bool\">func (c *ConfigFile) Bool(section, key string) (bool, error)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ConfigFile_Float64\">func (c *ConfigFile) Float64(section, key string) (float64, error)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ConfigFile_GetKeyComments\">func (c *ConfigFile) GetKeyComments(section, key string) (comments string)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ConfigFile_GetSection\">func (c *ConfigFile) GetSection(section string) (map[string]string, error)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ConfigFile_GetSectionComments\">func (c *ConfigFile) GetSectionComments(section string) (comments string)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ConfigFile_GetValue\">func (c *ConfigFile) GetValue(section, key string) (string, error)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ConfigFile_Int\">func (c *ConfigFile) Int(section, key string) (int, error)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ConfigFile_Int64\">func (c *ConfigFile) Int64(section, key string) (int64, error)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ConfigFile_MustBool\">func (c *ConfigFile) MustBool(section, key string) bool</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ConfigFile_MustFloat64\">func (c *ConfigFile) MustFloat64(section, key string) float64</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ConfigFile_MustInt\">func (c *ConfigFile) MustInt(section, key string) int</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ConfigFile_MustInt64\">func (c *ConfigFile) MustInt64(section, key string) int64</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ConfigFile_MustValue\">func (c *ConfigFile) MustValue(section, key string) string</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ConfigFile_SetKeyComments\">func (c *ConfigFile) SetKeyComments(section, key, comments string) bool</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ConfigFile_SetSectionComments\">func (c *ConfigFile) SetSectionComments(section, comments string) bool</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ConfigFile_SetValue\">func (c *ConfigFile) SetValue(section, key, value string) bool</a>\n		</li>\n	</ul>\n	\n	\n	\n	<li>\n		<a href=\"#GetError\">type GetError</a>\n	</li>\n	\n	\n	\n	\n	<ul>\n		<li>\n			<a href=\"#GetError_Error\">func (err GetError) Error() string</a>\n		</li>\n	</ul>\n	\n	\n	\n	<li>\n		<a href=\"#ReadError\">type ReadError</a>\n	</li>\n	\n	\n	\n	\n	<ul>\n		<li>\n			<a href=\"#ReadError_Error\">func (err ReadError) Error() string</a>\n		</li>\n	</ul>\n	\n	\n</ul>\n\n\n\n\n<div id=\"search_exports\" class=\"modal hide fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n	<form id=\"search_form\" class=\"modal-form\">\n		<div class=\"modal-header\">\n			<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">Ã—</button>\n			<h3 id=\"myModalLabel\" style=\"margin: 10px\">Search and Go to Exports.</h3>\n		</div>\n\n		<div class=\"modal-body\" style=\"overflow-y: visible;\">\n			<input id=\"search_export_box\" autofocus=\"autofocus\" autocomplete=\"off\" class=\"span5\" type=\"text\" placeholder=\"type or function name\"  data-source=\"[&quot;ConfigFile&quot;,&quot;GetError&quot;,&quot;ReadError&quot;,&quot;SaveConfigFile&quot;,&quot;LoadConfigFile&quot;,&quot;ConfigFile.Bool&quot;,&quot;ConfigFile.Float64&quot;,&quot;ConfigFile.GetKeyComments&quot;,&quot;ConfigFile.GetSection&quot;,&quot;ConfigFile.GetSectionComments&quot;,&quot;ConfigFile.GetValue&quot;,&quot;ConfigFile.Int&quot;,&quot;ConfigFile.Int64&quot;,&quot;ConfigFile.MustBool&quot;,&quot;ConfigFile.MustFloat64&quot;,&quot;ConfigFile.MustInt&quot;,&quot;ConfigFile.MustInt64&quot;,&quot;ConfigFile.MustValue&quot;,&quot;ConfigFile.SetKeyComments&quot;,&quot;ConfigFile.SetSectionComments&quot;,&quot;ConfigFile.SetValue&quot;,&quot;GetError.Error&quot;,&quot;ReadError.Error&quot;]\" data-provide=\"typeahead\">\n		</div>\n\n		<div class=\"modal-footer\">\n			<button type='button' class=\"btn\" data-dismiss=\"modal\" aria-hidden=\"true\">Close</button>\n			<button class=\"btn btn-primary\" type=\"submit\">Go!</button>\n		</div>\n	</form>\n</div>\n\n\n<b></b>\n\n\n\n\n	<h3 id=\"_constants\">Constants</h3>\n	\n		\n			<pre class=\"pre-x-scrollable\"><span class=\"key\">const</span> (\n    <span class=\"com\">// Default section name.\n</span>    <span id=\"DEFAULT_SECTION\">DEFAULT_SECTION</span> = <span class=\"str\">&#34;DEFAULT&#34;</span>\n\n    <span class=\"com\">// Get Errors\n</span>    <span id=\"SectionNotFound\">SectionNotFound</span> = iota\n    <span class=\"com\">// Read Errors\n</span>    BlankSection\n    <span class=\"com\">// Get and Read Errors\n</span>    CouldNotParse\n)</pre>\n			\n		\n	\n\n\n\n\n\n	<h3 id=\"_variables\">Variables</h3>\n	\n		\n			<pre class=\"pre-x-scrollable\"><span class=\"key\">var</span> (\n\n    <span class=\"com\">// Line break\n</span>    <span id=\"LineBreak\">LineBreak</span> = <span class=\"str\">&#34;\\r\\n&#34;</span>\n)</pre>\n			\n		\n	\n\n<b></b>\n\n\n\n\n<h3 id=\"SaveConfigFile\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/write.go#L13\">SaveConfigFile</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_SaveConfigFile\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"SaveConfigFile writes configuration file to local file system\n\" href=\"#SaveConfigFile\">SaveConfigFile</a>(c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>, <span id=\"filename\">filename</span> string) (<span id=\"err\">err</span> error)</pre>\n<p>\nSaveConfigFile writes configuration file to local file system\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_SaveConfigFile\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"SaveConfigFile writes configuration file to local file system\n\" href=\"#SaveConfigFile\">SaveConfigFile</a>(c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>, <span id=\"filename\">filename</span> string) (<span id=\"err\">err</span> error) {\n	<span class=\"com\">// Write configuration file by filename\n</span>	<span class=\"key\">var</span> f *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/os#File\">os.File</a>\n	<span class=\"key\">if</span> f, <span id=\"err\">err</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/os#Create\">os.Create</a>(filename); <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> err\n	}\n\n	<span class=\"com\">// Data buffer\n</span>	<span id=\"buf\">buf</span> := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/bytes#NewBuffer\">bytes.NewBuffer</a>(<span class=\"boo\">nil</span>)\n	<span class=\"com\">// Write sections\n</span>	<span class=\"key\">for</span> _, <span id=\"section\">section</span> := <span class=\"key\">range</span> <span id=\"c.sectionList\">c.sectionList</span> {\n		<span class=\"com\">// Write section comments\n</span>		<span class=\"key\">if</span> <span class=\"bui\">len</span>(c.GetSectionComments(section)) > 0 {\n			<span class=\"key\">if</span> _, <span id=\"err\">err</span> = buf.WriteString(c.GetSectionComments(section) + LineBreak); <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n				<span class=\"ret\">return</span> err\n			}\n		}\n		<span class=\"com\">// Write section name\n</span>		<span class=\"key\">if</span> _, <span id=\"err\">err</span> = buf.WriteString(<span class=\"str\">&#34;[&#34;</span> + <span id=\"section\">section</span> + <span class=\"str\">&#34;]&#34;</span> + LineBreak); <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n			<span class=\"ret\">return</span> err\n		}\n\n		<span class=\"com\">// Write keys\n</span>		<span class=\"key\">for</span> _, <span id=\"key\">key</span> := <span class=\"key\">range</span> c.keyList[section] {\n			<span class=\"key\">if</span> <span id=\"key\">key</span> != <span class=\"str\">&#34; &#34;</span> {\n				<span class=\"com\">// Write key comments\n</span>				<span class=\"key\">if</span> <span class=\"bui\">len</span>(c.GetKeyComments(section, key)) > 0 {\n					<span class=\"key\">if</span> _, <span id=\"err\">err</span> = buf.WriteString(c.GetKeyComments(section, key) + LineBreak); <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n						<span class=\"ret\">return</span> err\n					}\n				}\n\n				<span id=\"keyName\">keyName</span> := key\n				<span class=\"com\">// Check if it's auto increment.\n</span>				<span class=\"key\">if</span> keyName[0] == <span class=\"str\">&#39;#&#39;</span> {\n					<span id=\"keyName\">keyName</span> = <span class=\"str\">&#34;-&#34;</span>\n				}\n\n				<span class=\"com\">// Write key and value\n</span>				<span class=\"key\">if</span> _, <span id=\"err\">err</span> = buf.WriteString(<span id=\"keyName\">keyName</span> + <span class=\"str\">&#34;=&#34;</span> + c.data[section][key] + LineBreak); <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n					<span class=\"ret\">return</span> err\n				}\n			}\n		}\n\n		<span class=\"com\">// Put a line between sections\n</span>		<span class=\"key\">if</span> _, <span id=\"err\">err</span> = buf.WriteString(LineBreak); <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n			<span class=\"ret\">return</span> err\n		}\n	}\n\n	<span class=\"com\">// Write to file\n</span>	buf.WriteTo(f)\n	f.Close()\n	<span class=\"ret\">return</span> <span class=\"boo\">nil</span>\n}</pre>\n	</div>\n</div>\n\n\n\n<b></b>\n\n\n\n\n<h3 id=\"ConfigFile\">\n	type \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/conf.go#L40\">ConfigFile</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a> <span class=\"key\">struct</span> {\n    <span class=\"com\">// contains filtered or unexported fields\n</span>}</pre>\n<p>\nConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<h4 id=\"LoadConfigFile\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/read.go#L17\">LoadConfigFile</a>\n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_LoadConfigFile\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> <a class=\"int\" title=\"LoadConfigFile reads a file and returns a new configuration representation.\nThis representation can be queried with GetValue.\n\" href=\"#LoadConfigFile\">LoadConfigFile</a>(<span id=\"filename\">filename</span> string) (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>, <span id=\"err\">err</span> error)</pre>\n<p>\nLoadConfigFile reads a file and returns a new configuration representation.\nThis representation can be queried with GetValue.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_LoadConfigFile\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"LoadConfigFile reads a file and returns a new configuration representation.\nThis representation can be queried with GetValue.\n\" href=\"#LoadConfigFile\">LoadConfigFile</a>(<span id=\"filename\">filename</span> string) (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>, <span id=\"err\">err</span> error) {\n	<span class=\"com\">// Read configuration file by filename.\n</span>	<span class=\"key\">var</span> f *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/os#File\">os.File</a>\n	<span class=\"key\">if</span> f, <span id=\"err\">err</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/os#Open\">os.Open</a>(filename); <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, err\n	}\n\n	<span class=\"com\">// Create a new configFile.\n</span>	c = newConfigFile()\n	<span class=\"key\">if</span> <span id=\"err\">err</span> = c.read(f); <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, err\n	}\n\n	<span class=\"com\">// Close local configuration file.\n</span>	<span class=\"key\">if</span> <span id=\"err\">err</span> = f.Close(); <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, err\n	}\n\n	<span class=\"com\">// Return ConfigFile.\n</span>	<span class=\"ret\">return</span> c, <span class=\"boo\">nil</span>\n}</pre>\n	</div>\n</div>\n\n\n\n<b></b>\n\n\n\n\n<h4 id=\"ConfigFile_Bool\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/conf.go#L174\">Bool</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ConfigFile_Bool\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) Bool(section, <span id=\"key\">key</span> string) (bool, error)</pre>\n<p>\nBool returns bool type value.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ConfigFile_Bool\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) Bool(section, <span id=\"key\">key</span> string) (bool, error) {\n	<span class=\"com\">// Get string format value.\n</span>	value, <span id=\"err\">err</span> := c.GetValue(section, key)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">false</span>, err\n	}\n\n	<span class=\"com\">// Convert type.\n</span>	<span class=\"ret\">return</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strconv#ParseBool\">strconv.ParseBool</a>(value)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"ConfigFile_Float64\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/conf.go#L186\">Float64</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ConfigFile_Float64\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) Float64(section, <span id=\"key\">key</span> string) (float64, error)</pre>\n<p>\nFloat64 returns float64 type value.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ConfigFile_Float64\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) Float64(section, <span id=\"key\">key</span> string) (float64, error) {\n	<span class=\"com\">// Get string format value.\n</span>	value, <span id=\"err\">err</span> := c.GetValue(section, key)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> 0.0, err\n	}\n\n	<span class=\"com\">// Convert type.\n</span>	<span class=\"ret\">return</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strconv#ParseFloat\">strconv.ParseFloat</a>(value, 64)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"ConfigFile_GetKeyComments\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/conf.go#L346\">GetKeyComments</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ConfigFile_GetKeyComments\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) GetKeyComments(section, <span id=\"key\">key</span> string) (<span id=\"comments\">comments</span> string)</pre>\n<p>\nGetKeyComments returns the comments of key in the given section.\nIt returns an empty string(0 length) if the comments do not exist\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ConfigFile_GetKeyComments\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) GetKeyComments(section, <span id=\"key\">key</span> string) (<span id=\"comments\">comments</span> string) {\n	<span class=\"com\">// Check if section exists\n</span>	<span class=\"key\">if</span> _, <span id=\"ok\">ok</span> := c.keyComments[section]; <span id=\"ok\">ok</span> {\n		<span class=\"com\">// Exists\n</span>		<span class=\"ret\">return</span> c.keyComments[section][key]\n	}\n\n	<span class=\"com\">// Not exists\n</span>	<span class=\"ret\">return</span> <span class=\"str\">&#34;&#34;</span>\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"ConfigFile_GetSection\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/conf.go#L258\">GetSection</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ConfigFile_GetSection\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) GetSection(<span id=\"section\">section</span> string) (map[string]string, error)</pre>\n<p>\nGetSection returns key-value pairs in given section.\nIt section does not exist, returns nil and error.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ConfigFile_GetSection\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) GetSection(<span id=\"section\">section</span> string) (map[string]string, error) {\n	<span class=\"com\">// Check if section exists\n</span>	<span class=\"key\">if</span> _, <span id=\"ok\">ok</span> := c.data[section]; !<span id=\"ok\">ok</span> {\n		<span class=\"com\">// Section does not exist.\n</span>		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, <a class=\"int\" title=\"GetError occurs when get value in configuration file with invalid parameter\n\" href=\"#GetError\">GetError</a>{SectionNotFound, section}\n	}\n\n	<span class=\"com\">// Remove pre-defined key.\n</span>	<span id=\"secMap\">secMap</span> := c.data[section]\n	<span class=\"bui\">delete</span>(c.data[section], <span class=\"str\">&#34; &#34;</span>)\n\n	<span class=\"com\">// Section exists.\n</span>	<span class=\"ret\">return</span> secMap, <span class=\"boo\">nil</span>\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"ConfigFile_GetSectionComments\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/conf.go#L340\">GetSectionComments</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ConfigFile_GetSectionComments\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) GetSectionComments(<span id=\"section\">section</span> string) (<span id=\"comments\">comments</span> string)</pre>\n<p>\nGetSectionComments returns the comments in the given section.\nIt returns an empty string(0 length) if the comments do not exist\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ConfigFile_GetSectionComments\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) GetSectionComments(<span id=\"section\">section</span> string) (<span id=\"comments\">comments</span> string) {\n	<span class=\"ret\">return</span> c.sectionComments[section]\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"ConfigFile_GetValue\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/conf.go#L125\">GetValue</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ConfigFile_GetValue\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) GetValue(section, <span id=\"key\">key</span> string) (string, error)</pre>\n<p>\nGetValue returns the value of key available in the given section.\nIf the value needs to be unfolded (see e.g. %(google)s example in the GoConfig_test.go),\nthen String does this unfolding automatically, up to\n_DEPTH_VALUES number of iterations.\nIt returns an error if the section does not exist and empty string value\nIt returns an empty string if the (default)key does not exist and nil error.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ConfigFile_GetValue\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) GetValue(section, <span id=\"key\">key</span> string) (string, error) {\n	lock.RLock()\n	<span class=\"bui\">defer</span> lock.RUnlock()\n\n	<span class=\"com\">// Check if section exists\n</span>	<span class=\"key\">if</span> _, <span id=\"ok\">ok</span> := c.data[section]; !<span id=\"ok\">ok</span> {\n		<span class=\"com\">// Section does not exist.\n</span>		<span class=\"ret\">return</span> <span class=\"str\">&#34;&#34;</span>, <a class=\"int\" title=\"GetError occurs when get value in configuration file with invalid parameter\n\" href=\"#GetError\">GetError</a>{SectionNotFound, section}\n	}\n\n	<span class=\"com\">// Section exists.\n</span>	<span class=\"com\">// Check if key exists.\n</span>	value, <span id=\"ok\">ok</span> := c.data[section][key]\n	<span class=\"key\">if</span> !<span id=\"ok\">ok</span> {\n		<span class=\"com\">// Check if it is a sub-section.\n</span>		<span class=\"key\">if</span> i := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strings#LastIndex\">strings.LastIndex</a>(section, <span class=\"str\">&#34;.&#34;</span>); i > -1 {\n			<span class=\"ret\">return</span> c.GetValue(section[:i], key)\n		}\n\n		<span class=\"com\">// Return empty value.\n</span>		<span class=\"ret\">return</span> <span class=\"str\">&#34;&#34;</span>, <span class=\"boo\">nil</span>\n	}\n\n	<span class=\"com\">// Key exists.\n</span>	<span class=\"key\">var</span> i int\n	<span class=\"key\">for</span> i = 0; i < _DEPTH_VALUES; i++ {\n		<span id=\"vr\">vr</span> := varRegExp.FindString(value)\n		<span class=\"key\">if</span> <span class=\"bui\">len</span>(vr) == 0 {\n			<span class=\"ret\">break</span>\n		}\n\n		<span class=\"com\">// Take off leading '%(' and trailing ')s'\n</span>		<span id=\"noption\">noption</span> := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strings#TrimLeft\">strings.TrimLeft</a>(vr, <span class=\"str\">&#34;%(&#34;</span>)\n		<span id=\"noption\">noption</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strings#TrimRight\">strings.TrimRight</a>(noption, <span class=\"str\">&#34;)s&#34;</span>)\n\n		<span class=\"com\">// Search variable in default section\n</span>		nvalue, _ := c.GetValue(DEFAULT_SECTION, noption)\n		<span class=\"com\">// Search in the same section\n</span>		<span class=\"key\">if</span> _, <span id=\"ok\">ok</span> := c.data[section][noption]; <span id=\"ok\">ok</span> {\n			<span id=\"nvalue\">nvalue</span> = c.data[section][noption]\n		}\n\n		<span class=\"com\">// substitute by new value and take off leading '%(' and trailing ')s'\n</span>		<span id=\"value\">value</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strings#Replace\">strings.Replace</a>(value, vr, nvalue, -1)\n	}\n	<span class=\"ret\">return</span> value, <span class=\"boo\">nil</span>\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"ConfigFile_Int\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/conf.go#L198\">Int</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ConfigFile_Int\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) Int(section, <span id=\"key\">key</span> string) (int, error)</pre>\n<p>\nInt returns int type value.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ConfigFile_Int\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) Int(section, <span id=\"key\">key</span> string) (int, error) {\n	<span class=\"com\">// Get string format value.\n</span>	value, <span id=\"err\">err</span> := c.GetValue(section, key)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> 0, err\n	}\n\n	<span class=\"com\">// Convert type.\n</span>	<span class=\"ret\">return</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strconv#Atoi\">strconv.Atoi</a>(value)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"ConfigFile_Int64\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/conf.go#L210\">Int64</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ConfigFile_Int64\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) Int64(section, <span id=\"key\">key</span> string) (int64, error)</pre>\n<p>\nInt64 returns int64 type value.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ConfigFile_Int64\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) Int64(section, <span id=\"key\">key</span> string) (int64, error) {\n	<span class=\"com\">// Get string format value.\n</span>	value, <span id=\"err\">err</span> := c.GetValue(section, key)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> 0, err\n	}\n\n	<span class=\"com\">// Convert type.\n</span>	<span class=\"ret\">return</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strconv#ParseInt\">strconv.ParseInt</a>(value, 10, 64)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"ConfigFile_MustBool\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/conf.go#L230\">MustBool</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ConfigFile_MustBool\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) MustBool(section, <span id=\"key\">key</span> string) bool</pre>\n<p>\nMustBool always returns value without error,\nit returns false if error occurs.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ConfigFile_MustBool\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) MustBool(section, <span id=\"key\">key</span> string) <span id=\"bool\">bool</span> {\n	value, _ := c.Bool(section, key)\n	<span class=\"ret\">return</span> value\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"ConfigFile_MustFloat64\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/conf.go#L237\">MustFloat64</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ConfigFile_MustFloat64\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) MustFloat64(section, <span id=\"key\">key</span> string) float64</pre>\n<p>\nMustFloat64 always returns value without error,\nit returns 0.0 if error occurs.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ConfigFile_MustFloat64\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) MustFloat64(section, <span id=\"key\">key</span> string) <span id=\"float64\">float64</span> {\n	value, _ := c.Float64(section, key)\n	<span class=\"ret\">return</span> value\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"ConfigFile_MustInt\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/conf.go#L244\">MustInt</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ConfigFile_MustInt\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) MustInt(section, <span id=\"key\">key</span> string) int</pre>\n<p>\nMustInt always returns value without error,\nit returns 0 if error occurs.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ConfigFile_MustInt\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) MustInt(section, <span id=\"key\">key</span> string) <span id=\"int\">int</span> {\n	value, _ := c.Int(section, key)\n	<span class=\"ret\">return</span> value\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"ConfigFile_MustInt64\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/conf.go#L251\">MustInt64</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ConfigFile_MustInt64\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) MustInt64(section, <span id=\"key\">key</span> string) int64</pre>\n<p>\nMustInt64 always returns value without error,\nit returns 0 if error occurs.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ConfigFile_MustInt64\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) MustInt64(section, <span id=\"key\">key</span> string) <span id=\"int64\">int64</span> {\n	value, _ := c.Int64(section, key)\n	<span class=\"ret\">return</span> value\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"ConfigFile_MustValue\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/conf.go#L223\">MustValue</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ConfigFile_MustValue\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) MustValue(section, <span id=\"key\">key</span> string) string</pre>\n<p>\nMustValue always returns value without error,\nit returns empty string if error occurs.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ConfigFile_MustValue\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) MustValue(section, <span id=\"key\">key</span> string) <span id=\"string\">string</span> {\n	value, _ := c.GetValue(section, key)\n	<span class=\"ret\">return</span> value\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"ConfigFile_SetKeyComments\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/conf.go#L302\">SetKeyComments</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ConfigFile_SetKeyComments\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) SetKeyComments(section, key, <span id=\"comments\">comments</span> string) bool</pre>\n<p>\nSetKeyComments adds new section-key comments to the configuration.\nIf comments are empty(0 length), it will remove its section-key comments!\nIt returns true if the comments were inserted or removed, and false if the comments were overwritten.\nIf the section does not exist in advance, it is created.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ConfigFile_SetKeyComments\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) SetKeyComments(section, key, <span id=\"comments\">comments</span> string) <span id=\"bool\">bool</span> {\n	<span class=\"com\">// Check if section exists\n</span>	<span class=\"key\">if</span> _, <span id=\"ok\">ok</span> := c.keyComments[section]; <span id=\"ok\">ok</span> {\n		<span class=\"com\">// Section exists\n</span>		<span class=\"com\">// Check length of comments\n</span>		<span class=\"key\">if</span> <span class=\"bui\">len</span>(comments) == 0 {\n			<span class=\"com\">// Check if key exists\n</span>			<span class=\"key\">if</span> _, <span id=\"ok\">ok</span> := c.keyComments[section][key]; <span id=\"ok\">ok</span> {\n				<span class=\"com\">// Execute remove operation\n</span>				<span class=\"bui\">delete</span>(c.keyComments[section], key)\n			}\n\n			<span class=\"com\">// Not exists can be seen as remove\n</span>			<span class=\"ret\">return</span> <span class=\"boo\">true</span>\n		}\n	} <span class=\"key\">else</span> {\n		<span class=\"com\">// Section not exists\n</span>		<span class=\"com\">// Check length of comments\n</span>		<span class=\"key\">if</span> <span class=\"bui\">len</span>(comments) == 0 {\n			<span class=\"com\">// Not exists can be seen as remove\n</span>			<span class=\"ret\">return</span> <span class=\"boo\">true</span>\n		} <span class=\"key\">else</span> {\n			<span class=\"com\">// Execute add operation\n</span>			c.keyComments[section] = <span class=\"bui\">make</span>(map[string]string)\n		}\n	}\n\n	<span class=\"com\">// Check if key exists\n</span>	_, <span id=\"ok\">ok</span> := c.keyComments[section][key]\n	<span class=\"key\">if</span> comments[0] != <span class=\"str\">&#39;#&#39;</span> && comments[0] != <span class=\"str\">&#39;;&#39;</span> {\n		<span id=\"comments\">comments</span> = <span class=\"str\">&#34;; &#34;</span> + comments\n	}\n	c.keyComments[section][key] = comments\n	<span class=\"ret\">return</span> !ok\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"ConfigFile_SetSectionComments\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/conf.go#L276\">SetSectionComments</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ConfigFile_SetSectionComments\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) SetSectionComments(section, <span id=\"comments\">comments</span> string) bool</pre>\n<p>\nSetSectionComments adds new section comments to the configuration.\nIf comments are empty(0 length), it will remove its section comments!\nIt returns true if the comments were inserted or removed, and false if the comments were overwritten.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ConfigFile_SetSectionComments\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) SetSectionComments(section, <span id=\"comments\">comments</span> string) <span id=\"bool\">bool</span> {\n	<span class=\"com\">// Check length of comments\n</span>	<span class=\"key\">if</span> <span class=\"bui\">len</span>(comments) == 0 {\n		<span class=\"com\">// Check if section exists\n</span>		<span class=\"key\">if</span> _, <span id=\"ok\">ok</span> := c.sectionComments[section]; <span id=\"ok\">ok</span> {\n			<span class=\"com\">// Execute remove operation\n</span>			<span class=\"bui\">delete</span>(c.sectionComments, section)\n		}\n\n		<span class=\"com\">// Not exists can be seen as remove\n</span>		<span class=\"ret\">return</span> <span class=\"boo\">true</span>\n	}\n\n	<span class=\"com\">// Check if comments exists\n</span>	_, <span id=\"ok\">ok</span> := c.sectionComments[section]\n	<span class=\"key\">if</span> comments[0] != <span class=\"str\">&#39;#&#39;</span> && comments[0] != <span class=\"str\">&#39;;&#39;</span> {\n		<span id=\"comments\">comments</span> = <span class=\"str\">&#34;; &#34;</span> + comments\n	}\n	c.sectionComments[section] = comments\n	<span class=\"ret\">return</span> !ok\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"ConfigFile_SetValue\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/conf.go#L64\">SetValue</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ConfigFile_SetValue\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) SetValue(section, key, <span id=\"value\">value</span> string) bool</pre>\n<p>\nSetValue adds a new section-key-value to the configuration.\nIf value is an empty string(0 length), it will remove its section-key and its comments!\nIt returns true if the key and value were inserted or removed, and false if the value was overwritten.\nIf the section does not exist in advance, it is created.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ConfigFile_SetValue\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"ConfigFile is the representation of configuration settings.\nThe public interface is entirely through methods.\n\" href=\"#ConfigFile\">ConfigFile</a>) SetValue(section, key, <span id=\"value\">value</span> string) <span id=\"bool\">bool</span> {\n	lock.Lock()\n	<span class=\"bui\">defer</span> lock.Unlock()\n\n	<span class=\"com\">// Check if section exists\n</span>	<span class=\"key\">if</span> _, <span id=\"ok\">ok</span> := c.data[section]; <span id=\"ok\">ok</span> {\n		<span class=\"com\">// Section exists\n</span>		<span class=\"com\">// Check length of value\n</span>		<span class=\"key\">if</span> <span class=\"bui\">len</span>(value) == 0 {\n			<span class=\"com\">// Check if key exists\n</span>			<span class=\"key\">if</span> _, <span id=\"ok\">ok</span> := c.data[section][key]; <span id=\"ok\">ok</span> {\n				<span class=\"com\">// Execute remove operation\n</span>				<span class=\"bui\">delete</span>(c.data[section], key)\n				<span class=\"com\">// Remove comments of key\n</span>				c.SetKeyComments(section, key, <span class=\"str\">&#34;&#34;</span>)\n				<span class=\"com\">// Get index of key\n</span>				i := 0\n				<span class=\"key\">for</span> _, <span id=\"keyName\">keyName</span> := <span class=\"key\">range</span> c.keyList[section] {\n					<span class=\"key\">if</span> <span id=\"keyName\">keyName</span> == <span id=\"key\">key</span> {\n						<span class=\"ret\">break</span>\n					}\n					i++\n				}\n				<span class=\"com\">// Remove from key list\n</span>				c.keyList[section] =\n					<span class=\"bui\">append</span>(c.keyList[section][:i], c.keyList[section][i+1:]...)\n			}\n\n			<span class=\"com\">// Not exists can be seen as remove\n</span>			<span class=\"ret\">return</span> <span class=\"boo\">true</span>\n		}\n	} <span class=\"key\">else</span> {\n		<span class=\"com\">// Section not exists\n</span>		<span class=\"com\">// Check length of value\n</span>		<span class=\"key\">if</span> <span class=\"bui\">len</span>(value) == 0 {\n			<span class=\"com\">// Not exists can be seen as remove\n</span>			<span class=\"ret\">return</span> <span class=\"boo\">true</span>\n		} <span class=\"key\">else</span> {\n			<span class=\"com\">// Execute add operation\n</span>			c.data[section] = <span class=\"bui\">make</span>(map[string]string)\n			<span class=\"com\">// Append section to list\n</span>			<span id=\"c.sectionList\">c.sectionList</span> = <span class=\"bui\">append</span>(c.sectionList, section)\n		}\n	}\n\n	<span class=\"com\">// Check if key exists\n</span>	_, <span id=\"ok\">ok</span> := c.data[section][key]\n	c.data[section][key] = value\n	<span class=\"key\">if</span> !<span id=\"ok\">ok</span> {\n		<span class=\"com\">// If not exists, append to key list\n</span>		c.keyList[section] = <span class=\"bui\">append</span>(c.keyList[section], key)\n	}\n	<span class=\"ret\">return</span> !ok\n}</pre>\n	</div>\n	</div>\n\n\n\n<b></b>\n\n\n<h3 id=\"GetError\">\n	type \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/conf.go#L358\">GetError</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"GetError occurs when get value in configuration file with invalid parameter\n\" href=\"#GetError\">GetError</a> <span class=\"key\">struct</span> {\n    <span id=\"Reason\">Reason</span>  <span id=\"int\">int</span> <span class=\"com\">// Error reason\n</span>    <span id=\"Section\">Section</span> string\n}</pre>\n<p>\nGetError occurs when get value in configuration file with invalid parameter\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n\n\n<h4 id=\"GetError_Error\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/conf.go#L364\">Error</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_GetError_Error\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (<span id=\"err\">err</span> <a class=\"int\" title=\"GetError occurs when get value in configuration file with invalid parameter\n\" href=\"#GetError\">GetError</a>) Error() string</pre>\n<p>\nImplement Error method\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_GetError_Error\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (<span id=\"err\">err</span> <a class=\"int\" title=\"GetError occurs when get value in configuration file with invalid parameter\n\" href=\"#GetError\">GetError</a>) Error() <span id=\"string\">string</span> {\n	<span class=\"key\">switch</span> <span id=\"err.Reason\">err.Reason</span> {\n	<span class=\"key\">case</span> SectionNotFound:\n		<span class=\"ret\">return</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/fmt#Sprintf\">fmt.Sprintf</a>(<span class=\"str\">&#34;section &#39;%s&#39; not found&#34;</span>, string(err.Section))\n	}\n\n	<span class=\"ret\">return</span> <span class=\"str\">&#34;invalid get error&#34;</span>\n}</pre>\n	</div>\n	</div>\n\n\n\n<b></b>\n\n\n<h3 id=\"ReadError\">\n	type \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/read.go#L133\">ReadError</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"ReadError occurs when read configuration file with wrong format\n\" href=\"#ReadError\">ReadError</a> <span class=\"key\">struct</span> {\n    <span id=\"Reason\">Reason</span>  <span id=\"int\">int</span>    <span class=\"com\">// Error reason\n</span>    <span id=\"Content\">Content</span> <span id=\"string\">string</span> <span class=\"com\">// Line content\n</span>}</pre>\n<p>\nReadError occurs when read configuration file with wrong format\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n\n\n<h4 id=\"ReadError_Error\">\n	func \n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/blob/master/read.go#L139\">Error</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ReadError_Error\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (<span id=\"err\">err</span> <a class=\"int\" title=\"ReadError occurs when read configuration file with wrong format\n\" href=\"#ReadError\">ReadError</a>) Error() string</pre>\n<p>\nImplement Error method\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ReadError_Error\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (<span id=\"err\">err</span> <a class=\"int\" title=\"ReadError occurs when read configuration file with wrong format\n\" href=\"#ReadError\">ReadError</a>) Error() <span id=\"string\">string</span> {\n	<span class=\"key\">switch</span> <span id=\"err.Reason\">err.Reason</span> {\n	<span class=\"key\">case</span> BlankSection:\n		<span class=\"ret\">return</span> <span class=\"str\">&#34;empty section name not allowed&#34;</span>\n	<span class=\"key\">case</span> CouldNotParse:\n		<span class=\"ret\">return</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/fmt#Sprintf\">fmt.Sprintf</a>(<span class=\"str\">&#34;could not parse line: %s&#34;</span>, string(err.Content))\n	}\n\n	<span class=\"ret\">return</span> <span class=\"str\">&#34;invalid read error&#34;</span>\n}</pre>\n	</div>\n	</div>\n\n\n\n<b></b>\n\n\n<b></b>\n\n\n\n<h3 id=\"_files\">\n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/tree/master\">Files</a>\n</h3>\n\n\n<p>\n	\n	\n	\n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/tree/master/conf.go\">conf.go</a>\n	\n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/tree/master/read.go\">read.go</a>\n	\n	<a target=\"_blank\" href=\"http://git.oschina.net/unknown/goconfig/tree/master/write.go\">write.go</a>\n	\n</p>\n\n")