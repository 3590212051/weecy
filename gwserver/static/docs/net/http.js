document.write("<br /><p><b>\nPackage http provides HTTP client and server implementations.\n</b></p>\n<p>\nGet, Head, Post, and PostForm make HTTP requests:\n</p>\n<pre>resp, err := http.Get(&#34;<a href=\"http://example.com/\">http://example.com/</a>&#34;)\n...\nresp, err := http.Post(&#34;<a href=\"http://example.com/upload\">http://example.com/upload</a>&#34;, &#34;image/jpeg&#34;, &amp;buf)\n...\nresp, err := http.PostForm(&#34;<a href=\"http://example.com/form\">http://example.com/form</a>&#34;,\n	url.Values{&#34;key&#34;: {&#34;Value&#34;}, &#34;id&#34;: {&#34;123&#34;}})\n</pre>\n<p>\nThe client must close the response body when finished with it:\n</p>\n<pre>resp, err := http.Get(&#34;<a href=\"http://example.com/\">http://example.com/</a>&#34;)\nif err != nil {\n	// handle error\n}\ndefer resp.Body.Close()\nbody, err := ioutil.ReadAll(resp.Body)\n// ...\n</pre>\n<p>\nFor control over HTTP client headers, redirect policy, and other\nsettings, create a Client:\n</p>\n<pre>client := &amp;http.Client{\n	CheckRedirect: redirectPolicyFunc,\n}\n\nresp, err := client.Get(&#34;<a href=\"http://example.com\">http://example.com</a>&#34;)\n// ...\n\nreq, err := http.NewRequest(&#34;GET&#34;, &#34;<a href=\"http://example.com\">http://example.com</a>&#34;, nil)\n// ...\nreq.Header.Add(&#34;If-None-Match&#34;, `W/&#34;wyzzy&#34;`)\nresp, err := client.Do(req)\n// ...\n</pre>\n<p>\nFor control over proxies, TLS configuration, keep-alives,\ncompression, and other settings, create a Transport:\n</p>\n<pre>tr := &amp;http.Transport{\n	TLSClientConfig:    &amp;tls.Config{RootCAs: pool},\n	DisableCompression: true,\n}\nclient := &amp;http.Client{Transport: tr}\nresp, err := client.Get(&#34;<a href=\"https://example.com\">https://example.com</a>&#34;)\n</pre>\n<p>\nClients and Transports are safe for concurrent use by multiple\ngoroutines and for efficiency should only be created once and re-used.\n</p>\n<p>\nListenAndServe starts an HTTP server with a given address and handler.\nThe handler is usually nil, which means to use DefaultServeMux.\nHandle and HandleFunc add handlers to DefaultServeMux:\n</p>\n<pre>http.Handle(&#34;/foo&#34;, fooHandler)\n\nhttp.HandleFunc(&#34;/bar&#34;, func(w http.ResponseWriter, r *http.Request) {\n	fmt.Fprintf(w, &#34;Hello, %q&#34;, html.EscapeString(r.URL.Path))\n})\n\nlog.Fatal(http.ListenAndServe(&#34;:8080&#34;, nil))\n</pre>\n<p>\nMore control over the server&#39;s behavior is available by creating a\ncustom Server:\n</p>\n<pre>s := &amp;http.Server{\n	Addr:           &#34;:8080&#34;,\n	Handler:        myHandler,\n	ReadTimeout:    10 * time.Second,\n	WriteTimeout:   10 * time.Second,\n	MaxHeaderBytes: 1 &lt;&lt; 20,\n}\nlog.Fatal(s.ListenAndServe())</pre>\n\n\n\n\n<h3 id=\"_index\">\n	Index \n	\n	<span class=\"label label-success\">\n		Documentation complete 97%(96/98)\n	</span>\n	\n</h3>\n\n<ul class=\"unstyled\">\n	\n	<li>\n		<a href=\"#_constants\">Constants</a>\n	</li>\n	\n	\n	\n	<li>\n		<a href=\"#_variables\">Variables</a>\n	</li>\n	\n	\n	\n	<li>\n		<a href=\"#CanonicalHeaderKey\">func CanonicalHeaderKey(s string) string</a>\n	</li>\n	\n	<li>\n		<a href=\"#DetectContentType\">func DetectContentType(data []byte) string</a>\n	</li>\n	\n	<li>\n		<a href=\"#Error\">func Error(w ResponseWriter, error string, code int)</a>\n	</li>\n	\n	<li>\n		<a href=\"#Handle\">func Handle(pattern string, handler Handler)</a>\n	</li>\n	\n	<li>\n		<a href=\"#HandleFunc\">func HandleFunc(pattern string, handler func(ResponseWriter, *Request))</a>\n	</li>\n	\n	<li>\n		<a href=\"#ListenAndServe\">func ListenAndServe(addr string, handler Handler) error</a>\n	</li>\n	\n	<li>\n		<a href=\"#ListenAndServeTLS\">func ListenAndServeTLS(addr string, certFile string, keyFile string, handler Handler) error</a>\n	</li>\n	\n	<li>\n		<a href=\"#MaxBytesReader\">func MaxBytesReader(w ResponseWriter, r io.ReadCloser, n int64) io.ReadCloser</a>\n	</li>\n	\n	<li>\n		<a href=\"#NotFound\">func NotFound(w ResponseWriter, r *Request)</a>\n	</li>\n	\n	<li>\n		<a href=\"#ParseHTTPVersion\">func ParseHTTPVersion(vers string) (major, minor int, ok bool)</a>\n	</li>\n	\n	<li>\n		<a href=\"#ParseTime\">func ParseTime(text string) (t time.Time, err error)</a>\n	</li>\n	\n	<li>\n		<a href=\"#ProxyFromEnvironment\">func ProxyFromEnvironment(req *Request) (*url.URL, error)</a>\n	</li>\n	\n	<li>\n		<a href=\"#ProxyURL\">func ProxyURL(fixedURL *url.URL) func(*Request) (*url.URL, error)</a>\n	</li>\n	\n	<li>\n		<a href=\"#Redirect\">func Redirect(w ResponseWriter, r *Request, urlStr string, code int)</a>\n	</li>\n	\n	<li>\n		<a href=\"#Serve\">func Serve(l net.Listener, handler Handler) error</a>\n	</li>\n	\n	<li>\n		<a href=\"#ServeContent\">func ServeContent(w ResponseWriter, req *Request, name string, modtime time.Time, content io.ReadSeeker)</a>\n	</li>\n	\n	<li>\n		<a href=\"#ServeFile\">func ServeFile(w ResponseWriter, r *Request, name string)</a>\n	</li>\n	\n	<li>\n		<a href=\"#SetCookie\">func SetCookie(w ResponseWriter, cookie *Cookie)</a>\n	</li>\n	\n	<li>\n		<a href=\"#StatusText\">func StatusText(code int) string</a>\n	</li>\n	\n\n	\n	\n	<li>\n		<a href=\"#Client\">type Client</a>\n	</li>\n	\n	\n	\n	\n	<ul>\n		<li>\n			<a href=\"#Client_Do\">func (c *Client) Do(req *Request) (resp *Response, err error)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Client_Get\">func (c *Client) Get(url string) (resp *Response, err error)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Client_Head\">func (c *Client) Head(url string) (resp *Response, err error)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Client_Post\">func (c *Client) Post(url string, bodyType string, body io.Reader) (resp *Response, err error)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Client_PostForm\">func (c *Client) PostForm(url string, data url.Values) (resp *Response, err error)</a>\n		</li>\n	</ul>\n	\n	\n	\n	<li>\n		<a href=\"#CloseNotifier\">type CloseNotifier</a>\n	</li>\n	\n	\n	\n	\n	\n	\n	<li>\n		<a href=\"#Cookie\">type Cookie</a>\n	</li>\n	\n	\n	\n	\n	<ul>\n		<li>\n			<a href=\"#Cookie_String\">func (c *Cookie) String() string</a>\n		</li>\n	</ul>\n	\n	\n	\n	<li>\n		<a href=\"#CookieJar\">type CookieJar</a>\n	</li>\n	\n	\n	\n	\n	\n	\n	<li>\n		<a href=\"#Dir\">type Dir</a>\n	</li>\n	\n	\n	\n	\n	<ul>\n		<li>\n			<a href=\"#Dir_Open\">func (d Dir) Open(name string) (File, error)</a>\n		</li>\n	</ul>\n	\n	\n	\n	<li>\n		<a href=\"#File\">type File</a>\n	</li>\n	\n	\n	\n	\n	\n	\n	<li>\n		<a href=\"#FileSystem\">type FileSystem</a>\n	</li>\n	\n	\n	\n	\n	\n	\n	<li>\n		<a href=\"#Flusher\">type Flusher</a>\n	</li>\n	\n	\n	\n	\n	\n	\n	<li>\n		<a href=\"#Handler\">type Handler</a>\n	</li>\n	\n	\n	<ul>\n		<li>\n			<a href=\"#FileServer\">func FileServer(root FileSystem) Handler</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#NotFoundHandler\">func NotFoundHandler() Handler</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#RedirectHandler\">func RedirectHandler(url string, code int) Handler</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#StripPrefix\">func StripPrefix(prefix string, h Handler) Handler</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#TimeoutHandler\">func TimeoutHandler(h Handler, dt time.Duration, msg string) Handler</a>\n		</li>\n	</ul>\n	\n	\n	\n	\n	\n	<li>\n		<a href=\"#HandlerFunc\">type HandlerFunc</a>\n	</li>\n	\n	\n	\n	\n	<ul>\n		<li>\n			<a href=\"#HandlerFunc_ServeHTTP\">func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request)</a>\n		</li>\n	</ul>\n	\n	\n	\n	<li>\n		<a href=\"#Header\">type Header</a>\n	</li>\n	\n	\n	\n	\n	<ul>\n		<li>\n			<a href=\"#Header_Add\">func (h Header) Add(key, value string)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Header_Del\">func (h Header) Del(key string)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Header_Get\">func (h Header) Get(key string) string</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Header_Set\">func (h Header) Set(key, value string)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Header_Write\">func (h Header) Write(w io.Writer) error</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Header_WriteSubset\">func (h Header) WriteSubset(w io.Writer, exclude map[string]bool) error</a>\n		</li>\n	</ul>\n	\n	\n	\n	<li>\n		<a href=\"#Hijacker\">type Hijacker</a>\n	</li>\n	\n	\n	\n	\n	\n	\n	<li>\n		<a href=\"#ProtocolError\">type ProtocolError</a>\n	</li>\n	\n	\n	\n	\n	<ul>\n		<li>\n			<a href=\"#ProtocolError_Error\">func (err *ProtocolError) Error() string</a>\n		</li>\n	</ul>\n	\n	\n	\n	<li>\n		<a href=\"#Request\">type Request</a>\n	</li>\n	\n	\n	<ul>\n		<li>\n			<a href=\"#NewRequest\">func NewRequest(method, urlStr string, body io.Reader) (*Request, error)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ReadRequest\">func ReadRequest(b *bufio.Reader) (req *Request, err error)</a>\n		</li>\n	</ul>\n	\n	\n	\n	<ul>\n		<li>\n			<a href=\"#Request_AddCookie\">func (r *Request) AddCookie(c *Cookie)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Request_Cookie\">func (r *Request) Cookie(name string) (*Cookie, error)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Request_Cookies\">func (r *Request) Cookies() []*Cookie</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Request_FormFile\">func (r *Request) FormFile(key string) (multipart.File, *multipart.FileHeader, error)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Request_FormValue\">func (r *Request) FormValue(key string) string</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Request_MultipartReader\">func (r *Request) MultipartReader() (*multipart.Reader, error)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Request_ParseForm\">func (r *Request) ParseForm() error</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Request_ParseMultipartForm\">func (r *Request) ParseMultipartForm(maxMemory int64) error</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Request_PostFormValue\">func (r *Request) PostFormValue(key string) string</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Request_ProtoAtLeast\">func (r *Request) ProtoAtLeast(major, minor int) bool</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Request_Referer\">func (r *Request) Referer() string</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Request_SetBasicAuth\">func (r *Request) SetBasicAuth(username, password string)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Request_UserAgent\">func (r *Request) UserAgent() string</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Request_Write\">func (r *Request) Write(w io.Writer) error</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Request_WriteProxy\">func (r *Request) WriteProxy(w io.Writer) error</a>\n		</li>\n	</ul>\n	\n	\n	\n	<li>\n		<a href=\"#Response\">type Response</a>\n	</li>\n	\n	\n	<ul>\n		<li>\n			<a href=\"#Get\">func Get(url string) (resp *Response, err error)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Head\">func Head(url string) (resp *Response, err error)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Post\">func Post(url string, bodyType string, body io.Reader) (resp *Response, err error)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#PostForm\">func PostForm(url string, data url.Values) (resp *Response, err error)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ReadResponse\">func ReadResponse(r *bufio.Reader, req *Request) (*Response, error)</a>\n		</li>\n	</ul>\n	\n	\n	\n	<ul>\n		<li>\n			<a href=\"#Response_Cookies\">func (r *Response) Cookies() []*Cookie</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Response_Location\">func (r *Response) Location() (*url.URL, error)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Response_ProtoAtLeast\">func (r *Response) ProtoAtLeast(major, minor int) bool</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Response_Write\">func (r *Response) Write(w io.Writer) error</a>\n		</li>\n	</ul>\n	\n	\n	\n	<li>\n		<a href=\"#ResponseWriter\">type ResponseWriter</a>\n	</li>\n	\n	\n	\n	\n	\n	\n	<li>\n		<a href=\"#RoundTripper\">type RoundTripper</a>\n	</li>\n	\n	\n	<ul>\n		<li>\n			<a href=\"#NewFileTransport\">func NewFileTransport(fs FileSystem) RoundTripper</a>\n		</li>\n	</ul>\n	\n	\n	\n	\n	\n	<li>\n		<a href=\"#ServeMux\">type ServeMux</a>\n	</li>\n	\n	\n	<ul>\n		<li>\n			<a href=\"#NewServeMux\">func NewServeMux() *ServeMux</a>\n		</li>\n	</ul>\n	\n	\n	\n	<ul>\n		<li>\n			<a href=\"#ServeMux_Handle\">func (mux *ServeMux) Handle(pattern string, handler Handler)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ServeMux_HandleFunc\">func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request))</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ServeMux_Handler\">func (mux *ServeMux) Handler(r *Request) (h Handler, pattern string)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#ServeMux_ServeHTTP\">func (mux *ServeMux) ServeHTTP(w ResponseWriter, r *Request)</a>\n		</li>\n	</ul>\n	\n	\n	\n	<li>\n		<a href=\"#Server\">type Server</a>\n	</li>\n	\n	\n	\n	\n	<ul>\n		<li>\n			<a href=\"#Server_ListenAndServe\">func (srv *Server) ListenAndServe() error</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Server_ListenAndServeTLS\">func (srv *Server) ListenAndServeTLS(certFile, keyFile string) error</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Server_Serve\">func (srv *Server) Serve(l net.Listener) error</a>\n		</li>\n	</ul>\n	\n	\n	\n	<li>\n		<a href=\"#Transport\">type Transport</a>\n	</li>\n	\n	\n	\n	\n	<ul>\n		<li>\n			<a href=\"#Transport_CancelRequest\">func (t *Transport) CancelRequest(req *Request)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Transport_CloseIdleConnections\">func (t *Transport) CloseIdleConnections()</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Transport_RegisterProtocol\">func (t *Transport) RegisterProtocol(scheme string, rt RoundTripper)</a>\n		</li>\n	</ul>\n	\n	<ul>\n		<li>\n			<a href=\"#Transport_RoundTrip\">func (t *Transport) RoundTrip(req *Request) (resp *Response, err error)</a>\n		</li>\n	</ul>\n	\n	\n</ul>\n\n\n<h3 id=\"_exams\">Examples</h3>\n<ul class=\"unstyled\">\n	\n	\n	<li><a href=\"#_ex_btn_FileServer\" onclick=\"showExample(&#34;FileServer&#34;)\">FileServer</a></li>\n	\n	\n	\n	<li><a href=\"#_ex_btn_FileServer_stripPrefix\" onclick=\"showExample(&#34;FileServer_stripPrefix&#34;)\">FileServer_stripPrefix</a></li>\n	\n	\n	\n	<li><a href=\"#_ex_btn_Get\" onclick=\"showExample(&#34;Get&#34;)\">Get</a></li>\n	\n	\n	\n	<li><a href=\"#_ex_btn_Hijacker\" onclick=\"showExample(&#34;Hijacker&#34;)\">Hijacker</a></li>\n	\n	\n	\n	<li><a href=\"#_ex_btn_StripPrefix\" onclick=\"showExample(&#34;StripPrefix&#34;)\">StripPrefix</a></li>\n	\n	\n</ul>\n\n\n\n<div id=\"search_exports\" class=\"modal hide fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n	<form id=\"search_form\" class=\"modal-form\">\n		<div class=\"modal-header\">\n			<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\n			<h3 id=\"myModalLabel\" style=\"margin: 10px\">Search and Go to Exports.</h3>\n		</div>\n\n		<div class=\"modal-body\" style=\"overflow-y: visible;\">\n			<input id=\"search_export_box\" autofocus=\"autofocus\" autocomplete=\"off\" class=\"span5\" type=\"text\" placeholder=\"type or function name\"  data-source=\"[&quot;Client&quot;,&quot;CloseNotifier&quot;,&quot;Cookie&quot;,&quot;CookieJar&quot;,&quot;Dir&quot;,&quot;File&quot;,&quot;FileSystem&quot;,&quot;Flusher&quot;,&quot;Handler&quot;,&quot;HandlerFunc&quot;,&quot;Header&quot;,&quot;Hijacker&quot;,&quot;ProtocolError&quot;,&quot;Request&quot;,&quot;Response&quot;,&quot;ResponseWriter&quot;,&quot;RoundTripper&quot;,&quot;ServeMux&quot;,&quot;Server&quot;,&quot;Transport&quot;,&quot;CanonicalHeaderKey&quot;,&quot;DetectContentType&quot;,&quot;Error&quot;,&quot;Handle&quot;,&quot;HandleFunc&quot;,&quot;ListenAndServe&quot;,&quot;ListenAndServeTLS&quot;,&quot;MaxBytesReader&quot;,&quot;NotFound&quot;,&quot;ParseHTTPVersion&quot;,&quot;ParseTime&quot;,&quot;ProxyFromEnvironment&quot;,&quot;ProxyURL&quot;,&quot;Redirect&quot;,&quot;Serve&quot;,&quot;ServeContent&quot;,&quot;ServeFile&quot;,&quot;SetCookie&quot;,&quot;StatusText&quot;,&quot;Client.Do&quot;,&quot;Client.Get&quot;,&quot;Client.Head&quot;,&quot;Client.Post&quot;,&quot;Client.PostForm&quot;,&quot;Cookie.String&quot;,&quot;Dir.Open&quot;,&quot;FileServer&quot;,&quot;NotFoundHandler&quot;,&quot;RedirectHandler&quot;,&quot;StripPrefix&quot;,&quot;TimeoutHandler&quot;,&quot;HandlerFunc.ServeHTTP&quot;,&quot;Header.Add&quot;,&quot;Header.Del&quot;,&quot;Header.Get&quot;,&quot;Header.Set&quot;,&quot;Header.Write&quot;,&quot;Header.WriteSubset&quot;,&quot;ProtocolError.Error&quot;,&quot;NewRequest&quot;,&quot;ReadRequest&quot;,&quot;Request.AddCookie&quot;,&quot;Request.Cookie&quot;,&quot;Request.Cookies&quot;,&quot;Request.FormFile&quot;,&quot;Request.FormValue&quot;,&quot;Request.MultipartReader&quot;,&quot;Request.ParseForm&quot;,&quot;Request.ParseMultipartForm&quot;,&quot;Request.PostFormValue&quot;,&quot;Request.ProtoAtLeast&quot;,&quot;Request.Referer&quot;,&quot;Request.SetBasicAuth&quot;,&quot;Request.UserAgent&quot;,&quot;Request.Write&quot;,&quot;Request.WriteProxy&quot;,&quot;Get&quot;,&quot;Head&quot;,&quot;Post&quot;,&quot;PostForm&quot;,&quot;ReadResponse&quot;,&quot;Response.Cookies&quot;,&quot;Response.Location&quot;,&quot;Response.ProtoAtLeast&quot;,&quot;Response.Write&quot;,&quot;NewFileTransport&quot;,&quot;NewServeMux&quot;,&quot;ServeMux.Handle&quot;,&quot;ServeMux.HandleFunc&quot;,&quot;ServeMux.Handler&quot;,&quot;ServeMux.ServeHTTP&quot;,&quot;Server.ListenAndServe&quot;,&quot;Server.ListenAndServeTLS&quot;,&quot;Server.Serve&quot;,&quot;Transport.CancelRequest&quot;,&quot;Transport.CloseIdleConnections&quot;,&quot;Transport.RegisterProtocol&quot;,&quot;Transport.RoundTrip&quot;]\" data-provide=\"typeahead\">\n		</div>\n\n		<div class=\"modal-footer\">\n			<button type='button' class=\"btn\" data-dismiss=\"modal\" aria-hidden=\"true\">Close</button>\n			<button class=\"btn btn-primary\" type=\"submit\">Go!</button>\n		</div>\n	</form>\n</div>\n\n\n<b></b>\n\n\n\n\n	<h3 id=\"_constants\">Constants</h3>\n	\n		\n			<pre class=\"pre-x-scrollable\"><span class=\"key\">const</span> (\n    <span id=\"StatusContinue\">StatusContinue</span>           = 100\n    <span id=\"StatusSwitchingProtocols\">StatusSwitchingProtocols</span> = 101\n\n    <span id=\"StatusOK\">StatusOK</span>                   = 200\n    <span id=\"StatusCreated\">StatusCreated</span>              = 201\n    <span id=\"StatusAccepted\">StatusAccepted</span>             = 202\n    <span id=\"StatusNonAuthoritativeInfo\">StatusNonAuthoritativeInfo</span> = 203\n    <span id=\"StatusNoContent\">StatusNoContent</span>            = 204\n    <span id=\"StatusResetContent\">StatusResetContent</span>         = 205\n    <span id=\"StatusPartialContent\">StatusPartialContent</span>       = 206\n\n    <span id=\"StatusMultipleChoices\">StatusMultipleChoices</span>   = 300\n    <span id=\"StatusMovedPermanently\">StatusMovedPermanently</span>  = 301\n    <span id=\"StatusFound\">StatusFound</span>             = 302\n    <span id=\"StatusSeeOther\">StatusSeeOther</span>          = 303\n    <span id=\"StatusNotModified\">StatusNotModified</span>       = 304\n    <span id=\"StatusUseProxy\">StatusUseProxy</span>          = 305\n    <span id=\"StatusTemporaryRedirect\">StatusTemporaryRedirect</span> = 307\n\n    <span id=\"StatusBadRequest\">StatusBadRequest</span>                   = 400\n    <span id=\"StatusUnauthorized\">StatusUnauthorized</span>                 = 401\n    <span id=\"StatusPaymentRequired\">StatusPaymentRequired</span>              = 402\n    <span id=\"StatusForbidden\">StatusForbidden</span>                    = 403\n    <span id=\"StatusNotFound\">StatusNotFound</span>                     = 404\n    <span id=\"StatusMethodNotAllowed\">StatusMethodNotAllowed</span>             = 405\n    <span id=\"StatusNotAcceptable\">StatusNotAcceptable</span>                = 406\n    <span id=\"StatusProxyAuthRequired\">StatusProxyAuthRequired</span>            = 407\n    <span id=\"StatusRequestTimeout\">StatusRequestTimeout</span>               = 408\n    <span id=\"StatusConflict\">StatusConflict</span>                     = 409\n    <span id=\"StatusGone\">StatusGone</span>                         = 410\n    <span id=\"StatusLengthRequired\">StatusLengthRequired</span>               = 411\n    <span id=\"StatusPreconditionFailed\">StatusPreconditionFailed</span>           = 412\n    <span id=\"StatusRequestEntityTooLarge\">StatusRequestEntityTooLarge</span>        = 413\n    <span id=\"StatusRequestURITooLong\">StatusRequestURITooLong</span>            = 414\n    <span id=\"StatusUnsupportedMediaType\">StatusUnsupportedMediaType</span>         = 415\n    <span id=\"StatusRequestedRangeNotSatisfiable\">StatusRequestedRangeNotSatisfiable</span> = 416\n    <span id=\"StatusExpectationFailed\">StatusExpectationFailed</span>            = 417\n    <span id=\"StatusTeapot\">StatusTeapot</span>                       = 418\n\n    <span id=\"StatusInternalServerError\">StatusInternalServerError</span>     = 500\n    <span id=\"StatusNotImplemented\">StatusNotImplemented</span>          = 501\n    <span id=\"StatusBadGateway\">StatusBadGateway</span>              = 502\n    <span id=\"StatusServiceUnavailable\">StatusServiceUnavailable</span>      = 503\n    <span id=\"StatusGatewayTimeout\">StatusGatewayTimeout</span>          = 504\n    <span id=\"StatusHTTPVersionNotSupported\">StatusHTTPVersionNotSupported</span> = 505\n)</pre>\n			HTTP status codes, defined in RFC 2616.\n\n		\n			<pre class=\"pre-x-scrollable\"><span class=\"key\">const</span> <span id=\"DefaultMaxHeaderBytes\">DefaultMaxHeaderBytes</span> = 1 &lt;&lt; <span id=\"20\">20</span> <span class=\"com\">// 1 MB\n</span></pre>\n			DefaultMaxHeaderBytes is the maximum permitted size of the headers\nin an HTTP request.\nThis can be overridden by setting Server.MaxHeaderBytes.\n\n		\n			<pre class=\"pre-x-scrollable\"><span class=\"key\">const</span> <span id=\"DefaultMaxIdleConnsPerHost\">DefaultMaxIdleConnsPerHost</span> = 2</pre>\n			DefaultMaxIdleConnsPerHost is the default value of Transport's\nMaxIdleConnsPerHost.\n\n		\n			<pre class=\"pre-x-scrollable\"><span class=\"key\">const</span> <span id=\"TimeFormat\">TimeFormat</span> = <span class=\"str\">&#34;Mon, 02 Jan 2006 15:04:05 GMT&#34;</span></pre>\n			TimeFormat is the time format to use with\ntime.Parse and time.Time.Format when parsing\nor generating times in HTTP headers.\nIt is like time.RFC1123 but hard codes GMT as the time zone.\n\n		\n	\n\n\n\n\n\n	<h3 id=\"_variables\">Variables</h3>\n	\n		\n			<pre class=\"pre-x-scrollable\"><span class=\"key\">var</span> (\n    <span id=\"ErrHeaderTooLong\">ErrHeaderTooLong</span>        = &<a class=\"int\" title=\"HTTP request parsing errors.\n\" href=\"#ProtocolError\">ProtocolError</a>{<span class=\"str\">&#34;header too long&#34;</span>}\n    <span id=\"ErrShortBody\">ErrShortBody</span>            = &<a class=\"int\" title=\"HTTP request parsing errors.\n\" href=\"#ProtocolError\">ProtocolError</a>{<span class=\"str\">&#34;entity body too short&#34;</span>}\n    <span id=\"ErrNotSupported\">ErrNotSupported</span>         = &<a class=\"int\" title=\"HTTP request parsing errors.\n\" href=\"#ProtocolError\">ProtocolError</a>{<span class=\"str\">&#34;feature not supported&#34;</span>}\n    <span id=\"ErrUnexpectedTrailer\">ErrUnexpectedTrailer</span>    = &<a class=\"int\" title=\"HTTP request parsing errors.\n\" href=\"#ProtocolError\">ProtocolError</a>{<span class=\"str\">&#34;trailer header without chunked transfer encoding&#34;</span>}\n    <span id=\"ErrMissingContentLength\">ErrMissingContentLength</span> = &<a class=\"int\" title=\"HTTP request parsing errors.\n\" href=\"#ProtocolError\">ProtocolError</a>{<span class=\"str\">&#34;missing ContentLength in HEAD response&#34;</span>}\n    <span id=\"ErrNotMultipart\">ErrNotMultipart</span>         = &<a class=\"int\" title=\"HTTP request parsing errors.\n\" href=\"#ProtocolError\">ProtocolError</a>{<span class=\"str\">&#34;request Content-Type isn&#39;t multipart/form-data&#34;</span>}\n    <span id=\"ErrMissingBoundary\">ErrMissingBoundary</span>      = &<a class=\"int\" title=\"HTTP request parsing errors.\n\" href=\"#ProtocolError\">ProtocolError</a>{<span class=\"str\">&#34;no multipart boundary param in Content-Type&#34;</span>}\n)</pre>\n			\n		\n			<pre class=\"pre-x-scrollable\"><span class=\"key\">var</span> (\n    <span id=\"ErrWriteAfterFlush\">ErrWriteAfterFlush</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/errors#New\">errors.New</a>(<span class=\"str\">&#34;Conn.Write called after Flush&#34;</span>)\n    <span id=\"ErrBodyNotAllowed\">ErrBodyNotAllowed</span>  = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/errors#New\">errors.New</a>(<span class=\"str\">&#34;http: request method or response status code does not allow body&#34;</span>)\n    <span id=\"ErrHijacked\">ErrHijacked</span>        = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/errors#New\">errors.New</a>(<span class=\"str\">&#34;Conn has been hijacked&#34;</span>)\n    <span id=\"ErrContentLength\">ErrContentLength</span>   = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/errors#New\">errors.New</a>(<span class=\"str\">&#34;Conn.Write wrote more than the declared Content-Length&#34;</span>)\n)</pre>\n			Errors introduced by the HTTP server.\n\n		\n			<pre class=\"pre-x-scrollable\"><span class=\"key\">var</span> <span id=\"DefaultClient\">DefaultClient</span> = &<a class=\"int\" title=\"A Client is an HTTP client. Its zero value (DefaultClient) is a\nusable client that uses DefaultTransport.\n\nThe Client&#39;s Transport typically has internal state (cached TCP\nconnections), so Clients should be reused instead of created as\nneeded. Clients are safe for concurrent use by multiple goroutines.\n\nA Client is higher-level than a RoundTripper (such as Transport)\nand additionally handles HTTP details such as cookies and\nredirects.\n\" href=\"#Client\">Client</a>{}</pre>\n			DefaultClient is the default Client and is used by Get, Head, and Post.\n\n		\n			<pre class=\"pre-x-scrollable\"><span class=\"key\">var</span> <span id=\"DefaultServeMux\">DefaultServeMux</span> = <a class=\"int\" title=\"NewServeMux allocates and returns a new ServeMux.\n\" href=\"#NewServeMux\">NewServeMux</a>()</pre>\n			DefaultServeMux is the default ServeMux used by Serve.\n\n		\n			<pre class=\"pre-x-scrollable\"><span class=\"key\">var</span> <span id=\"ErrBodyReadAfterClose\">ErrBodyReadAfterClose</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/errors#New\">errors.New</a>(<span class=\"str\">&#34;http: invalid Read on closed Body&#34;</span>)</pre>\n			ErrBodyReadAfterClose is returned when reading a Request or Response\nBody after the body has been closed. This typically happens when the body is\nread after an HTTP Handler calls WriteHeader or Write on its\nResponseWriter.\n\n		\n			<pre class=\"pre-x-scrollable\"><span class=\"key\">var</span> <span id=\"ErrHandlerTimeout\">ErrHandlerTimeout</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/errors#New\">errors.New</a>(<span class=\"str\">&#34;http: Handler timeout&#34;</span>)</pre>\n			ErrHandlerTimeout is returned on ResponseWriter Write calls\nin handlers which have timed out.\n\n		\n			<pre class=\"pre-x-scrollable\"><span class=\"key\">var</span> <span id=\"ErrLineTooLong\">ErrLineTooLong</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/errors#New\">errors.New</a>(<span class=\"str\">&#34;header line too long&#34;</span>)</pre>\n			\n		\n			<pre class=\"pre-x-scrollable\"><span class=\"key\">var</span> <span id=\"ErrMissingFile\">ErrMissingFile</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/errors#New\">errors.New</a>(<span class=\"str\">&#34;http: no such file&#34;</span>)</pre>\n			ErrMissingFile is returned by FormFile when the provided file field name\nis either not present in the request or not a file field.\n\n		\n			<pre class=\"pre-x-scrollable\"><span class=\"key\">var</span> <span id=\"ErrNoCookie\">ErrNoCookie</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/errors#New\">errors.New</a>(<span class=\"str\">&#34;http: named cookie not present&#34;</span>)</pre>\n			\n		\n			<pre class=\"pre-x-scrollable\"><span class=\"key\">var</span> <span id=\"ErrNoLocation\">ErrNoLocation</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/errors#New\">errors.New</a>(<span class=\"str\">&#34;http: no Location header in response&#34;</span>)</pre>\n			\n		\n	\n\n<b></b>")
