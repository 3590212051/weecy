document.write("\n\n\n\n\n<h3 id=\"CanonicalHeaderKey\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/header.go?r=#174\">CanonicalHeaderKey</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_CanonicalHeaderKey\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"CanonicalHeaderKey returns the canonical format of the\nheader key s.  The canonicalization converts the first\nletter and any letter following a hyphen to upper case;\nthe rest are converted to lowercase.  For example, the\ncanonical key for &#34;accept-encoding&#34; is &#34;Accept-Encoding&#34;.\n\" href=\"#CanonicalHeaderKey\">CanonicalHeaderKey</a>(s string) string</pre>\n<p>\nCanonicalHeaderKey returns the canonical format of the\nheader key s.  The canonicalization converts the first\nletter and any letter following a hyphen to upper case;\nthe rest are converted to lowercase.  For example, the\ncanonical key for &#34;accept-encoding&#34; is &#34;Accept-Encoding&#34;.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_CanonicalHeaderKey\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"CanonicalHeaderKey returns the canonical format of the\nheader key s.  The canonicalization converts the first\nletter and any letter following a hyphen to upper case;\nthe rest are converted to lowercase.  For example, the\ncanonical key for &#34;accept-encoding&#34; is &#34;Accept-Encoding&#34;.\n\" href=\"#CanonicalHeaderKey\">CanonicalHeaderKey</a>(s string) <span id=\"string\">string</span> {\n        <span class=\"ret\">return</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/textproto#CanonicalMIMEHeaderKey\">textproto.CanonicalMIMEHeaderKey</a>(s) \n}</pre>\n	</div>\n</div>\n\n\n\n<h3 id=\"DetectContentType\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/sniff.go?r=#21\">DetectContentType</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_DetectContentType\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"DetectContentType implements the algorithm described\nat http://mimesniff.spec.whatwg.org/ to determine the\nContent-Type of the given data.  It considers at most the\nfirst 512 bytes of data.  DetectContentType always returns\na valid MIME type: if it cannot determine a more specific one, it\nreturns &#34;application/octet-stream&#34;.\n\" href=\"#DetectContentType\">DetectContentType</a>(<span id=\"data\">data</span> []byte) string</pre>\n<p>\nDetectContentType implements the algorithm described\nat <a href=\"http://mimesniff.spec.whatwg.org/\">http://mimesniff.spec.whatwg.org/</a> to determine the\nContent-Type of the given data.  It considers at most the\nfirst 512 bytes of data.  DetectContentType always returns\na valid MIME type: if it cannot determine a more specific one, it\nreturns &#34;application/octet-stream&#34;.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_DetectContentType\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"DetectContentType implements the algorithm described\nat http://mimesniff.spec.whatwg.org/ to determine the\nContent-Type of the given data.  It considers at most the\nfirst 512 bytes of data.  DetectContentType always returns\na valid MIME type: if it cannot determine a more specific one, it\nreturns &#34;application/octet-stream&#34;.\n\" href=\"#DetectContentType\">DetectContentType</a>(<span id=\"data\">data</span> []byte) <span id=\"string\">string</span> {\n	<span class=\"key\">if</span> <span class=\"bui\">len</span>(data) > <span id=\"sniffLen\">sniffLen</span> {\n		<span id=\"data\">data</span> = data[:sniffLen]\n	}\n\n	<span class=\"com\">// Index of the first non-whitespace byte in data.\n</span>	<span id=\"firstNonWS\">firstNonWS</span> := 0\n	<span class=\"key\">for</span> ; <span id=\"firstNonWS\">firstNonWS</span> < <span class=\"bui\">len</span>(data) && isWS(data[firstNonWS]); firstNonWS++ {\n	}\n\n	<span class=\"key\">for</span> _, <span id=\"sig\">sig</span> := <span class=\"key\">range</span> <span id=\"sniffSignatures\">sniffSignatures</span> {\n		<span class=\"key\">if</span> <span id=\"ct\">ct</span> := sig.match(data, firstNonWS); <span id=\"ct\">ct</span> != <span class=\"str\">&#34;&#34;</span> {\n			<span class=\"ret\">return</span> ct\n		}\n	}\n\n	<span class=\"ret\">return</span> <span class=\"str\">&#34;application/octet-stream&#34;</span> <span class=\"com\">// fallback\n</span>}</pre>\n	</div>\n</div>\n\n\n\n<h3 id=\"Error\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1225\">Error</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_Error\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"Error replies to the request with the specified error message and HTTP code.\nThe error message should be plain text.\n\" href=\"#Error\">Error</a>(w <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, <span id=\"error\">error</span> string, <span id=\"code\">code</span> int)</pre>\n<p>\nError replies to the request with the specified error message and HTTP code.\nThe error message should be plain text.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_Error\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"Error replies to the request with the specified error message and HTTP code.\nThe error message should be plain text.\n\" href=\"#Error\">Error</a>(w <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, <span id=\"error\">error</span> string, <span id=\"code\">code</span> int) {\n	w.Header().Set(<span class=\"str\">&#34;Content-Type&#34;</span>, <span class=\"str\">&#34;text/plain; charset=utf-8&#34;</span>)\n	w.WriteHeader(code)\n	<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/fmt#Fprintln\">fmt.Fprintln</a>(w, error)\n}</pre>\n	</div>\n</div>\n\n\n\n<h3 id=\"Handle\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1540\">Handle</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_Handle\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"Handle registers the handler for the given pattern\nin the DefaultServeMux.\nThe documentation for ServeMux explains how patterns are matched.\n\" href=\"#Handle\">Handle</a>(<span id=\"pattern\">pattern</span> string, <span id=\"handler\">handler</span> <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>)</pre>\n<p>\nHandle registers the handler for the given pattern\nin the DefaultServeMux.\nThe documentation for ServeMux explains how patterns are matched.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_Handle\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"Handle registers the handler for the given pattern\nin the DefaultServeMux.\nThe documentation for ServeMux explains how patterns are matched.\n\" href=\"#Handle\">Handle</a>(<span id=\"pattern\">pattern</span> string, <span id=\"handler\">handler</span> <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>) {\n        DefaultServeMux.Handle(pattern, handler) \n}</pre>\n	</div>\n</div>\n\n\n\n<h3 id=\"HandleFunc\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1545\">HandleFunc</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_HandleFunc\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"HandleFunc registers the handler function for the given pattern\nin the DefaultServeMux.\nThe documentation for ServeMux explains how patterns are matched.\n\" href=\"#HandleFunc\">HandleFunc</a>(<span id=\"pattern\">pattern</span> string, <span id=\"handler\">handler</span> <span class=\"key\">func</span>(<a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>))</pre>\n<p>\nHandleFunc registers the handler function for the given pattern\nin the DefaultServeMux.\nThe documentation for ServeMux explains how patterns are matched.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_HandleFunc\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"HandleFunc registers the handler function for the given pattern\nin the DefaultServeMux.\nThe documentation for ServeMux explains how patterns are matched.\n\" href=\"#HandleFunc\">HandleFunc</a>(<span id=\"pattern\">pattern</span> string, <span id=\"handler\">handler</span> <span class=\"key\">func</span>(<a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>)) {\n	DefaultServeMux.HandleFunc(pattern, handler)\n}</pre>\n	</div>\n</div>\n\n\n\n<h3 id=\"ListenAndServe\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1669\">ListenAndServe</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_ListenAndServe\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"ListenAndServe listens on the TCP network address addr\nand then calls Serve with handler to handle requests\non incoming connections.  Handler is typically nil,\nin which case the DefaultServeMux is used.\n\nA trivial example server is:\n\n	package main\n\n	import (\n		&#34;io&#34;\n		&#34;net/http&#34;\n		&#34;log&#34;\n	)\n\n	// hello world, the web server\n	func HelloServer(w http.ResponseWriter, req *http.Request) {\n		io.WriteString(w, &#34;hello, world!\\n&#34;)\n	}\n\n	func main() {\n		http.HandleFunc(&#34;/hello&#34;, HelloServer)\n		err := http.ListenAndServe(&#34;:12345&#34;, nil)\n		if err != nil {\n			log.Fatal(&#34;ListenAndServe: &#34;, err)\n		}\n	}\n\" href=\"#ListenAndServe\">ListenAndServe</a>(<span id=\"addr\">addr</span> string, <span id=\"handler\">handler</span> <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>) error</pre>\n<p>\nListenAndServe listens on the TCP network address addr\nand then calls Serve with handler to handle requests\non incoming connections.  Handler is typically nil,\nin which case the DefaultServeMux is used.\n</p>\n<p>\nA trivial example server is:\n</p>\n<pre>package main\n\nimport (\n	&#34;io&#34;\n	&#34;net/http&#34;\n	&#34;log&#34;\n)\n\n// hello world, the web server\nfunc HelloServer(w http.ResponseWriter, req *http.Request) {\n	io.WriteString(w, &#34;hello, world!\\n&#34;)\n}\n\nfunc main() {\n	http.HandleFunc(&#34;/hello&#34;, HelloServer)\n	err := http.ListenAndServe(&#34;:12345&#34;, nil)\n	if err != nil {\n		log.Fatal(&#34;ListenAndServe: &#34;, err)\n	}\n}\n</pre>\n\n<div class=\"accordion\">\n		<div id=\"collapse_ListenAndServe\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"ListenAndServe listens on the TCP network address addr\nand then calls Serve with handler to handle requests\non incoming connections.  Handler is typically nil,\nin which case the DefaultServeMux is used.\n\nA trivial example server is:\n\n	package main\n\n	import (\n		&#34;io&#34;\n		&#34;net/http&#34;\n		&#34;log&#34;\n	)\n\n	// hello world, the web server\n	func HelloServer(w http.ResponseWriter, req *http.Request) {\n		io.WriteString(w, &#34;hello, world!\\n&#34;)\n	}\n\n	func main() {\n		http.HandleFunc(&#34;/hello&#34;, HelloServer)\n		err := http.ListenAndServe(&#34;:12345&#34;, nil)\n		if err != nil {\n			log.Fatal(&#34;ListenAndServe: &#34;, err)\n		}\n	}\n\" href=\"#ListenAndServe\">ListenAndServe</a>(<span id=\"addr\">addr</span> string, <span id=\"handler\">handler</span> <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>) <span id=\"error\">error</span> {\n	<span id=\"server\">server</span> := &<a class=\"int\" title=\"A Server defines parameters for running an HTTP server.\n\" href=\"#Server\">Server</a>{Addr: addr, <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>: handler}\n	<span class=\"ret\">return</span> server.ListenAndServe()\n}</pre>\n	</div>\n</div>\n\n\n\n<h3 id=\"ListenAndServeTLS\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1702\">ListenAndServeTLS</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_ListenAndServeTLS\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"ListenAndServeTLS acts identically to ListenAndServe, except that it\nexpects HTTPS connections. Additionally, files containing a certificate and\nmatching private key for the server must be provided. If the certificate\nis signed by a certificate authority, the certFile should be the concatenation\nof the server&#39;s certificate followed by the CA&#39;s certificate.\n\nA trivial example server is:\n\n	import (\n		&#34;log&#34;\n		&#34;net/http&#34;\n	)\n\n	func handler(w http.ResponseWriter, req *http.Request) {\n		w.Header().Set(&#34;Content-Type&#34;, &#34;text/plain&#34;)\n		w.Write([]byte(&#34;This is an example server.\\n&#34;))\n	}\n\n	func main() {\n		http.HandleFunc(&#34;/&#34;, handler)\n		log.Printf(&#34;About to listen on 10443. Go to https://127.0.0.1:10443/&#34;)\n		err := http.ListenAndServeTLS(&#34;:10443&#34;, &#34;cert.pem&#34;, &#34;key.pem&#34;, nil)\n		if err != nil {\n			log.Fatal(err)\n		}\n	}\n\nOne can use generate_cert.go in crypto/tls to generate cert.pem and key.pem.\n\" href=\"#ListenAndServeTLS\">ListenAndServeTLS</a>(<span id=\"addr\">addr</span> string, <span id=\"certFile\">certFile</span> string, <span id=\"keyFile\">keyFile</span> string, <span id=\"handler\">handler</span> <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>) error</pre>\n<p>\nListenAndServeTLS acts identically to ListenAndServe, except that it\nexpects HTTPS connections. Additionally, files containing a certificate and\nmatching private key for the server must be provided. If the certificate\nis signed by a certificate authority, the certFile should be the concatenation\nof the server&#39;s certificate followed by the CA&#39;s certificate.\n</p>\n<p>\nA trivial example server is:\n</p>\n<pre>import (\n	&#34;log&#34;\n	&#34;net/http&#34;\n)\n\nfunc handler(w http.ResponseWriter, req *http.Request) {\n	w.Header().Set(&#34;Content-Type&#34;, &#34;text/plain&#34;)\n	w.Write([]byte(&#34;This is an example server.\\n&#34;))\n}\n\nfunc main() {\n	http.HandleFunc(&#34;/&#34;, handler)\n	log.Printf(&#34;About to listen on 10443. Go to <a href=\"https://127.0.0.1:10443/\">https://127.0.0.1:10443/</a>&#34;)\n	err := http.ListenAndServeTLS(&#34;:10443&#34;, &#34;cert.pem&#34;, &#34;key.pem&#34;, nil)\n	if err != nil {\n		log.Fatal(err)\n	}\n}\n</pre>\n<p>\nOne can use generate_cert.go in crypto/tls to generate cert.pem and key.pem.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_ListenAndServeTLS\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"ListenAndServeTLS acts identically to ListenAndServe, except that it\nexpects HTTPS connections. Additionally, files containing a certificate and\nmatching private key for the server must be provided. If the certificate\nis signed by a certificate authority, the certFile should be the concatenation\nof the server&#39;s certificate followed by the CA&#39;s certificate.\n\nA trivial example server is:\n\n	import (\n		&#34;log&#34;\n		&#34;net/http&#34;\n	)\n\n	func handler(w http.ResponseWriter, req *http.Request) {\n		w.Header().Set(&#34;Content-Type&#34;, &#34;text/plain&#34;)\n		w.Write([]byte(&#34;This is an example server.\\n&#34;))\n	}\n\n	func main() {\n		http.HandleFunc(&#34;/&#34;, handler)\n		log.Printf(&#34;About to listen on 10443. Go to https://127.0.0.1:10443/&#34;)\n		err := http.ListenAndServeTLS(&#34;:10443&#34;, &#34;cert.pem&#34;, &#34;key.pem&#34;, nil)\n		if err != nil {\n			log.Fatal(err)\n		}\n	}\n\nOne can use generate_cert.go in crypto/tls to generate cert.pem and key.pem.\n\" href=\"#ListenAndServeTLS\">ListenAndServeTLS</a>(<span id=\"addr\">addr</span> string, <span id=\"certFile\">certFile</span> string, <span id=\"keyFile\">keyFile</span> string, <span id=\"handler\">handler</span> <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>) <span id=\"error\">error</span> {\n	<span id=\"server\">server</span> := &<a class=\"int\" title=\"A Server defines parameters for running an HTTP server.\n\" href=\"#Server\">Server</a>{Addr: addr, <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>: handler}\n	<span class=\"ret\">return</span> server.ListenAndServeTLS(certFile, keyFile)\n}</pre>\n	</div>\n</div>\n\n\n\n<h3 id=\"MaxBytesReader\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#628\">MaxBytesReader</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_MaxBytesReader\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"MaxBytesReader is similar to io.LimitReader but is intended for\nlimiting the size of incoming request bodies. In contrast to\nio.LimitReader, MaxBytesReader&#39;s result is a ReadCloser, returns a\nnon-EOF error for a Read beyond the limit, and Closes the\nunderlying reader when its Close method is called.\n\nMaxBytesReader prevents clients from accidentally or maliciously\nsending a large request and wasting server resources.\n\" href=\"#MaxBytesReader\">MaxBytesReader</a>(w <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, r <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#ReadCloser\">io.ReadCloser</a>, n int64) <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#ReadCloser\">io.ReadCloser</a></pre>\n<p>\nMaxBytesReader is similar to io.LimitReader but is intended for\nlimiting the size of incoming request bodies. In contrast to\nio.LimitReader, MaxBytesReader&#39;s result is a ReadCloser, returns a\nnon-EOF error for a Read beyond the limit, and Closes the\nunderlying reader when its Close method is called.\n</p>\n<p>\nMaxBytesReader prevents clients from accidentally or maliciously\nsending a large request and wasting server resources.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_MaxBytesReader\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"MaxBytesReader is similar to io.LimitReader but is intended for\nlimiting the size of incoming request bodies. In contrast to\nio.LimitReader, MaxBytesReader&#39;s result is a ReadCloser, returns a\nnon-EOF error for a Read beyond the limit, and Closes the\nunderlying reader when its Close method is called.\n\nMaxBytesReader prevents clients from accidentally or maliciously\nsending a large request and wasting server resources.\n\" href=\"#MaxBytesReader\">MaxBytesReader</a>(w <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, r <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#ReadCloser\">io.ReadCloser</a>, n int64) <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#ReadCloser\">io.ReadCloser</a> {\n	<span class=\"ret\">return</span> &maxBytesReader{w: w, r: r, n: n}\n}</pre>\n	</div>\n</div>\n\n\n\n<h3 id=\"NotFound\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1232\">NotFound</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_NotFound\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"NotFound replies to the request with an HTTP 404 not found error.\n\" href=\"#NotFound\">NotFound</a>(w <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>)</pre>\n<p>\nNotFound replies to the request with an HTTP 404 not found error.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_NotFound\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"NotFound replies to the request with an HTTP 404 not found error.\n\" href=\"#NotFound\">NotFound</a>(w <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) {\n        <a class=\"int\" title=\"Error replies to the request with the specified error message and HTTP code.\nThe error message should be plain text.\n\" href=\"#Error\">Error</a>(w, <span class=\"str\">&#34;404 page not found&#34;</span>, StatusNotFound) \n}</pre>\n	</div>\n</div>\n\n\n\n<h3 id=\"ParseHTTPVersion\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#408\">ParseHTTPVersion</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_ParseHTTPVersion\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"ParseHTTPVersion parses a HTTP version string.\n&#34;HTTP/1.0&#34; returns (1, 0, true).\n\" href=\"#ParseHTTPVersion\">ParseHTTPVersion</a>(<span id=\"vers\">vers</span> string) (major, <span id=\"minor\">minor</span> int, <span id=\"ok\">ok</span> bool)</pre>\n<p>\nParseHTTPVersion parses a HTTP version string.\n&#34;HTTP/1.0&#34; returns (1, 0, true).\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_ParseHTTPVersion\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"ParseHTTPVersion parses a HTTP version string.\n&#34;HTTP/1.0&#34; returns (1, 0, true).\n\" href=\"#ParseHTTPVersion\">ParseHTTPVersion</a>(<span id=\"vers\">vers</span> string) (major, <span id=\"minor\">minor</span> int, <span id=\"ok\">ok</span> bool) {\n	<span class=\"key\">const</span> <span id=\"Big\">Big</span> = <span id=\"1000000\">1000000</span> <span class=\"com\">// arbitrary upper bound\n</span>	<span class=\"key\">switch</span> <span id=\"vers\">vers</span> {\n	<span class=\"key\">case</span> <span class=\"str\">&#34;HTTP/1.1&#34;</span>:\n		<span class=\"ret\">return</span> 1, 1, <span class=\"boo\">true</span>\n	<span class=\"key\">case</span> <span class=\"str\">&#34;HTTP/1.0&#34;</span>:\n		<span class=\"ret\">return</span> 1, 0, <span class=\"boo\">true</span>\n	}\n	<span class=\"key\">if</span> !<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strings#HasPrefix\">strings.HasPrefix</a>(vers, <span class=\"str\">&#34;HTTP/&#34;</span>) {\n		<span class=\"ret\">return</span> 0, 0, <span class=\"boo\">false</span>\n	}\n	<span id=\"dot\">dot</span> := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strings#Index\">strings.Index</a>(vers, <span class=\"str\">&#34;.&#34;</span>)\n	<span class=\"key\">if</span> <span id=\"dot\">dot</span> < 0 {\n		<span class=\"ret\">return</span> 0, 0, <span class=\"boo\">false</span>\n	}\n	major, <span id=\"err\">err</span> := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strconv#Atoi\">strconv.Atoi</a>(vers[5:dot])\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> || <span id=\"major\">major</span> < 0 || <span id=\"major\">major</span> > <span id=\"Big\">Big</span> {\n		<span class=\"ret\">return</span> 0, 0, <span class=\"boo\">false</span>\n	}\n	minor, <span id=\"err\">err</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strconv#Atoi\">strconv.Atoi</a>(vers[dot+1:])\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> || <span id=\"minor\">minor</span> < 0 || <span id=\"minor\">minor</span> > <span id=\"Big\">Big</span> {\n		<span class=\"ret\">return</span> 0, 0, <span class=\"boo\">false</span>\n	}\n	<span class=\"ret\">return</span> major, minor, <span class=\"boo\">true</span>\n}</pre>\n	</div>\n</div>\n\n\n\n<h3 id=\"ParseTime\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/header.go?r=#76\">ParseTime</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_ParseTime\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"ParseTime parses a time header (such as the Date: header),\ntrying each of the three formats allowed by HTTP/1.1:\nTimeFormat, time.RFC850, and time.ANSIC.\n\" href=\"#ParseTime\">ParseTime</a>(<span id=\"text\">text</span> string) (t <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/time#Time\">time.Time</a>, <span id=\"err\">err</span> error)</pre>\n<p>\nParseTime parses a time header (such as the Date: header),\ntrying each of the three formats allowed by HTTP/1.1:\nTimeFormat, time.RFC850, and time.ANSIC.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_ParseTime\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"ParseTime parses a time header (such as the Date: header),\ntrying each of the three formats allowed by HTTP/1.1:\nTimeFormat, time.RFC850, and time.ANSIC.\n\" href=\"#ParseTime\">ParseTime</a>(<span id=\"text\">text</span> string) (t <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/time#Time\">time.Time</a>, <span id=\"err\">err</span> error) {\n	<span class=\"key\">for</span> _, <span id=\"layout\">layout</span> := <span class=\"key\">range</span> <span id=\"timeFormats\">timeFormats</span> {\n		t, <span id=\"err\">err</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/time#Parse\">time.Parse</a>(layout, text)\n		<span class=\"key\">if</span> <span id=\"err\">err</span> == <span class=\"boo\">nil</span> {\n			<span class=\"ret\">return</span>\n		}\n	}\n	<span class=\"ret\">return</span>\n}</pre>\n	</div>\n</div>\n\n\n\n<h3 id=\"ProxyFromEnvironment\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/transport.go?r=#101\">ProxyFromEnvironment</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_ProxyFromEnvironment\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"ProxyFromEnvironment returns the URL of the proxy to use for a\ngiven request, as indicated by the environment variables\n$HTTP_PROXY and $NO_PROXY (or $http_proxy and $no_proxy).\nAn error is returned if the proxy environment is invalid.\nA nil URL and nil error are returned if no proxy is defined in the\nenvironment, or a proxy should not be used for the given request.\n\" href=\"#ProxyFromEnvironment\">ProxyFromEnvironment</a>(<span id=\"req\">req</span> *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) (*<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#URL\">url.URL</a>, error)</pre>\n<p>\nProxyFromEnvironment returns the URL of the proxy to use for a\ngiven request, as indicated by the environment variables\n$HTTP_PROXY and $NO_PROXY (or $http_proxy and $no_proxy).\nAn error is returned if the proxy environment is invalid.\nA nil URL and nil error are returned if no proxy is defined in the\nenvironment, or a proxy should not be used for the given request.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_ProxyFromEnvironment\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"ProxyFromEnvironment returns the URL of the proxy to use for a\ngiven request, as indicated by the environment variables\n$HTTP_PROXY and $NO_PROXY (or $http_proxy and $no_proxy).\nAn error is returned if the proxy environment is invalid.\nA nil URL and nil error are returned if no proxy is defined in the\nenvironment, or a proxy should not be used for the given request.\n\" href=\"#ProxyFromEnvironment\">ProxyFromEnvironment</a>(<span id=\"req\">req</span> *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) (*<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#URL\">url.URL</a>, error) {\n	<span id=\"proxy\">proxy</span> := getenvEitherCase(<span class=\"str\">&#34;HTTP_PROXY&#34;</span>)\n	<span class=\"key\">if</span> <span id=\"proxy\">proxy</span> == <span class=\"str\">&#34;&#34;</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, <span class=\"boo\">nil</span>\n	}\n	<span class=\"key\">if</span> !useProxy(canonicalAddr(req.URL)) {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, <span class=\"boo\">nil</span>\n	}\n	proxyURL, <span id=\"err\">err</span> := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#Parse\">url.Parse</a>(proxy)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> || !<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strings#HasPrefix\">strings.HasPrefix</a>(proxyURL.Scheme, <span class=\"str\">&#34;http&#34;</span>) {\n		<span class=\"com\">// proxy was bogus. Try prepending \"http://\" to it and\n</span>		<span class=\"com\">// see if that parses correctly. If not, we fall\n</span>		<span class=\"com\">// through and complain about the original one.\n</span>		<span class=\"key\">if</span> proxyURL, <span id=\"err\">err</span> := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#Parse\">url.Parse</a>(<span class=\"str\">&#34;http://&#34;</span> + proxy); <span id=\"err\">err</span> == <span class=\"boo\">nil</span> {\n			<span class=\"ret\">return</span> proxyURL, <span class=\"boo\">nil</span>\n		}\n	}\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/fmt#Errorf\">fmt.Errorf</a>(<span class=\"str\">&#34;invalid proxy address %q: %v&#34;</span>, proxy, err)\n	}\n	<span class=\"ret\">return</span> proxyURL, <span class=\"boo\">nil</span>\n}</pre>\n	</div>\n</div>\n\n\n\n<h3 id=\"ProxyURL\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/transport.go?r=#126\">ProxyURL</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_ProxyURL\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"ProxyURL returns a proxy function (for use in a Transport)\nthat always returns the same URL.\n\" href=\"#ProxyURL\">ProxyURL</a>(<span id=\"fixedURL\">fixedURL</span> *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#URL\">url.URL</a>) <span class=\"key\">func</span>(*<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) (*<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#URL\">url.URL</a>, error)</pre>\n<p>\nProxyURL returns a proxy function (for use in a Transport)\nthat always returns the same URL.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_ProxyURL\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"ProxyURL returns a proxy function (for use in a Transport)\nthat always returns the same URL.\n\" href=\"#ProxyURL\">ProxyURL</a>(<span id=\"fixedURL\">fixedURL</span> *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#URL\">url.URL</a>) <span class=\"key\">func</span>(*<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) (*<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#URL\">url.URL</a>, error) {\n	<span class=\"ret\">return</span> <span class=\"key\">func</span>(*<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) (*<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#URL\">url.URL</a>, error) {\n		<span class=\"ret\">return</span> fixedURL, <span class=\"boo\">nil</span>\n	}\n}</pre>\n	</div>\n</div>\n\n\n\n<h3 id=\"Redirect\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1259\">Redirect</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_Redirect\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"Redirect replies to the request with a redirect to url,\nwhich may be a path relative to the request path.\n\" href=\"#Redirect\">Redirect</a>(w <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>, <span id=\"urlStr\">urlStr</span> string, <span id=\"code\">code</span> int)</pre>\n<p>\nRedirect replies to the request with a redirect to url,\nwhich may be a path relative to the request path.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_Redirect\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"Redirect replies to the request with a redirect to url,\nwhich may be a path relative to the request path.\n\" href=\"#Redirect\">Redirect</a>(w <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>, <span id=\"urlStr\">urlStr</span> string, <span id=\"code\">code</span> int) {\n	<span class=\"key\">if</span> u, <span id=\"err\">err</span> := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#Parse\">url.Parse</a>(urlStr); <span id=\"err\">err</span> == <span class=\"boo\">nil</span> {\n		<span class=\"com\">// If url was relative, make absolute by\n</span>		<span class=\"com\">// combining with request path.\n</span>		<span class=\"com\">// The browser would probably do this for us,\n</span>		<span class=\"com\">// but doing it ourselves is more reliable.\n</span>\n		<span class=\"com\">// NOTE(rsc): RFC 2616 says that the Location\n</span>		<span class=\"com\">// line must be an absolute URI, like\n</span>		<span class=\"com\">// \"http://www.google.com/redirect/\",\n</span>		<span class=\"com\">// not a path like \"/redirect/\".\n</span>		<span class=\"com\">// Unfortunately, we don't know what to\n</span>		<span class=\"com\">// put in the host name section to get the\n</span>		<span class=\"com\">// client to connect to us again, so we can't\n</span>		<span class=\"com\">// know the right absolute URI to send back.\n</span>		<span class=\"com\">// Because of this problem, no one pays attention\n</span>		<span class=\"com\">// to the RFC; they all send back just a new path.\n</span>		<span class=\"com\">// So do we.\n</span>		<span id=\"oldpath\">oldpath</span> := r.URL.Path\n		<span class=\"key\">if</span> <span id=\"oldpath\">oldpath</span> == <span class=\"str\">&#34;&#34;</span> { <span class=\"com\">// should not happen, but avoid a crash if it does\n</span>			<span id=\"oldpath\">oldpath</span> = <span class=\"str\">&#34;/&#34;</span>\n		}\n		<span class=\"key\">if</span> <span id=\"u.Scheme\">u.Scheme</span> == <span class=\"str\">&#34;&#34;</span> {\n			<span class=\"com\">// no leading http://server\n</span>			<span class=\"key\">if</span> <span id=\"urlStr\">urlStr</span> == <span class=\"str\">&#34;&#34;</span> || urlStr[0] != <span class=\"str\">&#39;/&#39;</span> {\n				<span class=\"com\">// make relative path absolute\n</span>				olddir, _ := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/path#Split\">path.Split</a>(oldpath)\n				<span id=\"urlStr\">urlStr</span> = <span id=\"olddir\">olddir</span> + urlStr\n			}\n\n			<span class=\"key\">var</span> <span id=\"query\">query</span> string\n			<span class=\"key\">if</span> i := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strings#Index\">strings.Index</a>(urlStr, <span class=\"str\">&#34;?&#34;</span>); i != -1 {\n				urlStr, <span id=\"query\">query</span> = urlStr[:i], urlStr[i:]\n			}\n\n			<span class=\"com\">// clean up but preserve trailing slash\n</span>			<span id=\"trailing\">trailing</span> := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strings#HasSuffix\">strings.HasSuffix</a>(urlStr, <span class=\"str\">&#34;/&#34;</span>)\n			<span id=\"urlStr\">urlStr</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/path#Clean\">path.Clean</a>(urlStr)\n			<span class=\"key\">if</span> <span id=\"trailing\">trailing</span> && !<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strings#HasSuffix\">strings.HasSuffix</a>(urlStr, <span class=\"str\">&#34;/&#34;</span>) {\n				<span id=\"urlStr\">urlStr</span> += <span class=\"str\">&#34;/&#34;</span>\n			}\n			<span id=\"urlStr\">urlStr</span> += query\n		}\n	}\n\n	w.Header().Set(<span class=\"str\">&#34;Location&#34;</span>, urlStr)\n	w.WriteHeader(code)\n\n	<span class=\"com\">// RFC2616 recommends that a short note \"SHOULD\" be included in the\n</span>	<span class=\"com\">// response because older user agents may not understand 301/307.\n</span>	<span class=\"com\">// Shouldn't send the response for POST or HEAD; that leaves GET.\n</span>	<span class=\"key\">if</span> <span id=\"r.Method\">r.Method</span> == <span class=\"str\">&#34;GET&#34;</span> {\n		<span id=\"note\">note</span> := <span class=\"str\">&#34;&lt;a href=\\&#34;&#34;</span> + htmlEscape(urlStr) + <span class=\"str\">&#34;\\&#34;&gt;&#34;</span> + statusText[code] + <span class=\"str\">&#34;&lt;/a&gt;.\\n&#34;</span>\n		<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/fmt#Fprintln\">fmt.Fprintln</a>(w, note)\n	}\n}</pre>\n	</div>\n</div>\n\n\n\n<h3 id=\"Serve\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1553\">Serve</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_Serve\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"Serve accepts incoming HTTP connections on the listener l,\ncreating a new service goroutine for each.  The service goroutines\nread requests and then call handler to reply to them.\nHandler is typically nil, in which case the DefaultServeMux is used.\n\" href=\"#Serve\">Serve</a>(l <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net#Listener\">net.Listener</a>, <span id=\"handler\">handler</span> <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>) error</pre>\n<p>\nServe accepts incoming HTTP connections on the listener l,\ncreating a new service goroutine for each.  The service goroutines\nread requests and then call handler to reply to them.\nHandler is typically nil, in which case the DefaultServeMux is used.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_Serve\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"Serve accepts incoming HTTP connections on the listener l,\ncreating a new service goroutine for each.  The service goroutines\nread requests and then call handler to reply to them.\nHandler is typically nil, in which case the DefaultServeMux is used.\n\" href=\"#Serve\">Serve</a>(l <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net#Listener\">net.Listener</a>, <span id=\"handler\">handler</span> <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>) <span id=\"error\">error</span> {\n	<span id=\"srv\">srv</span> := &<a class=\"int\" title=\"A Server defines parameters for running an HTTP server.\n\" href=\"#Server\">Server</a>{<a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>: handler}\n	<span class=\"ret\">return</span> srv.Serve(l)\n}</pre>\n	</div>\n</div>\n\n\n\n<h3 id=\"ServeContent\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/fs.go?r=#107\">ServeContent</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_ServeContent\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"ServeContent replies to the request using the content in the\nprovided ReadSeeker.  The main benefit of ServeContent over io.Copy\nis that it handles Range requests properly, sets the MIME type, and\nhandles If-Modified-Since requests.\n\nIf the response&#39;s Content-Type header is not set, ServeContent\nfirst tries to deduce the type from name&#39;s file extension and,\nif that fails, falls back to reading the first block of the content\nand passing it to DetectContentType.\nThe name is otherwise unused; in particular it can be empty and is\nnever sent in the response.\n\nIf modtime is not the zero time, ServeContent includes it in a\nLast-Modified header in the response.  If the request includes an\nIf-Modified-Since header, ServeContent uses modtime to decide\nwhether the content needs to be sent at all.\n\nThe content&#39;s Seek method must work: ServeContent uses\na seek to the end of the content to determine its size.\n\nIf the caller has set w&#39;s ETag header, ServeContent uses it to\nhandle requests using If-Range and If-None-Match.\n\nNote that *os.File implements the io.ReadSeeker interface.\n\" href=\"#ServeContent\">ServeContent</a>(w <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, <span id=\"req\">req</span> *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>, <span id=\"name\">name</span> string, <span id=\"modtime\">modtime</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/time#Time\">time.Time</a>, <span id=\"content\">content</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#ReadSeeker\">io.ReadSeeker</a>)</pre>\n<p>\nServeContent replies to the request using the content in the\nprovided ReadSeeker.  The main benefit of ServeContent over io.Copy\nis that it handles Range requests properly, sets the MIME type, and\nhandles If-Modified-Since requests.\n</p>\n<p>\nIf the response&#39;s Content-Type header is not set, ServeContent\nfirst tries to deduce the type from name&#39;s file extension and,\nif that fails, falls back to reading the first block of the content\nand passing it to DetectContentType.\nThe name is otherwise unused; in particular it can be empty and is\nnever sent in the response.\n</p>\n<p>\nIf modtime is not the zero time, ServeContent includes it in a\nLast-Modified header in the response.  If the request includes an\nIf-Modified-Since header, ServeContent uses modtime to decide\nwhether the content needs to be sent at all.\n</p>\n<p>\nThe content&#39;s Seek method must work: ServeContent uses\na seek to the end of the content to determine its size.\n</p>\n<p>\nIf the caller has set w&#39;s ETag header, ServeContent uses it to\nhandle requests using If-Range and If-None-Match.\n</p>\n<p>\nNote that *os.File implements the io.ReadSeeker interface.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_ServeContent\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"ServeContent replies to the request using the content in the\nprovided ReadSeeker.  The main benefit of ServeContent over io.Copy\nis that it handles Range requests properly, sets the MIME type, and\nhandles If-Modified-Since requests.\n\nIf the response&#39;s Content-Type header is not set, ServeContent\nfirst tries to deduce the type from name&#39;s file extension and,\nif that fails, falls back to reading the first block of the content\nand passing it to DetectContentType.\nThe name is otherwise unused; in particular it can be empty and is\nnever sent in the response.\n\nIf modtime is not the zero time, ServeContent includes it in a\nLast-Modified header in the response.  If the request includes an\nIf-Modified-Since header, ServeContent uses modtime to decide\nwhether the content needs to be sent at all.\n\nThe content&#39;s Seek method must work: ServeContent uses\na seek to the end of the content to determine its size.\n\nIf the caller has set w&#39;s ETag header, ServeContent uses it to\nhandle requests using If-Range and If-None-Match.\n\nNote that *os.File implements the io.ReadSeeker interface.\n\" href=\"#ServeContent\">ServeContent</a>(w <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, <span id=\"req\">req</span> *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>, <span id=\"name\">name</span> string, <span id=\"modtime\">modtime</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/time#Time\">time.Time</a>, <span id=\"content\">content</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#ReadSeeker\">io.ReadSeeker</a>) {\n	<span id=\"sizeFunc\">sizeFunc</span> := <span class=\"key\">func</span>() (int64, error) {\n		size, <span id=\"err\">err</span> := content.Seek(0, <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/os#SEEK_END\">os.SEEK_END</a>)\n		<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n			<span class=\"ret\">return</span> 0, errSeeker\n		}\n		_, <span id=\"err\">err</span> = content.Seek(0, <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/os#SEEK_SET\">os.SEEK_SET</a>)\n		<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n			<span class=\"ret\">return</span> 0, errSeeker\n		}\n		<span class=\"ret\">return</span> size, <span class=\"boo\">nil</span>\n	}\n	serveContent(w, req, name, modtime, sizeFunc, content)\n}</pre>\n	</div>\n</div>\n\n\n\n<h3 id=\"ServeFile\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/fs.go?r=#410\">ServeFile</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_ServeFile\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"ServeFile replies to the request with the contents of the named file or directory.\n\" href=\"#ServeFile\">ServeFile</a>(w <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>, <span id=\"name\">name</span> string)</pre>\n<p>\nServeFile replies to the request with the contents of the named file or directory.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_ServeFile\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"ServeFile replies to the request with the contents of the named file or directory.\n\" href=\"#ServeFile\">ServeFile</a>(w <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>, <span id=\"name\">name</span> string) {\n	dir, <span id=\"file\">file</span> := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/path/filepath#Split\">filepath.Split</a>(name)\n	serveFile(w, r, <a class=\"int\" title=\"A Dir implements http.FileSystem using the native file\nsystem restricted to a specific directory tree.\n\nAn empty Dir is treated as &#34;.&#34;.\n\" href=\"#Dir\">Dir</a>(dir), file, <span class=\"boo\">false</span>)\n}</pre>\n	</div>\n</div>\n\n\n\n<h3 id=\"SetCookie\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/cookie.go?r=#135\">SetCookie</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_SetCookie\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"SetCookie adds a Set-Cookie header to the provided ResponseWriter&#39;s headers.\n\" href=\"#SetCookie\">SetCookie</a>(w <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, <span id=\"cookie\">cookie</span> *<a class=\"int\" title=\"A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an\nHTTP response or the Cookie header of an HTTP request.\n\" href=\"#Cookie\">Cookie</a>)</pre>\n<p>\nSetCookie adds a Set-Cookie header to the provided ResponseWriter&#39;s headers.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_SetCookie\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"SetCookie adds a Set-Cookie header to the provided ResponseWriter&#39;s headers.\n\" href=\"#SetCookie\">SetCookie</a>(w <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, <span id=\"cookie\">cookie</span> *<a class=\"int\" title=\"A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an\nHTTP response or the Cookie header of an HTTP request.\n\" href=\"#Cookie\">Cookie</a>) {\n	w.Header().Add(<span class=\"str\">&#34;Set-Cookie&#34;</span>, cookie.String())\n}</pre>\n	</div>\n</div>\n\n\n\n<h3 id=\"StatusText\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/status.go?r=#118\">StatusText</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapse_StatusText\">View Code</a>\n	</small>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">func</span> <a class=\"int\" title=\"StatusText returns a text for the HTTP status code. It returns the empty\nstring if the code is unknown.\n\" href=\"#StatusText\">StatusText</a>(<span id=\"code\">code</span> int) string</pre>\n<p>\nStatusText returns a text for the HTTP status code. It returns the empty\nstring if the code is unknown.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_StatusText\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"StatusText returns a text for the HTTP status code. It returns the empty\nstring if the code is unknown.\n\" href=\"#StatusText\">StatusText</a>(<span id=\"code\">code</span> int) <span id=\"string\">string</span> {\n	<span class=\"ret\">return</span> statusText[code]\n}</pre>\n	</div>\n</div>\n\n\n\n<b></b>\n\n\n\n\n<h3 id=\"Client\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/client.go?r=#32\">Client</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"A Client is an HTTP client. Its zero value (DefaultClient) is a\nusable client that uses DefaultTransport.\n\nThe Client&#39;s Transport typically has internal state (cached TCP\nconnections), so Clients should be reused instead of created as\nneeded. Clients are safe for concurrent use by multiple goroutines.\n\nA Client is higher-level than a RoundTripper (such as Transport)\nand additionally handles HTTP details such as cookies and\nredirects.\n\" href=\"#Client\">Client</a> <span class=\"key\">struct</span> {\n    <span class=\"com\">// Transport specifies the mechanism by which individual\n</span>    <span class=\"com\">// HTTP requests are made.\n</span>    <span class=\"com\">// If nil, DefaultTransport is used.\n</span>    <a class=\"int\" title=\"Transport is an implementation of RoundTripper that supports http,\nhttps, and http proxies (for either http or https with CONNECT).\nTransport can also cache connections for future re-use.\n\" href=\"#Transport\">Transport</a> <a class=\"int\" title=\"RoundTripper is an interface representing the ability to execute a\nsingle HTTP transaction, obtaining the Response for a given Request.\n\nA RoundTripper must be safe for concurrent use by multiple\ngoroutines.\n\" href=\"#RoundTripper\">RoundTripper</a>\n\n    <span class=\"com\">// CheckRedirect specifies the policy for handling redirects.\n</span>    <span class=\"com\">// If CheckRedirect is not nil, the client calls it before\n</span>    <span class=\"com\">// following an HTTP redirect. The arguments req and via are\n</span>    <span class=\"com\">// the upcoming request and the requests made already, oldest\n</span>    <span class=\"com\">// first. If CheckRedirect returns an error, the Client's Get\n</span>    <span class=\"com\">// method returns both the previous Response and\n</span>    <span class=\"com\">// CheckRedirect's error (wrapped in a url.Error) instead of\n</span>    <span class=\"com\">// issuing the Request req.\n</span>    <span class=\"com\">//\n</span>    <span class=\"com\">// If CheckRedirect is nil, the Client uses its default policy,\n</span>    <span class=\"com\">// which is to stop after 10 consecutive requests.\n</span>    <span id=\"CheckRedirect\">CheckRedirect</span> <span class=\"key\">func</span>(<span id=\"req\">req</span> *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>, <span id=\"via\">via</span> []*<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) error\n\n    <span class=\"com\">// Jar specifies the cookie jar.\n</span>    <span class=\"com\">// If Jar is nil, cookies are not sent in requests and ignored\n</span>    <span class=\"com\">// in responses.\n</span>    <span id=\"Jar\">Jar</span> <a class=\"int\" title=\"A CookieJar manages storage and use of cookies in HTTP requests.\n\nImplementations of CookieJar must be safe for concurrent use by multiple\ngoroutines.\n\nThe net/http/cookiejar package provides a CookieJar implementation.\n\" href=\"#CookieJar\">CookieJar</a>\n}</pre>\n<p>\nA Client is an HTTP client. Its zero value (DefaultClient) is a\nusable client that uses DefaultTransport.\n</p>\n<p>\nThe Client&#39;s Transport typically has internal state (cached TCP\nconnections), so Clients should be reused instead of created as\nneeded. Clients are safe for concurrent use by multiple goroutines.\n</p>\n<p>\nA Client is higher-level than a RoundTripper (such as Transport)\nand additionally handles HTTP details such as cookies and\nredirects.\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n\n\n<h4 id=\"Client_Do\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/client.go?r=#127\">Do</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Client_Do\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"A Client is an HTTP client. Its zero value (DefaultClient) is a\nusable client that uses DefaultTransport.\n\nThe Client&#39;s Transport typically has internal state (cached TCP\nconnections), so Clients should be reused instead of created as\nneeded. Clients are safe for concurrent use by multiple goroutines.\n\nA Client is higher-level than a RoundTripper (such as Transport)\nand additionally handles HTTP details such as cookies and\nredirects.\n\" href=\"#Client\">Client</a>) Do(<span id=\"req\">req</span> *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error)</pre>\n<p>\nDo sends an HTTP request and returns an HTTP response, following\npolicy (e.g. redirects, cookies, auth) as configured on the client.\n</p>\n<p>\nAn error is returned if caused by client policy (such as\nCheckRedirect), or if there was an HTTP protocol error.\nA non-2xx response doesn&#39;t cause an error.\n</p>\n<p>\nWhen err is nil, resp always contains a non-nil resp.Body.\n</p>\n<p>\nCallers should close resp.Body when done reading from it. If\nresp.Body is not closed, the Client&#39;s underlying RoundTripper\n(typically Transport) may not be able to re-use a persistent TCP\nconnection to the server for a subsequent &#34;keep-alive&#34; request.\n</p>\n<p>\nGenerally Get, Post, or PostForm will be used instead of Do.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Client_Do\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"A Client is an HTTP client. Its zero value (DefaultClient) is a\nusable client that uses DefaultTransport.\n\nThe Client&#39;s Transport typically has internal state (cached TCP\nconnections), so Clients should be reused instead of created as\nneeded. Clients are safe for concurrent use by multiple goroutines.\n\nA Client is higher-level than a RoundTripper (such as Transport)\nand additionally handles HTTP details such as cookies and\nredirects.\n\" href=\"#Client\">Client</a>) Do(<span id=\"req\">req</span> *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error) {\n	<span class=\"key\">if</span> <span id=\"req.Method\">req.Method</span> == <span class=\"str\">&#34;GET&#34;</span> || <span id=\"req.Method\">req.Method</span> == <span class=\"str\">&#34;HEAD&#34;</span> {\n		<span class=\"ret\">return</span> c.doFollowingRedirects(req, shouldRedirectGet)\n	}\n	<span class=\"key\">if</span> <span id=\"req.Method\">req.Method</span> == <span class=\"str\">&#34;POST&#34;</span> || <span id=\"req.Method\">req.Method</span> == <span class=\"str\">&#34;PUT&#34;</span> {\n		<span class=\"ret\">return</span> c.doFollowingRedirects(req, shouldRedirectPost)\n	}\n	<span class=\"ret\">return</span> c.send(req)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Client_Get\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/client.go?r=#243\">Get</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Client_Get\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"A Client is an HTTP client. Its zero value (DefaultClient) is a\nusable client that uses DefaultTransport.\n\nThe Client&#39;s Transport typically has internal state (cached TCP\nconnections), so Clients should be reused instead of created as\nneeded. Clients are safe for concurrent use by multiple goroutines.\n\nA Client is higher-level than a RoundTripper (such as Transport)\nand additionally handles HTTP details such as cookies and\nredirects.\n\" href=\"#Client\">Client</a>) <a class=\"int\" title=\"Get issues a GET to the specified URL.  If the response is one of the following\nredirect codes, Get follows the redirect, up to a maximum of 10 redirects:\n\n   301 (Moved Permanently)\n   302 (Found)\n   303 (See Other)\n   307 (Temporary Redirect)\n\nAn error is returned if there were too many redirects or if there\nwas an HTTP protocol error. A non-2xx response doesn&#39;t cause an\nerror.\n\nWhen err is nil, resp always contains a non-nil resp.Body.\nCaller should close resp.Body when done reading from it.\n\nGet is a wrapper around DefaultClient.Get.\n\" href=\"#Get\">Get</a>(<span id=\"url\">url</span> string) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error)</pre>\n<p>\nGet issues a GET to the specified URL.  If the response is one of the\nfollowing redirect codes, Get follows the redirect after calling the\nClient&#39;s CheckRedirect function.\n</p>\n<pre>301 (Moved Permanently)\n302 (Found)\n303 (See Other)\n307 (Temporary Redirect)\n</pre>\n<p>\nAn error is returned if the Client&#39;s CheckRedirect function fails\nor if there was an HTTP protocol error. A non-2xx response doesn&#39;t\ncause an error.\n</p>\n<p>\nWhen err is nil, resp always contains a non-nil resp.Body.\nCaller should close resp.Body when done reading from it.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Client_Get\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"A Client is an HTTP client. Its zero value (DefaultClient) is a\nusable client that uses DefaultTransport.\n\nThe Client&#39;s Transport typically has internal state (cached TCP\nconnections), so Clients should be reused instead of created as\nneeded. Clients are safe for concurrent use by multiple goroutines.\n\nA Client is higher-level than a RoundTripper (such as Transport)\nand additionally handles HTTP details such as cookies and\nredirects.\n\" href=\"#Client\">Client</a>) <a class=\"int\" title=\"Get issues a GET to the specified URL.  If the response is one of the following\nredirect codes, Get follows the redirect, up to a maximum of 10 redirects:\n\n   301 (Moved Permanently)\n   302 (Found)\n   303 (See Other)\n   307 (Temporary Redirect)\n\nAn error is returned if there were too many redirects or if there\nwas an HTTP protocol error. A non-2xx response doesn&#39;t cause an\nerror.\n\nWhen err is nil, resp always contains a non-nil resp.Body.\nCaller should close resp.Body when done reading from it.\n\nGet is a wrapper around DefaultClient.Get.\n\" href=\"#Get\">Get</a>(<span id=\"url\">url</span> string) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error) {\n	req, <span id=\"err\">err</span> := <a class=\"int\" title=\"NewRequest returns a new Request given a method, URL, and optional body.\n\nIf the provided body is also an io.Closer, the returned\nRequest.Body is set to body and will be closed by the Client\nmethods Do, Post, and PostForm, and Transport.RoundTrip.\n\" href=\"#NewRequest\">NewRequest</a>(<span class=\"str\">&#34;GET&#34;</span>, url, <span class=\"boo\">nil</span>)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, err\n	}\n	<span class=\"ret\">return</span> c.doFollowingRedirects(req, shouldRedirectGet)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Client_Head\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/client.go?r=#404\">Head</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Client_Head\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"A Client is an HTTP client. Its zero value (DefaultClient) is a\nusable client that uses DefaultTransport.\n\nThe Client&#39;s Transport typically has internal state (cached TCP\nconnections), so Clients should be reused instead of created as\nneeded. Clients are safe for concurrent use by multiple goroutines.\n\nA Client is higher-level than a RoundTripper (such as Transport)\nand additionally handles HTTP details such as cookies and\nredirects.\n\" href=\"#Client\">Client</a>) <a class=\"int\" title=\"Head issues a HEAD to the specified URL.  If the response is one of the\nfollowing redirect codes, Head follows the redirect after calling the\nClient&#39;s CheckRedirect function.\n\n   301 (Moved Permanently)\n   302 (Found)\n   303 (See Other)\n   307 (Temporary Redirect)\n\nHead is a wrapper around DefaultClient.Head\n\" href=\"#Head\">Head</a>(<span id=\"url\">url</span> string) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error)</pre>\n<p>\nHead issues a HEAD to the specified URL.  If the response is one of the\nfollowing redirect codes, Head follows the redirect after calling the\nClient&#39;s CheckRedirect function.\n</p>\n<pre>301 (Moved Permanently)\n302 (Found)\n303 (See Other)\n307 (Temporary Redirect)\n</pre>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Client_Head\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"A Client is an HTTP client. Its zero value (DefaultClient) is a\nusable client that uses DefaultTransport.\n\nThe Client&#39;s Transport typically has internal state (cached TCP\nconnections), so Clients should be reused instead of created as\nneeded. Clients are safe for concurrent use by multiple goroutines.\n\nA Client is higher-level than a RoundTripper (such as Transport)\nand additionally handles HTTP details such as cookies and\nredirects.\n\" href=\"#Client\">Client</a>) <a class=\"int\" title=\"Head issues a HEAD to the specified URL.  If the response is one of the\nfollowing redirect codes, Head follows the redirect after calling the\nClient&#39;s CheckRedirect function.\n\n   301 (Moved Permanently)\n   302 (Found)\n   303 (See Other)\n   307 (Temporary Redirect)\n\nHead is a wrapper around DefaultClient.Head\n\" href=\"#Head\">Head</a>(<span id=\"url\">url</span> string) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error) {\n	req, <span id=\"err\">err</span> := <a class=\"int\" title=\"NewRequest returns a new Request given a method, URL, and optional body.\n\nIf the provided body is also an io.Closer, the returned\nRequest.Body is set to body and will be closed by the Client\nmethods Do, Post, and PostForm, and Transport.RoundTrip.\n\" href=\"#NewRequest\">NewRequest</a>(<span class=\"str\">&#34;HEAD&#34;</span>, url, <span class=\"boo\">nil</span>)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, err\n	}\n	<span class=\"ret\">return</span> c.doFollowingRedirects(req, shouldRedirectGet)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Client_Post\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/client.go?r=#353\">Post</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Client_Post\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"A Client is an HTTP client. Its zero value (DefaultClient) is a\nusable client that uses DefaultTransport.\n\nThe Client&#39;s Transport typically has internal state (cached TCP\nconnections), so Clients should be reused instead of created as\nneeded. Clients are safe for concurrent use by multiple goroutines.\n\nA Client is higher-level than a RoundTripper (such as Transport)\nand additionally handles HTTP details such as cookies and\nredirects.\n\" href=\"#Client\">Client</a>) <a class=\"int\" title=\"Post issues a POST to the specified URL.\n\nCaller should close resp.Body when done reading from it.\n\nPost is a wrapper around DefaultClient.Post\n\" href=\"#Post\">Post</a>(<span id=\"url\">url</span> string, <span id=\"bodyType\">bodyType</span> string, <span id=\"body\">body</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#Reader\">io.Reader</a>) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error)</pre>\n<p>\nPost issues a POST to the specified URL.\n</p>\n<p>\nCaller should close resp.Body when done reading from it.\n</p>\n<p>\nIf the provided body is also an io.Closer, it is closed after the\nbody is successfully written to the server.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Client_Post\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"A Client is an HTTP client. Its zero value (DefaultClient) is a\nusable client that uses DefaultTransport.\n\nThe Client&#39;s Transport typically has internal state (cached TCP\nconnections), so Clients should be reused instead of created as\nneeded. Clients are safe for concurrent use by multiple goroutines.\n\nA Client is higher-level than a RoundTripper (such as Transport)\nand additionally handles HTTP details such as cookies and\nredirects.\n\" href=\"#Client\">Client</a>) <a class=\"int\" title=\"Post issues a POST to the specified URL.\n\nCaller should close resp.Body when done reading from it.\n\nPost is a wrapper around DefaultClient.Post\n\" href=\"#Post\">Post</a>(<span id=\"url\">url</span> string, <span id=\"bodyType\">bodyType</span> string, <span id=\"body\">body</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#Reader\">io.Reader</a>) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error) {\n	req, <span id=\"err\">err</span> := <a class=\"int\" title=\"NewRequest returns a new Request given a method, URL, and optional body.\n\nIf the provided body is also an io.Closer, the returned\nRequest.Body is set to body and will be closed by the Client\nmethods Do, Post, and PostForm, and Transport.RoundTrip.\n\" href=\"#NewRequest\">NewRequest</a>(<span class=\"str\">&#34;POST&#34;</span>, url, body)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, err\n	}\n	req.Header.Set(<span class=\"str\">&#34;Content-Type&#34;</span>, bodyType)\n	<span class=\"ret\">return</span> c.doFollowingRedirects(req, shouldRedirectPost)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Client_PostForm\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/client.go?r=#378\">PostForm</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Client_PostForm\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"A Client is an HTTP client. Its zero value (DefaultClient) is a\nusable client that uses DefaultTransport.\n\nThe Client&#39;s Transport typically has internal state (cached TCP\nconnections), so Clients should be reused instead of created as\nneeded. Clients are safe for concurrent use by multiple goroutines.\n\nA Client is higher-level than a RoundTripper (such as Transport)\nand additionally handles HTTP details such as cookies and\nredirects.\n\" href=\"#Client\">Client</a>) <a class=\"int\" title=\"PostForm issues a POST to the specified URL, with data&#39;s keys and\nvalues URL-encoded as the request body.\n\nWhen err is nil, resp always contains a non-nil resp.Body.\nCaller should close resp.Body when done reading from it.\n\nPostForm is a wrapper around DefaultClient.PostForm\n\" href=\"#PostForm\">PostForm</a>(<span id=\"url\">url</span> string, <span id=\"data\">data</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#Values\">url.Values</a>) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error)</pre>\n<p>\nPostForm issues a POST to the specified URL,\nwith data&#39;s keys and values urlencoded as the request body.\n</p>\n<p>\nWhen err is nil, resp always contains a non-nil resp.Body.\nCaller should close resp.Body when done reading from it.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Client_PostForm\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"A Client is an HTTP client. Its zero value (DefaultClient) is a\nusable client that uses DefaultTransport.\n\nThe Client&#39;s Transport typically has internal state (cached TCP\nconnections), so Clients should be reused instead of created as\nneeded. Clients are safe for concurrent use by multiple goroutines.\n\nA Client is higher-level than a RoundTripper (such as Transport)\nand additionally handles HTTP details such as cookies and\nredirects.\n\" href=\"#Client\">Client</a>) <a class=\"int\" title=\"PostForm issues a POST to the specified URL, with data&#39;s keys and\nvalues URL-encoded as the request body.\n\nWhen err is nil, resp always contains a non-nil resp.Body.\nCaller should close resp.Body when done reading from it.\n\nPostForm is a wrapper around DefaultClient.PostForm\n\" href=\"#PostForm\">PostForm</a>(<span id=\"url\">url</span> string, <span id=\"data\">data</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#Values\">url.Values</a>) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error) {\n	<span class=\"ret\">return</span> c.Post(url, <span class=\"str\">&#34;application/x-www-form-urlencoded&#34;</span>, <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strings#NewReader\">strings.NewReader</a>(data.Encode()))\n}</pre>\n	</div>\n	</div>\n\n\n\n<b></b>\n\n\n<h3 id=\"CloseNotifier\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#99\">CloseNotifier</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"The CloseNotifier interface is implemented by ResponseWriters which\nallow detecting when the underlying connection has gone away.\n\nThis mechanism can be used to cancel long operations on the server\nif the client has disconnected before the response is ready.\n\" href=\"#CloseNotifier\">CloseNotifier</a> <span id=\"interface\">interface</span> {\n    <span class=\"com\">// CloseNotify returns a channel that receives a single value\n</span>    <span class=\"com\">// when the client connection has gone away.\n</span>    CloseNotify() <-<span id=\"chan\">chan</span> bool\n}</pre>\n<p>\nThe CloseNotifier interface is implemented by ResponseWriters which\nallow detecting when the underlying connection has gone away.\n</p>\n<p>\nThis mechanism can be used to cancel long operations on the server\nif the client has disconnected before the response is ready.\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n<h3 id=\"Cookie\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/cookie.go?r=#23\">Cookie</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an\nHTTP response or the Cookie header of an HTTP request.\n\" href=\"#Cookie\">Cookie</a> <span class=\"key\">struct</span> {\n    <span id=\"Name\">Name</span>       string\n    <span id=\"Value\">Value</span>      string\n    <span id=\"Path\">Path</span>       string\n    <span id=\"Domain\">Domain</span>     string\n    <span id=\"Expires\">Expires</span>    <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/time#Time\">time.Time</a>\n    <span id=\"RawExpires\">RawExpires</span> string\n\n    <span class=\"com\">// MaxAge=0 means no 'Max-Age' attribute specified.\n</span>    <span class=\"com\">// MaxAge<0 means delete cookie now, equivalently 'Max-Age: 0'\n</span>    <span class=\"com\">// MaxAge>0 means Max-Age attribute present and given in seconds\n</span>    <span id=\"MaxAge\">MaxAge</span>   int\n    <span id=\"Secure\">Secure</span>   bool\n    <span id=\"HttpOnly\">HttpOnly</span> bool\n    <span id=\"Raw\">Raw</span>      string\n    <span id=\"Unparsed\">Unparsed</span> []<span id=\"string\">string</span> <span class=\"com\">// Raw text of unparsed attribute-value pairs\n</span>}</pre>\n<p>\nA Cookie represents an HTTP cookie as sent in the Set-Cookie header of an\nHTTP response or the Cookie header of an HTTP request.\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n\n\n<h4 id=\"Cookie_String\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/cookie.go?r=#142\">String</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Cookie_String\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (c *<a class=\"int\" title=\"A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an\nHTTP response or the Cookie header of an HTTP request.\n\" href=\"#Cookie\">Cookie</a>) String() string</pre>\n<p>\nString returns the serialization of the cookie for use in a Cookie\nheader (if only Name and Value are set) or a Set-Cookie response\nheader (if other fields are set).\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Cookie_String\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (c *<a class=\"int\" title=\"A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an\nHTTP response or the Cookie header of an HTTP request.\n\" href=\"#Cookie\">Cookie</a>) String() <span id=\"string\">string</span> {\n	<span class=\"key\">var</span> b <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/bytes#Buffer\">bytes.Buffer</a>\n	<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/fmt#Fprintf\">fmt.Fprintf</a>(&b, <span class=\"str\">&#34;%s=%s&#34;</span>, sanitizeCookieName(c.Name), sanitizeCookieValue(c.Value))\n	<span class=\"key\">if</span> <span class=\"bui\">len</span>(c.Path) > 0 {\n		<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/fmt#Fprintf\">fmt.Fprintf</a>(&b, <span class=\"str\">&#34;; Path=%s&#34;</span>, sanitizeCookiePath(c.Path))\n	}\n	<span class=\"key\">if</span> <span class=\"bui\">len</span>(c.Domain) > 0 {\n		<span class=\"key\">if</span> validCookieDomain(c.Domain) {\n			<span class=\"com\">// A c.Domain containing illegal characters is not\n</span>			<span class=\"com\">// sanitized but simply dropped which turns the cookie\n</span>			<span class=\"com\">// into a host-only cookie. A leading dot is okay\n</span>			<span class=\"com\">// but won't be sent.\n</span>			d := c.Domain\n			<span class=\"key\">if</span> d[0] == <span class=\"str\">&#39;.&#39;</span> {\n				d = d[1:]\n			}\n			<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/fmt#Fprintf\">fmt.Fprintf</a>(&b, <span class=\"str\">&#34;; Domain=%s&#34;</span>, d)\n		} <span class=\"key\">else</span> {\n			<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/log#Printf\">log.Printf</a>(<span class=\"str\">&#34;net/http: invalid Cookie.Domain %q; dropping domain attribute&#34;</span>,\n				c.Domain)\n		}\n	}\n	<span class=\"key\">if</span> c.Expires.Unix() > 0 {\n		<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/fmt#Fprintf\">fmt.Fprintf</a>(&b, <span class=\"str\">&#34;; Expires=%s&#34;</span>, c.Expires.UTC().Format(<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/time#RFC1123\">time.RFC1123</a>))\n	}\n	<span class=\"key\">if</span> <span id=\"c.MaxAge\">c.MaxAge</span> > 0 {\n		<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/fmt#Fprintf\">fmt.Fprintf</a>(&b, <span class=\"str\">&#34;; Max-Age=%d&#34;</span>, c.MaxAge)\n	} <span class=\"key\">else</span> <span class=\"key\">if</span> <span id=\"c.MaxAge\">c.MaxAge</span> < 0 {\n		<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/fmt#Fprintf\">fmt.Fprintf</a>(&b, <span class=\"str\">&#34;; Max-Age=0&#34;</span>)\n	}\n	<span class=\"key\">if</span> <span id=\"c.HttpOnly\">c.HttpOnly</span> {\n		<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/fmt#Fprintf\">fmt.Fprintf</a>(&b, <span class=\"str\">&#34;; HttpOnly&#34;</span>)\n	}\n	<span class=\"key\">if</span> <span id=\"c.Secure\">c.Secure</span> {\n		<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/fmt#Fprintf\">fmt.Fprintf</a>(&b, <span class=\"str\">&#34;; Secure&#34;</span>)\n	}\n	<span class=\"ret\">return</span> b.String()\n}</pre>\n	</div>\n	</div>\n\n\n\n<b></b>\n\n\n<h3 id=\"CookieJar\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/jar.go?r=#17\">CookieJar</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"A CookieJar manages storage and use of cookies in HTTP requests.\n\nImplementations of CookieJar must be safe for concurrent use by multiple\ngoroutines.\n\nThe net/http/cookiejar package provides a CookieJar implementation.\n\" href=\"#CookieJar\">CookieJar</a> <span id=\"interface\">interface</span> {\n    <span class=\"com\">// SetCookies handles the receipt of the cookies in a reply for the\n</span>    <span class=\"com\">// given URL.  It may or may not choose to save the cookies, depending\n</span>    <span class=\"com\">// on the jar's policy and implementation.\n</span>    SetCookies(u *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#URL\">url.URL</a>, <span id=\"cookies\">cookies</span> []*<a class=\"int\" title=\"A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an\nHTTP response or the Cookie header of an HTTP request.\n\" href=\"#Cookie\">Cookie</a>)\n\n    <span class=\"com\">// Cookies returns the cookies to send in a request for the given URL.\n</span>    <span class=\"com\">// It is up to the implementation to honor the standard cookie use\n</span>    <span class=\"com\">// restrictions such as in RFC 6265.\n</span>    Cookies(u *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#URL\">url.URL</a>) []*<a class=\"int\" title=\"A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an\nHTTP response or the Cookie header of an HTTP request.\n\" href=\"#Cookie\">Cookie</a>\n}</pre>\n<p>\nA CookieJar manages storage and use of cookies in HTTP requests.\n</p>\n<p>\nImplementations of CookieJar must be safe for concurrent use by multiple\ngoroutines.\n</p>\n<p>\nThe net/http/cookiejar package provides a CookieJar implementation.\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n<h3 id=\"Dir\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/fs.go?r=#28\">Dir</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"A Dir implements http.FileSystem using the native file\nsystem restricted to a specific directory tree.\n\nAn empty Dir is treated as &#34;.&#34;.\n\" href=\"#Dir\">Dir</a> string</pre>\n<p>\nA Dir implements http.FileSystem using the native file\nsystem restricted to a specific directory tree.\n</p>\n<p>\nAn empty Dir is treated as &#34;.&#34;.\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n\n\n<h4 id=\"Dir_Open\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/fs.go?r=#30\">Open</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Dir_Open\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (d <a class=\"int\" title=\"A Dir implements http.FileSystem using the native file\nsystem restricted to a specific directory tree.\n\nAn empty Dir is treated as &#34;.&#34;.\n\" href=\"#Dir\">Dir</a>) Open(<span id=\"name\">name</span> string) (<a class=\"int\" title=\"A File is returned by a FileSystem&#39;s Open method and can be\nserved by the FileServer implementation.\n\" href=\"#File\">File</a>, error)</pre>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Dir_Open\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (d <a class=\"int\" title=\"A Dir implements http.FileSystem using the native file\nsystem restricted to a specific directory tree.\n\nAn empty Dir is treated as &#34;.&#34;.\n\" href=\"#Dir\">Dir</a>) Open(<span id=\"name\">name</span> string) (<a class=\"int\" title=\"A File is returned by a FileSystem&#39;s Open method and can be\nserved by the FileServer implementation.\n\" href=\"#File\">File</a>, error) {\n	<span class=\"key\">if</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/path/filepath#Separator\">filepath.Separator</a> != <span class=\"str\">&#39;/&#39;</span> && <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strings#IndexRune\">strings.IndexRune</a>(name, <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/path/filepath#Separator\">filepath.Separator</a>) >= 0 ||\n		<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strings#Contains\">strings.Contains</a>(name, <span class=\"str\">&#34;\\x00&#34;</span>) {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/errors#New\">errors.New</a>(<span class=\"str\">&#34;http: invalid character in file path&#34;</span>)\n	}\n	<span id=\"dir\">dir</span> := string(d)\n	<span class=\"key\">if</span> <span id=\"dir\">dir</span> == <span class=\"str\">&#34;&#34;</span> {\n		<span id=\"dir\">dir</span> = <span class=\"str\">&#34;.&#34;</span>\n	}\n	f, <span id=\"err\">err</span> := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/os#Open\">os.Open</a>(<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/path/filepath#Join\">filepath.Join</a>(dir, <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/path/filepath#FromSlash\">filepath.FromSlash</a>(<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/path#Clean\">path.Clean</a>(<span class=\"str\">&#34;/&#34;</span>+name))))\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, err\n	}\n	<span class=\"ret\">return</span> f, <span class=\"boo\">nil</span>\n}</pre>\n	</div>\n	</div>\n\n\n\n<b></b>\n\n\n<h3 id=\"File\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/fs.go?r=#55\">File</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"A File is returned by a FileSystem&#39;s Open method and can be\nserved by the FileServer implementation.\n\" href=\"#File\">File</a> <span id=\"interface\">interface</span> {\n    Close() error\n    Stat() (<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/os#FileInfo\">os.FileInfo</a>, error)\n    Readdir(<span id=\"count\">count</span> int) ([]<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/os#FileInfo\">os.FileInfo</a>, error)\n    Read([]byte) (int, error)\n    Seek(<span id=\"offset\">offset</span> int64, <span id=\"whence\">whence</span> int) (int64, error)\n}</pre>\n<p>\nA File is returned by a FileSystem&#39;s Open method and can be\nserved by the FileServer implementation.\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n<h3 id=\"FileSystem\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/fs.go?r=#49\">FileSystem</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"A FileSystem implements access to a collection of named files.\nThe elements in a file path are separated by slash (&#39;/&#39;, U+002F)\ncharacters, regardless of host operating system convention.\n\" href=\"#FileSystem\">FileSystem</a> <span id=\"interface\">interface</span> {\n    Open(<span id=\"name\">name</span> string) (<a class=\"int\" title=\"A File is returned by a FileSystem&#39;s Open method and can be\nserved by the FileServer implementation.\n\" href=\"#File\">File</a>, error)\n}</pre>\n<p>\nA FileSystem implements access to a collection of named files.\nThe elements in a file path are separated by slash (&#39;/&#39;, U+002F)\ncharacters, regardless of host operating system convention.\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n<h3 id=\"Flusher\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#78\">Flusher</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"The Flusher interface is implemented by ResponseWriters that allow\nan HTTP handler to flush buffered data to the client.\n\nNote that even for ResponseWriters that support Flush,\nif the client is connected through an HTTP proxy,\nthe buffered data may not reach the client until the response\ncompletes.\n\" href=\"#Flusher\">Flusher</a> <span id=\"interface\">interface</span> {\n    <span class=\"com\">// Flush sends any buffered data to the client.\n</span>    Flush()\n}</pre>\n<p>\nThe Flusher interface is implemented by ResponseWriters that allow\nan HTTP handler to flush buffered data to the client.\n</p>\n<p>\nNote that even for ResponseWriters that support Flush,\nif the client is connected through an HTTP proxy,\nthe buffered data may not reach the client until the response\ncompletes.\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n<h3 id=\"Handler\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#44\">Handler</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a> <span id=\"interface\">interface</span> {\n    ServeHTTP(<a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>)\n}</pre>\n<p>\nObjects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n</p>\n<p>\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<h4 id=\"FileServer\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/fs.go?r=#426\">FileServer</a>\n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_FileServer\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> <a class=\"int\" title=\"FileServer returns a handler that serves HTTP requests\nwith the contents of the file system rooted at root.\n\nTo use the operating system&#39;s file system implementation,\nuse http.Dir:\n\n    http.Handle(&#34;/&#34;, http.FileServer(http.Dir(&#34;/tmp&#34;)))\n\" href=\"#FileServer\">FileServer</a>(<span id=\"root\">root</span> <a class=\"int\" title=\"A FileSystem implements access to a collection of named files.\nThe elements in a file path are separated by slash (&#39;/&#39;, U+002F)\ncharacters, regardless of host operating system convention.\n\" href=\"#FileSystem\">FileSystem</a>) <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a></pre>\n<p>\nFileServer returns a handler that serves HTTP requests\nwith the contents of the file system rooted at root.\n</p>\n<p>\nTo use the operating system&#39;s file system implementation,\nuse http.Dir:\n</p>\n<pre>http.Handle(&#34;/&#34;, http.FileServer(http.Dir(&#34;/tmp&#34;)))\n</pre>\n\n<div class=\"accordion\">\n		<div id=\"collapse_FileServer\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"FileServer returns a handler that serves HTTP requests\nwith the contents of the file system rooted at root.\n\nTo use the operating system&#39;s file system implementation,\nuse http.Dir:\n\n    http.Handle(&#34;/&#34;, http.FileServer(http.Dir(&#34;/tmp&#34;)))\n\" href=\"#FileServer\">FileServer</a>(<span id=\"root\">root</span> <a class=\"int\" title=\"A FileSystem implements access to a collection of named files.\nThe elements in a file path are separated by slash (&#39;/&#39;, U+002F)\ncharacters, regardless of host operating system convention.\n\" href=\"#FileSystem\">FileSystem</a>) <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a> {\n	<span class=\"ret\">return</span> &fileHandler{root}\n}</pre>\n	</div>\n</div>\n\n\n\n\n<div class=\"accordion\">\n	<div class=\"accordion-group\">\n		<div class=\"accordion-heading\">\n			<a id=\"_ex_btn_FileServer\" class=\"accordion-toggle collapsed\" data-toggle=\"collapse\" href=\"#_ex_FileServer\">Example(FileServer)</a>\n		</div>\n\n		<div id=\"_ex_FileServer\" class=\"accordion-body collapse\">\n			<div class=\"accordion-inner\">\n			<p>Code:</p>\n			<pre class=\"pre-x-scrollable\">\n<span class=\"com\">// Simple static webserver:\n</span><a class=\"ext\" title=\"\" target=\"_blank\" href=\"/log#Fatal\">log.Fatal</a>(<a class=\"ext\" title=\"\" href=\"#ListenAndServe\">http.ListenAndServe</a>(<span class=\"str\">&#34;:8080&#34;</span>, <a class=\"ext\" title=\"\" href=\"#FileServer\">http.FileServer</a>(<a class=\"ext\" title=\"\" href=\"#Dir\">http.Dir</a>(<span class=\"str\">&#34;/usr/share/doc&#34;</span>))))\n</pre>\n			\n			</div>\n		</div>\n	</div>\n</div>\n\n\n\n<div class=\"accordion\">\n	<div class=\"accordion-group\">\n		<div class=\"accordion-heading\">\n			<a id=\"_ex_btn_FileServer_stripPrefix\" class=\"accordion-toggle collapsed\" data-toggle=\"collapse\" href=\"#_ex_FileServer_stripPrefix\">Example(FileServer_stripPrefix)</a>\n		</div>\n\n		<div id=\"_ex_FileServer_stripPrefix\" class=\"accordion-body collapse\">\n			<div class=\"accordion-inner\">\n			<p>Code:</p>\n			<pre class=\"pre-x-scrollable\">\n<span class=\"com\">// To serve a directory on disk (/tmp) under an alternate URL\n</span><span class=\"com\">// path (/tmpfiles/), use StripPrefix to modify the request\n</span><span class=\"com\">// URL's path before the FileServer sees it:\n</span><a class=\"ext\" title=\"\" href=\"#Handle\">http.Handle</a>(<span class=\"str\">&#34;/tmpfiles/&#34;</span>, <a class=\"ext\" title=\"\" href=\"#StripPrefix\">http.StripPrefix</a>(<span class=\"str\">&#34;/tmpfiles/&#34;</span>, <a class=\"ext\" title=\"\" href=\"#FileServer\">http.FileServer</a>(<a class=\"ext\" title=\"\" href=\"#Dir\">http.Dir</a>(<span class=\"str\">&#34;/tmp&#34;</span>))))\n</pre>\n			\n			</div>\n		</div>\n	</div>\n</div>\n\n\n\n\n<h4 id=\"NotFoundHandler\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1236\">NotFoundHandler</a>\n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_NotFoundHandler\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> <a class=\"int\" title=\"NotFoundHandler returns a simple request handler\nthat replies to each request with a ``404 page not found&#39;&#39; reply.\n\" href=\"#NotFoundHandler\">NotFoundHandler</a>() <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a></pre>\n<p>\nNotFoundHandler returns a simple request handler\nthat replies to each request with a &ldquo;404 page not found&rdquo; reply.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_NotFoundHandler\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"NotFoundHandler returns a simple request handler\nthat replies to each request with a ``404 page not found&#39;&#39; reply.\n\" href=\"#NotFoundHandler\">NotFoundHandler</a>() <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a> {\n        <span class=\"ret\">return</span> <a class=\"int\" title=\"The HandlerFunc type is an adapter to allow the use of\nordinary functions as HTTP handlers.  If f is a function\nwith the appropriate signature, HandlerFunc(f) is a\nHandler object that calls f.\n\" href=\"#HandlerFunc\">HandlerFunc</a>(<a class=\"int\" title=\"NotFound replies to the request with an HTTP 404 not found error.\n\" href=\"#NotFound\">NotFound</a>) \n}</pre>\n	</div>\n</div>\n\n\n\n<h4 id=\"RedirectHandler\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1343\">RedirectHandler</a>\n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_RedirectHandler\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> <a class=\"int\" title=\"RedirectHandler returns a request handler that redirects\neach request it receives to the given url using the given\nstatus code.\n\" href=\"#RedirectHandler\">RedirectHandler</a>(<span id=\"url\">url</span> string, <span id=\"code\">code</span> int) <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a></pre>\n<p>\nRedirectHandler returns a request handler that redirects\neach request it receives to the given url using the given\nstatus code.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_RedirectHandler\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"RedirectHandler returns a request handler that redirects\neach request it receives to the given url using the given\nstatus code.\n\" href=\"#RedirectHandler\">RedirectHandler</a>(<span id=\"url\">url</span> string, <span id=\"code\">code</span> int) <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a> {\n	<span class=\"ret\">return</span> &redirectHandler{url, code}\n}</pre>\n	</div>\n</div>\n\n\n\n<h4 id=\"StripPrefix\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1243\">StripPrefix</a>\n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_StripPrefix\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> <a class=\"int\" title=\"StripPrefix returns a handler that serves HTTP requests\nby removing the given prefix from the request URL&#39;s Path\nand invoking the handler h. StripPrefix handles a\nrequest for a path that doesn&#39;t begin with prefix by\nreplying with an HTTP 404 not found error.\n\" href=\"#StripPrefix\">StripPrefix</a>(<span id=\"prefix\">prefix</span> string, h <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>) <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a></pre>\n<p>\nStripPrefix returns a handler that serves HTTP requests\nby removing the given prefix from the request URL&#39;s Path\nand invoking the handler h. StripPrefix handles a\nrequest for a path that doesn&#39;t begin with prefix by\nreplying with an HTTP 404 not found error.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_StripPrefix\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"StripPrefix returns a handler that serves HTTP requests\nby removing the given prefix from the request URL&#39;s Path\nand invoking the handler h. StripPrefix handles a\nrequest for a path that doesn&#39;t begin with prefix by\nreplying with an HTTP 404 not found error.\n\" href=\"#StripPrefix\">StripPrefix</a>(<span id=\"prefix\">prefix</span> string, h <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>) <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a> {\n	<span class=\"key\">if</span> <span id=\"prefix\">prefix</span> == <span class=\"str\">&#34;&#34;</span> {\n		<span class=\"ret\">return</span> h\n	}\n	<span class=\"ret\">return</span> <a class=\"int\" title=\"The HandlerFunc type is an adapter to allow the use of\nordinary functions as HTTP handlers.  If f is a function\nwith the appropriate signature, HandlerFunc(f) is a\nHandler object that calls f.\n\" href=\"#HandlerFunc\">HandlerFunc</a>(<span class=\"key\">func</span>(w <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) {\n		<span class=\"key\">if</span> p := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strings#TrimPrefix\">strings.TrimPrefix</a>(r.URL.Path, prefix); <span class=\"bui\">len</span>(p) < <span class=\"bui\">len</span>(r.URL.Path) {\n			<span id=\"r.URL.Path\">r.URL.Path</span> = p\n			h.ServeHTTP(w, r)\n		} <span class=\"key\">else</span> {\n			<a class=\"int\" title=\"NotFound replies to the request with an HTTP 404 not found error.\n\" href=\"#NotFound\">NotFound</a>(w, r)\n		}\n	})\n}</pre>\n	</div>\n</div>\n\n\n\n\n<div class=\"accordion\">\n	<div class=\"accordion-group\">\n		<div class=\"accordion-heading\">\n			<a id=\"_ex_btn_StripPrefix\" class=\"accordion-toggle collapsed\" data-toggle=\"collapse\" href=\"#_ex_StripPrefix\">Example(StripPrefix)</a>\n		</div>\n\n		<div id=\"_ex_StripPrefix\" class=\"accordion-body collapse\">\n			<div class=\"accordion-inner\">\n			<p>Code:</p>\n			<pre class=\"pre-x-scrollable\">\n<span class=\"com\">// To serve a directory on disk (/tmp) under an alternate URL\n</span><span class=\"com\">// path (/tmpfiles/), use StripPrefix to modify the request\n</span><span class=\"com\">// URL's path before the FileServer sees it:\n</span><a class=\"ext\" title=\"\" href=\"#Handle\">http.Handle</a>(<span class=\"str\">&#34;/tmpfiles/&#34;</span>, <a class=\"ext\" title=\"\" href=\"#StripPrefix\">http.StripPrefix</a>(<span class=\"str\">&#34;/tmpfiles/&#34;</span>, <a class=\"ext\" title=\"\" href=\"#FileServer\">http.FileServer</a>(<a class=\"ext\" title=\"\" href=\"#Dir\">http.Dir</a>(<span class=\"str\">&#34;/tmp&#34;</span>))))\n</pre>\n			\n			</div>\n		</div>\n	</div>\n</div>\n\n\n\n\n<h4 id=\"TimeoutHandler\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1753\">TimeoutHandler</a>\n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_TimeoutHandler\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> <a class=\"int\" title=\"TimeoutHandler returns a Handler that runs h with the given time limit.\n\nThe new Handler calls h.ServeHTTP to handle each request, but if a\ncall runs for longer than its time limit, the handler responds with\na 503 Service Unavailable error and the given message in its body.\n(If msg is empty, a suitable default message will be sent.)\nAfter such a timeout, writes by h to its ResponseWriter will return\nErrHandlerTimeout.\n\" href=\"#TimeoutHandler\">TimeoutHandler</a>(h <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>, <span id=\"dt\">dt</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/time#Duration\">time.Duration</a>, <span id=\"msg\">msg</span> string) <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a></pre>\n<p>\nTimeoutHandler returns a Handler that runs h with the given time limit.\n</p>\n<p>\nThe new Handler calls h.ServeHTTP to handle each request, but if a\ncall runs for longer than its time limit, the handler responds with\na 503 Service Unavailable error and the given message in its body.\n(If msg is empty, a suitable default message will be sent.)\nAfter such a timeout, writes by h to its ResponseWriter will return\nErrHandlerTimeout.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_TimeoutHandler\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"TimeoutHandler returns a Handler that runs h with the given time limit.\n\nThe new Handler calls h.ServeHTTP to handle each request, but if a\ncall runs for longer than its time limit, the handler responds with\na 503 Service Unavailable error and the given message in its body.\n(If msg is empty, a suitable default message will be sent.)\nAfter such a timeout, writes by h to its ResponseWriter will return\nErrHandlerTimeout.\n\" href=\"#TimeoutHandler\">TimeoutHandler</a>(h <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>, <span id=\"dt\">dt</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/time#Duration\">time.Duration</a>, <span id=\"msg\">msg</span> string) <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a> {\n	f := <span class=\"key\">func</span>() <-<span id=\"chan\">chan</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/time#Time\">time.Time</a> {\n		<span class=\"ret\">return</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/time#After\">time.After</a>(dt)\n	}\n	<span class=\"ret\">return</span> &timeoutHandler{h, f, msg}\n}</pre>\n	</div>\n</div>\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n<h3 id=\"HandlerFunc\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1214\">HandlerFunc</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"The HandlerFunc type is an adapter to allow the use of\nordinary functions as HTTP handlers.  If f is a function\nwith the appropriate signature, HandlerFunc(f) is a\nHandler object that calls f.\n\" href=\"#HandlerFunc\">HandlerFunc</a> <span class=\"key\">func</span>(<a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>)</pre>\n<p>\nThe HandlerFunc type is an adapter to allow the use of\nordinary functions as HTTP handlers.  If f is a function\nwith the appropriate signature, HandlerFunc(f) is a\nHandler object that calls f.\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n\n\n<h4 id=\"HandlerFunc_ServeHTTP\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1217\">ServeHTTP</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_HandlerFunc_ServeHTTP\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (f <a class=\"int\" title=\"The HandlerFunc type is an adapter to allow the use of\nordinary functions as HTTP handlers.  If f is a function\nwith the appropriate signature, HandlerFunc(f) is a\nHandler object that calls f.\n\" href=\"#HandlerFunc\">HandlerFunc</a>) ServeHTTP(w <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>)</pre>\n<p>\nServeHTTP calls f(w, r).\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_HandlerFunc_ServeHTTP\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (f <a class=\"int\" title=\"The HandlerFunc type is an adapter to allow the use of\nordinary functions as HTTP handlers.  If f is a function\nwith the appropriate signature, HandlerFunc(f) is a\nHandler object that calls f.\n\" href=\"#HandlerFunc\">HandlerFunc</a>) ServeHTTP(w <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) {\n	f(w, r)\n}</pre>\n	</div>\n	</div>\n\n\n\n<b></b>\n\n\n<h3 id=\"Header\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/header.go?r=#16\">Header</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a> map[string][]string</pre>\n<p>\nA Header represents the key-value pairs in an HTTP header.\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n\n\n<h4 id=\"Header_Add\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/header.go?r=#20\">Add</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Header_Add\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (h <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>) Add(key, <span id=\"value\">value</span> string)</pre>\n<p>\nAdd adds the key, value pair to the header.\nIt appends to any existing values associated with key.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Header_Add\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (h <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>) Add(key, <span id=\"value\">value</span> string) {\n	<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/textproto#MIMEHeader\">textproto.MIMEHeader</a>(h).Add(key, value)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Header_Del\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/header.go?r=#48\">Del</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Header_Del\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (h <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>) Del(<span id=\"key\">key</span> string)</pre>\n<p>\nDel deletes the values associated with key.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Header_Del\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (h <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>) Del(<span id=\"key\">key</span> string) {\n	<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/textproto#MIMEHeader\">textproto.MIMEHeader</a>(h).Del(key)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Header_Get\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/header.go?r=#35\">Get</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Header_Get\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (h <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>) <a class=\"int\" title=\"Get issues a GET to the specified URL.  If the response is one of the following\nredirect codes, Get follows the redirect, up to a maximum of 10 redirects:\n\n   301 (Moved Permanently)\n   302 (Found)\n   303 (See Other)\n   307 (Temporary Redirect)\n\nAn error is returned if there were too many redirects or if there\nwas an HTTP protocol error. A non-2xx response doesn&#39;t cause an\nerror.\n\nWhen err is nil, resp always contains a non-nil resp.Body.\nCaller should close resp.Body when done reading from it.\n\nGet is a wrapper around DefaultClient.Get.\n\" href=\"#Get\">Get</a>(<span id=\"key\">key</span> string) string</pre>\n<p>\nGet gets the first value associated with the given key.\nIf there are no values associated with the key, Get returns &#34;&#34;.\nTo access multiple values of a key, access the map directly\nwith CanonicalHeaderKey.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Header_Get\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (h <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>) <a class=\"int\" title=\"Get issues a GET to the specified URL.  If the response is one of the following\nredirect codes, Get follows the redirect, up to a maximum of 10 redirects:\n\n   301 (Moved Permanently)\n   302 (Found)\n   303 (See Other)\n   307 (Temporary Redirect)\n\nAn error is returned if there were too many redirects or if there\nwas an HTTP protocol error. A non-2xx response doesn&#39;t cause an\nerror.\n\nWhen err is nil, resp always contains a non-nil resp.Body.\nCaller should close resp.Body when done reading from it.\n\nGet is a wrapper around DefaultClient.Get.\n\" href=\"#Get\">Get</a>(<span id=\"key\">key</span> string) <span id=\"string\">string</span> {\n	<span class=\"ret\">return</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/textproto#MIMEHeader\">textproto.MIMEHeader</a>(h).Get(key)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Header_Set\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/header.go?r=#27\">Set</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Header_Set\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (h <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>) Set(key, <span id=\"value\">value</span> string)</pre>\n<p>\nSet sets the header entries associated with key to\nthe single element value.  It replaces any existing\nvalues associated with key.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Header_Set\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (h <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>) Set(key, <span id=\"value\">value</span> string) {\n	<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/textproto#MIMEHeader\">textproto.MIMEHeader</a>(h).Set(key, value)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Header_Write\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/header.go?r=#53\">Write</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Header_Write\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (h <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>) Write(w <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#Writer\">io.Writer</a>) error</pre>\n<p>\nWrite writes a header in wire format.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Header_Write\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (h <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>) Write(w <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#Writer\">io.Writer</a>) <span id=\"error\">error</span> {\n	<span class=\"ret\">return</span> h.WriteSubset(w, <span class=\"boo\">nil</span>)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Header_WriteSubset\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/header.go?r=#145\">WriteSubset</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Header_WriteSubset\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (h <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>) WriteSubset(w <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#Writer\">io.Writer</a>, <span id=\"exclude\">exclude</span> map[string]bool) error</pre>\n<p>\nWriteSubset writes a header in wire format.\nIf exclude is not nil, keys where exclude[key] == true are not written.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Header_WriteSubset\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (h <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>) WriteSubset(w <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#Writer\">io.Writer</a>, <span id=\"exclude\">exclude</span> map[string]bool) <span id=\"error\">error</span> {\n	ws, <span id=\"ok\">ok</span> := w.(writeStringer)\n	<span class=\"key\">if</span> !<span id=\"ok\">ok</span> {\n		<span id=\"ws\">ws</span> = stringWriter{w}\n	}\n	kvs, <span id=\"sorter\">sorter</span> := h.sortedKeyValues(exclude)\n	<span class=\"key\">for</span> _, <span id=\"kv\">kv</span> := <span class=\"key\">range</span> <span id=\"kvs\">kvs</span> {\n		<span class=\"key\">for</span> _, v := <span class=\"key\">range</span> <span id=\"kv.values\">kv.values</span> {\n			v = headerNewlineToSpace.Replace(v)\n			v = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/textproto#TrimString\">textproto.TrimString</a>(v)\n			<span class=\"key\">for</span> _, s := <span class=\"key\">range</span> []string{kv.key, <span class=\"str\">&#34;: &#34;</span>, v, <span class=\"str\">&#34;\\r\\n&#34;</span>} {\n				<span class=\"key\">if</span> _, <span id=\"err\">err</span> := ws.WriteString(s); <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n					<span class=\"ret\">return</span> err\n				}\n			}\n		}\n	}\n	<span class=\"key\">select</span> {\n	<span class=\"key\">case</span> <span id=\"headerSorterCache\">headerSorterCache</span> <- sorter:\n	<span class=\"key\">default</span>:\n	}\n	<span class=\"ret\">return</span> <span class=\"boo\">nil</span>\n}</pre>\n	</div>\n	</div>\n\n\n\n<b></b>\n\n\n<h3 id=\"Hijacker\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#85\">Hijacker</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"The Hijacker interface is implemented by ResponseWriters that allow\nan HTTP handler to take over the connection.\n\" href=\"#Hijacker\">Hijacker</a> <span id=\"interface\">interface</span> {\n    <span class=\"com\">// Hijack lets the caller take over the connection.\n</span>    <span class=\"com\">// After a call to Hijack(), the HTTP server library\n</span>    <span class=\"com\">// will not do anything else with the connection.\n</span>    <span class=\"com\">// It becomes the caller's responsibility to manage\n</span>    <span class=\"com\">// and close the connection.\n</span>    Hijack() (<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net#Conn\">net.Conn</a>, *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/bufio#ReadWriter\">bufio.ReadWriter</a>, error)\n}</pre>\n<p>\nThe Hijacker interface is implemented by ResponseWriters that allow\nan HTTP handler to take over the connection.\n</p>\n\n\n\n\n\n<div class=\"accordion\">\n	<div class=\"accordion-group\">\n		<div class=\"accordion-heading\">\n			<a id=\"_ex_btn_Hijacker\" class=\"accordion-toggle collapsed\" data-toggle=\"collapse\" href=\"#_ex_Hijacker\">Example(Hijacker)</a>\n		</div>\n\n		<div id=\"_ex_Hijacker\" class=\"accordion-body collapse\">\n			<div class=\"accordion-inner\">\n			<p>Code:</p>\n			<pre class=\"pre-x-scrollable\">\n<a class=\"ext\" title=\"\" href=\"#HandleFunc\">http.HandleFunc</a>(<span class=\"str\">&#34;/hijack&#34;</span>, <span class=\"key\">func</span>(w <a class=\"ext\" title=\"\" href=\"#ResponseWriter\">http.ResponseWriter</a>, r *<a class=\"ext\" title=\"\" href=\"#Request\">http.Request</a>) {\n    hj, <span id=\"ok\">ok</span> := w.(<a class=\"ext\" title=\"\" href=\"#Hijacker\">http.Hijacker</a>)\n    <span class=\"key\">if</span> !<span id=\"ok\">ok</span> {\n        <a class=\"ext\" title=\"\" href=\"#Error\">http.Error</a>(w, <span class=\"str\">&#34;webserver doesn&#39;t support hijacking&#34;</span>, <a class=\"ext\" title=\"\" href=\"#StatusInternalServerError\">http.StatusInternalServerError</a>)\n        <span class=\"ret\">return</span>\n    }\n    conn, bufrw, <span id=\"err\">err</span> := hj.Hijack()\n    <span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n        <a class=\"ext\" title=\"\" href=\"#Error\">http.Error</a>(w, err.Error(), <a class=\"ext\" title=\"\" href=\"#StatusInternalServerError\">http.StatusInternalServerError</a>)\n        <span class=\"ret\">return</span>\n    }\n    <span class=\"com\">// Don't forget to close the connection:\n</span>    <span class=\"bui\">defer</span> conn.Close()\n    bufrw.WriteString(<span class=\"str\">&#34;Now we&#39;re speaking raw TCP. Say hi: &#34;</span>)\n    bufrw.Flush()\n    s, <span id=\"err\">err</span> := bufrw.ReadString(<span class=\"str\">&#39;\\n&#39;</span>)\n    <span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n        <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/log#Printf\">log.Printf</a>(<span class=\"str\">&#34;error reading string: %v&#34;</span>, err)\n        <span class=\"ret\">return</span>\n    }\n    <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/fmt#Fprintf\">fmt.Fprintf</a>(bufrw, <span class=\"str\">&#34;You said: %q\\nBye.\\n&#34;</span>, s)\n    bufrw.Flush()\n})\n</pre>\n			\n			</div>\n		</div>\n	</div>\n</div>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n<h3 id=\"ProtocolError\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#37\">ProtocolError</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"HTTP request parsing errors.\n\" href=\"#ProtocolError\">ProtocolError</a> <span class=\"key\">struct</span> {\n    <span id=\"ErrorString\">ErrorString</span> string\n}</pre>\n<p>\nHTTP request parsing errors.\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n\n\n<h4 id=\"ProtocolError_Error\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#41\">Error</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ProtocolError_Error\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (<span id=\"err\">err</span> *<a class=\"int\" title=\"HTTP request parsing errors.\n\" href=\"#ProtocolError\">ProtocolError</a>) <a class=\"int\" title=\"Error replies to the request with the specified error message and HTTP code.\nThe error message should be plain text.\n\" href=\"#Error\">Error</a>() string</pre>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ProtocolError_Error\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (<span id=\"err\">err</span> *<a class=\"int\" title=\"HTTP request parsing errors.\n\" href=\"#ProtocolError\">ProtocolError</a>) <a class=\"int\" title=\"Error replies to the request with the specified error message and HTTP code.\nThe error message should be plain text.\n\" href=\"#Error\">Error</a>() <span id=\"string\">string</span> {\n        <span class=\"ret\">return</span> <span id=\"err.ErrorString\">err.ErrorString</span> \n}</pre>\n	</div>\n	</div>\n\n\n\n<b></b>\n\n\n<h3 id=\"Request\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#71\">Request</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a> <span class=\"key\">struct</span> {\n    <span id=\"Method\">Method</span> <span id=\"string\">string</span> <span class=\"com\">// GET, POST, PUT, etc.\n</span>\n    <span class=\"com\">// URL is created from the URI supplied on the Request-Line\n</span>    <span class=\"com\">// as stored in RequestURI.\n</span>    <span class=\"com\">//\n</span>    <span class=\"com\">// For most requests, fields other than Path and RawQuery\n</span>    <span class=\"com\">// will be empty. (See RFC 2616, Section 5.1.2)\n</span>    <span id=\"URL\">URL</span> *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#URL\">url.URL</a>\n\n    <span class=\"com\">// The protocol version for incoming requests.\n</span>    <span class=\"com\">// Outgoing requests always use HTTP/1.1.\n</span>    <span id=\"Proto\">Proto</span>      <span id=\"string\">string</span> <span class=\"com\">// \"HTTP/1.0\"\n</span>    <span id=\"ProtoMajor\">ProtoMajor</span> <span id=\"int\">int</span>    <span class=\"com\">// 1\n</span>    <span id=\"ProtoMinor\">ProtoMinor</span> <span id=\"int\">int</span>    <span class=\"com\">// 0\n</span>\n    <span class=\"com\">// A header maps request lines to their values.\n</span>    <span class=\"com\">// If the header says\n</span>    <span class=\"com\">//\n</span>    <span class=\"com\">//	accept-encoding: gzip, deflate\n</span>    <span class=\"com\">//	Accept-Language: en-us\n</span>    <span class=\"com\">//	Connection: keep-alive\n</span>    <span class=\"com\">//\n</span>    <span class=\"com\">// then\n</span>    <span class=\"com\">//\n</span>    <span class=\"com\">//	Header = map[string][]string{\n</span>    <span class=\"com\">//		\"Accept-Encoding\": {\"gzip, deflate\"},\n</span>    <span class=\"com\">//		\"Accept-Language\": {\"en-us\"},\n</span>    <span class=\"com\">//		\"Connection\": {\"keep-alive\"},\n</span>    <span class=\"com\">//	}\n</span>    <span class=\"com\">//\n</span>    <span class=\"com\">// HTTP defines that header names are case-insensitive.\n</span>    <span class=\"com\">// The request parser implements this by canonicalizing the\n</span>    <span class=\"com\">// name, making the first character and any characters\n</span>    <span class=\"com\">// following a hyphen uppercase and the rest lowercase.\n</span>    <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a> <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>\n\n    <span class=\"com\">// Body is the request's body.\n</span>    <span class=\"com\">//\n</span>    <span class=\"com\">// For client requests, a nil body means the request has no\n</span>    <span class=\"com\">// body, such as a GET request. The HTTP Client's Transport\n</span>    <span class=\"com\">// is responsible for calling the Close method.\n</span>    <span class=\"com\">//\n</span>    <span class=\"com\">// For server requests, the Request Body is always non-nil\n</span>    <span class=\"com\">// but will return EOF immediately when no body is present.\n</span>    <span class=\"com\">// The Server will close the request body. The ServeHTTP\n</span>    <span class=\"com\">// Handler does not need to.\n</span>    <span id=\"Body\">Body</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#ReadCloser\">io.ReadCloser</a>\n\n    <span class=\"com\">// ContentLength records the length of the associated content.\n</span>    <span class=\"com\">// The value -1 indicates that the length is unknown.\n</span>    <span class=\"com\">// Values >= 0 indicate that the given number of bytes may\n</span>    <span class=\"com\">// be read from Body.\n</span>    <span class=\"com\">// For outgoing requests, a value of 0 means unknown if Body is not nil.\n</span>    <span id=\"ContentLength\">ContentLength</span> int64\n\n    <span class=\"com\">// TransferEncoding lists the transfer encodings from outermost to\n</span>    <span class=\"com\">// innermost. An empty list denotes the \"identity\" encoding.\n</span>    <span class=\"com\">// TransferEncoding can usually be ignored; chunked encoding is\n</span>    <span class=\"com\">// automatically added and removed as necessary when sending and\n</span>    <span class=\"com\">// receiving requests.\n</span>    <span id=\"TransferEncoding\">TransferEncoding</span> []string\n\n    <span class=\"com\">// Close indicates whether to close the connection after\n</span>    <span class=\"com\">// replying to this request.\n</span>    <span id=\"Close\">Close</span> bool\n\n    <span class=\"com\">// The host on which the URL is sought.\n</span>    <span class=\"com\">// Per RFC 2616, this is either the value of the Host: header\n</span>    <span class=\"com\">// or the host name given in the URL itself.\n</span>    <span class=\"com\">// It may be of the form \"host:port\".\n</span>    <span id=\"Host\">Host</span> string\n\n    <span class=\"com\">// Form contains the parsed form data, including both the URL\n</span>    <span class=\"com\">// field's query parameters and the POST or PUT form data.\n</span>    <span class=\"com\">// This field is only available after ParseForm is called.\n</span>    <span class=\"com\">// The HTTP client ignores Form and uses Body instead.\n</span>    <span id=\"Form\">Form</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#Values\">url.Values</a>\n\n    <span class=\"com\">// PostForm contains the parsed form data from POST or PUT\n</span>    <span class=\"com\">// body parameters.\n</span>    <span class=\"com\">// This field is only available after ParseForm is called.\n</span>    <span class=\"com\">// The HTTP client ignores PostForm and uses Body instead.\n</span>    <a class=\"int\" title=\"PostForm issues a POST to the specified URL, with data&#39;s keys and\nvalues URL-encoded as the request body.\n\nWhen err is nil, resp always contains a non-nil resp.Body.\nCaller should close resp.Body when done reading from it.\n\nPostForm is a wrapper around DefaultClient.PostForm\n\" href=\"#PostForm\">PostForm</a> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#Values\">url.Values</a>\n\n    <span class=\"com\">// MultipartForm is the parsed multipart form, including file uploads.\n</span>    <span class=\"com\">// This field is only available after ParseMultipartForm is called.\n</span>    <span class=\"com\">// The HTTP client ignores MultipartForm and uses Body instead.\n</span>    <span id=\"MultipartForm\">MultipartForm</span> *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/mime/multipart#Form\">multipart.Form</a>\n\n    <span class=\"com\">// Trailer maps trailer keys to values.  Like for Header, if the\n</span>    <span class=\"com\">// response has multiple trailer lines with the same key, they will be\n</span>    <span class=\"com\">// concatenated, delimited by commas.\n</span>    <span class=\"com\">// For server requests, Trailer is only populated after Body has been\n</span>    <span class=\"com\">// closed or fully consumed.\n</span>    <span class=\"com\">// Trailer support is only partially complete.\n</span>    <span id=\"Trailer\">Trailer</span> <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>\n\n    <span class=\"com\">// RemoteAddr allows HTTP servers and other software to record\n</span>    <span class=\"com\">// the network address that sent the request, usually for\n</span>    <span class=\"com\">// logging. This field is not filled in by ReadRequest and\n</span>    <span class=\"com\">// has no defined format. The HTTP server in this package\n</span>    <span class=\"com\">// sets RemoteAddr to an \"IP:port\" address before invoking a\n</span>    <span class=\"com\">// handler.\n</span>    <span class=\"com\">// This field is ignored by the HTTP client.\n</span>    <span id=\"RemoteAddr\">RemoteAddr</span> string\n\n    <span class=\"com\">// RequestURI is the unmodified Request-URI of the\n</span>    <span class=\"com\">// Request-Line (RFC 2616, Section 5.1) as sent by the client\n</span>    <span class=\"com\">// to a server. Usually the URL field should be used instead.\n</span>    <span class=\"com\">// It is an error to set this field in an HTTP client request.\n</span>    <span id=\"RequestURI\">RequestURI</span> string\n\n    <span class=\"com\">// TLS allows HTTP servers and other software to record\n</span>    <span class=\"com\">// information about the TLS connection on which the request\n</span>    <span class=\"com\">// was received. This field is not filled in by ReadRequest.\n</span>    <span class=\"com\">// The HTTP server in this package sets the field for\n</span>    <span class=\"com\">// TLS-enabled connections before invoking a handler;\n</span>    <span class=\"com\">// otherwise it leaves the field nil.\n</span>    <span class=\"com\">// This field is ignored by the HTTP client.\n</span>    <span id=\"TLS\">TLS</span> *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/crypto/tls#ConnectionState\">tls.ConnectionState</a>\n}</pre>\n<p>\nA Request represents an HTTP request received by a server\nor to be sent by a client.\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<h4 id=\"NewRequest\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#439\">NewRequest</a>\n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_NewRequest\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> <a class=\"int\" title=\"NewRequest returns a new Request given a method, URL, and optional body.\n\nIf the provided body is also an io.Closer, the returned\nRequest.Body is set to body and will be closed by the Client\nmethods Do, Post, and PostForm, and Transport.RoundTrip.\n\" href=\"#NewRequest\">NewRequest</a>(method, <span id=\"urlStr\">urlStr</span> string, <span id=\"body\">body</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#Reader\">io.Reader</a>) (*<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>, error)</pre>\n<p>\nNewRequest returns a new Request given a method, URL, and optional body.\n</p>\n<p>\nIf the provided body is also an io.Closer, the returned\nRequest.Body is set to body and will be closed by the Client\nmethods Do, Post, and PostForm, and Transport.RoundTrip.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_NewRequest\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"NewRequest returns a new Request given a method, URL, and optional body.\n\nIf the provided body is also an io.Closer, the returned\nRequest.Body is set to body and will be closed by the Client\nmethods Do, Post, and PostForm, and Transport.RoundTrip.\n\" href=\"#NewRequest\">NewRequest</a>(method, <span id=\"urlStr\">urlStr</span> string, <span id=\"body\">body</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#Reader\">io.Reader</a>) (*<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>, error) {\n	u, <span id=\"err\">err</span> := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#Parse\">url.Parse</a>(urlStr)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, err\n	}\n	rc, <span id=\"ok\">ok</span> := body.(<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#ReadCloser\">io.ReadCloser</a>)\n	<span class=\"key\">if</span> !<span id=\"ok\">ok</span> && <span id=\"body\">body</span> != <span class=\"boo\">nil</span> {\n		<span id=\"rc\">rc</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io/ioutil#NopCloser\">ioutil.NopCloser</a>(body)\n	}\n	<span id=\"req\">req</span> := &<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>{\n		Method:     method,\n		URL:        u,\n		Proto:      <span class=\"str\">&#34;HTTP/1.1&#34;</span>,\n		ProtoMajor: 1,\n		ProtoMinor: 1,\n		<a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>:     <span class=\"bui\">make</span>(<a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>),\n		Body:       rc,\n		Host:       u.Host,\n	}\n	<span class=\"key\">if</span> <span id=\"body\">body</span> != <span class=\"boo\">nil</span> {\n		<span class=\"key\">switch</span> v := body.(<span class=\"key\">type</span>) {\n		<span class=\"key\">case</span> *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/bytes#Buffer\">bytes.Buffer</a>:\n			<span id=\"req.ContentLength\">req.ContentLength</span> = int64(v.Len())\n		<span class=\"key\">case</span> *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/bytes#Reader\">bytes.Reader</a>:\n			<span id=\"req.ContentLength\">req.ContentLength</span> = int64(v.Len())\n		<span class=\"key\">case</span> *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strings#Reader\">strings.Reader</a>:\n			<span id=\"req.ContentLength\">req.ContentLength</span> = int64(v.Len())\n		}\n	}\n\n	<span class=\"ret\">return</span> req, <span class=\"boo\">nil</span>\n}</pre>\n	</div>\n</div>\n\n\n\n<h4 id=\"ReadRequest\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#514\">ReadRequest</a>\n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ReadRequest\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> <a class=\"int\" title=\"ReadRequest reads and parses a request from b.\n\" href=\"#ReadRequest\">ReadRequest</a>(b *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/bufio#Reader\">bufio.Reader</a>) (<span id=\"req\">req</span> *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>, <span id=\"err\">err</span> error)</pre>\n<p>\nReadRequest reads and parses a request from b.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_ReadRequest\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"ReadRequest reads and parses a request from b.\n\" href=\"#ReadRequest\">ReadRequest</a>(b *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/bufio#Reader\">bufio.Reader</a>) (<span id=\"req\">req</span> *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>, <span id=\"err\">err</span> error) {\n\n	<span id=\"tp\">tp</span> := newTextprotoReader(b)\n	<span id=\"req\">req</span> = <span class=\"bui\">new</span>(<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>)\n\n	<span class=\"com\">// First line: GET /index.html HTTP/1.0\n</span>	<span class=\"key\">var</span> s string\n	<span class=\"key\">if</span> s, <span id=\"err\">err</span> = tp.ReadLine(); <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, err\n	}\n	<span class=\"bui\">defer</span> <span class=\"key\">func</span>() {\n		putTextprotoReader(tp)\n		<span class=\"key\">if</span> <span id=\"err\">err</span> == <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#EOF\">io.EOF</a> {\n			<span id=\"err\">err</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#ErrUnexpectedEOF\">io.ErrUnexpectedEOF</a>\n		}\n	}()\n\n	<span class=\"key\">var</span> <span id=\"ok\">ok</span> bool\n	req.Method, req.RequestURI, req.Proto, <span id=\"ok\">ok</span> = parseRequestLine(s)\n	<span class=\"key\">if</span> !<span id=\"ok\">ok</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, &badStringError{<span class=\"str\">&#34;malformed HTTP request&#34;</span>, s}\n	}\n	<span id=\"rawurl\">rawurl</span> := req.RequestURI\n	<span class=\"key\">if</span> req.ProtoMajor, req.ProtoMinor, <span id=\"ok\">ok</span> = <a class=\"int\" title=\"ParseHTTPVersion parses a HTTP version string.\n&#34;HTTP/1.0&#34; returns (1, 0, true).\n\" href=\"#ParseHTTPVersion\">ParseHTTPVersion</a>(req.Proto); !<span id=\"ok\">ok</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, &badStringError{<span class=\"str\">&#34;malformed HTTP version&#34;</span>, req.Proto}\n	}\n\n	<span class=\"com\">// CONNECT requests are used two different ways, and neither uses a full URL:\n</span>	<span class=\"com\">// The standard use is to tunnel HTTPS through an HTTP proxy.\n</span>	<span class=\"com\">// It looks like \"CONNECT www.google.com:443 HTTP/1.1\", and the parameter is\n</span>	<span class=\"com\">// just the authority section of a URL. This information should go in req.URL.Host.\n</span>	<span class=\"com\">//\n</span>	<span class=\"com\">// The net/rpc package also uses CONNECT, but there the parameter is a path\n</span>	<span class=\"com\">// that starts with a slash. It can be parsed with the regular URL parser,\n</span>	<span class=\"com\">// and the path will end up in req.URL.Path, where it needs to be in order for\n</span>	<span class=\"com\">// RPC to work.\n</span>	<span id=\"justAuthority\">justAuthority</span> := <span id=\"req.Method\">req.Method</span> == <span class=\"str\">&#34;CONNECT&#34;</span> && !<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strings#HasPrefix\">strings.HasPrefix</a>(rawurl, <span class=\"str\">&#34;/&#34;</span>)\n	<span class=\"key\">if</span> <span id=\"justAuthority\">justAuthority</span> {\n		<span id=\"rawurl\">rawurl</span> = <span class=\"str\">&#34;http://&#34;</span> + rawurl\n	}\n\n	<span class=\"key\">if</span> req.URL, <span id=\"err\">err</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#ParseRequestURI\">url.ParseRequestURI</a>(rawurl); <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, err\n	}\n\n	<span class=\"key\">if</span> <span id=\"justAuthority\">justAuthority</span> {\n		<span class=\"com\">// Strip the bogus \"http://\" back off.\n</span>		<span id=\"req.URL.Scheme\">req.URL.Scheme</span> = <span class=\"str\">&#34;&#34;</span>\n	}\n\n	<span class=\"com\">// Subsequent lines: Key: value.\n</span>	mimeHeader, <span id=\"err\">err</span> := tp.ReadMIMEHeader()\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, err\n	}\n	<span id=\"req.Header\">req.Header</span> = <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>(mimeHeader)\n\n	<span class=\"com\">// RFC2616: Must treat\n</span>	<span class=\"com\">//	GET /index.html HTTP/1.1\n</span>	<span class=\"com\">//	Host: www.google.com\n</span>	<span class=\"com\">// and\n</span>	<span class=\"com\">//	GET http://www.google.com/index.html HTTP/1.1\n</span>	<span class=\"com\">//	Host: doesntmatter\n</span>	<span class=\"com\">// the same.  In the second case, any Host line is ignored.\n</span>	<span id=\"req.Host\">req.Host</span> = req.URL.Host\n	<span class=\"key\">if</span> <span id=\"req.Host\">req.Host</span> == <span class=\"str\">&#34;&#34;</span> {\n		<span id=\"req.Host\">req.Host</span> = req.Header.get(<span class=\"str\">&#34;Host&#34;</span>)\n	}\n	<span class=\"bui\">delete</span>(req.Header, <span class=\"str\">&#34;Host&#34;</span>)\n\n	fixPragmaCacheControl(req.Header)\n\n	<span class=\"com\">// TODO: Parse specific header values:\n</span>	<span class=\"com\">//	Accept\n</span>	<span class=\"com\">//	Accept-Encoding\n</span>	<span class=\"com\">//	Accept-Language\n</span>	<span class=\"com\">//	Authorization\n</span>	<span class=\"com\">//	Cache-Control\n</span>	<span class=\"com\">//	Connection\n</span>	<span class=\"com\">//	Date\n</span>	<span class=\"com\">//	Expect\n</span>	<span class=\"com\">//	From\n</span>	<span class=\"com\">//	If-Match\n</span>	<span class=\"com\">//	If-Modified-Since\n</span>	<span class=\"com\">//	If-None-Match\n</span>	<span class=\"com\">//	If-Range\n</span>	<span class=\"com\">//	If-Unmodified-Since\n</span>	<span class=\"com\">//	Max-Forwards\n</span>	<span class=\"com\">//	Proxy-Authorization\n</span>	<span class=\"com\">//	Referer [sic]\n</span>	<span class=\"com\">//	TE (transfer-codings)\n</span>	<span class=\"com\">//	Trailer\n</span>	<span class=\"com\">//	Transfer-Encoding\n</span>	<span class=\"com\">//	Upgrade\n</span>	<span class=\"com\">//	User-Agent\n</span>	<span class=\"com\">//	Via\n</span>	<span class=\"com\">//	Warning\n</span>\n	<span id=\"err\">err</span> = readTransfer(req, b)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, err\n	}\n\n	<span class=\"ret\">return</span> req, <span class=\"boo\">nil</span>\n}</pre>\n	</div>\n</div>\n\n\n\n<b></b>\n\n\n\n\n<h4 id=\"Request_AddCookie\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#226\">AddCookie</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Request_AddCookie\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) AddCookie(c *<a class=\"int\" title=\"A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an\nHTTP response or the Cookie header of an HTTP request.\n\" href=\"#Cookie\">Cookie</a>)</pre>\n<p>\nAddCookie adds a cookie to the request.  Per RFC 6265 section 5.4,\nAddCookie does not attach more than one Cookie header field.  That\nmeans all cookies, if any, are written into the same line,\nseparated by semicolon.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Request_AddCookie\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) AddCookie(c *<a class=\"int\" title=\"A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an\nHTTP response or the Cookie header of an HTTP request.\n\" href=\"#Cookie\">Cookie</a>) {\n	s := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/fmt#Sprintf\">fmt.Sprintf</a>(<span class=\"str\">&#34;%s=%s&#34;</span>, sanitizeCookieName(c.Name), sanitizeCookieValue(c.Value))\n	<span class=\"key\">if</span> c := r.Header.Get(<span class=\"str\">&#34;Cookie&#34;</span>); c != <span class=\"str\">&#34;&#34;</span> {\n		r.Header.Set(<span class=\"str\">&#34;Cookie&#34;</span>, c+<span class=\"str\">&#34;; &#34;</span>+s)\n	} <span class=\"key\">else</span> {\n		r.Header.Set(<span class=\"str\">&#34;Cookie&#34;</span>, s)\n	}\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Request_Cookie\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#215\">Cookie</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Request_Cookie\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) <a class=\"int\" title=\"A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an\nHTTP response or the Cookie header of an HTTP request.\n\" href=\"#Cookie\">Cookie</a>(<span id=\"name\">name</span> string) (*<a class=\"int\" title=\"A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an\nHTTP response or the Cookie header of an HTTP request.\n\" href=\"#Cookie\">Cookie</a>, error)</pre>\n<p>\nCookie returns the named cookie provided in the request or\nErrNoCookie if not found.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Request_Cookie\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) <a class=\"int\" title=\"A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an\nHTTP response or the Cookie header of an HTTP request.\n\" href=\"#Cookie\">Cookie</a>(<span id=\"name\">name</span> string) (*<a class=\"int\" title=\"A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an\nHTTP response or the Cookie header of an HTTP request.\n\" href=\"#Cookie\">Cookie</a>, error) {\n	<span class=\"key\">for</span> _, c := <span class=\"key\">range</span> readCookies(r.Header, name) {\n		<span class=\"ret\">return</span> c, <span class=\"boo\">nil</span>\n	}\n	<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, ErrNoCookie\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Request_Cookies\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#207\">Cookies</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Request_Cookies\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) Cookies() []*<a class=\"int\" title=\"A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an\nHTTP response or the Cookie header of an HTTP request.\n\" href=\"#Cookie\">Cookie</a></pre>\n<p>\nCookies parses and returns the HTTP cookies sent with the request.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Request_Cookies\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) Cookies() []*<a class=\"int\" title=\"A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an\nHTTP response or the Cookie header of an HTTP request.\n\" href=\"#Cookie\">Cookie</a> {\n	<span class=\"ret\">return</span> readCookies(r.Header, <span class=\"str\">&#34;&#34;</span>)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Request_FormFile\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#825\">FormFile</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Request_FormFile\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) FormFile(<span id=\"key\">key</span> string) (<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/mime/multipart#File\">multipart.File</a>, *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/mime/multipart#FileHeader\">multipart.FileHeader</a>, error)</pre>\n<p>\nFormFile returns the first file for the provided form key.\nFormFile calls ParseMultipartForm and ParseForm if necessary.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Request_FormFile\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) FormFile(<span id=\"key\">key</span> string) (<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/mime/multipart#File\">multipart.File</a>, *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/mime/multipart#FileHeader\">multipart.FileHeader</a>, error) {\n	<span class=\"key\">if</span> <span id=\"r.MultipartForm\">r.MultipartForm</span> == <span id=\"multipartByReader\">multipartByReader</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, <span class=\"boo\">nil</span>, <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/errors#New\">errors.New</a>(<span class=\"str\">&#34;http: multipart handled by MultipartReader&#34;</span>)\n	}\n	<span class=\"key\">if</span> <span id=\"r.MultipartForm\">r.MultipartForm</span> == <span class=\"boo\">nil</span> {\n		<span id=\"err\">err</span> := r.ParseMultipartForm(defaultMaxMemory)\n		<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n			<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, <span class=\"boo\">nil</span>, err\n		}\n	}\n	<span class=\"key\">if</span> <span id=\"r.MultipartForm\">r.MultipartForm</span> != <span class=\"boo\">nil</span> && <span id=\"r.MultipartForm.File\">r.MultipartForm.File</span> != <span class=\"boo\">nil</span> {\n		<span class=\"key\">if</span> <span id=\"fhs\">fhs</span> := r.MultipartForm.File[key]; <span class=\"bui\">len</span>(fhs) > 0 {\n			f, <span id=\"err\">err</span> := fhs[0].Open()\n			<span class=\"ret\">return</span> f, fhs[0], err\n		}\n	}\n	<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, <span class=\"boo\">nil</span>, ErrMissingFile\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Request_FormValue\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#800\">FormValue</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Request_FormValue\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) FormValue(<span id=\"key\">key</span> string) string</pre>\n<p>\nFormValue returns the first value for the named component of the query.\nPOST and PUT body parameters take precedence over URL query string values.\nFormValue calls ParseMultipartForm and ParseForm if necessary.\nTo access multiple values of the same key use ParseForm.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Request_FormValue\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) FormValue(<span id=\"key\">key</span> string) <span id=\"string\">string</span> {\n	<span class=\"key\">if</span> <span id=\"r.Form\">r.Form</span> == <span class=\"boo\">nil</span> {\n		r.ParseMultipartForm(defaultMaxMemory)\n	}\n	<span class=\"key\">if</span> <span id=\"vs\">vs</span> := r.Form[key]; <span class=\"bui\">len</span>(vs) > 0 {\n		<span class=\"ret\">return</span> vs[0]\n	}\n	<span class=\"ret\">return</span> <span class=\"str\">&#34;&#34;</span>\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Request_MultipartReader\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#259\">MultipartReader</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Request_MultipartReader\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) MultipartReader() (*<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/mime/multipart#Reader\">multipart.Reader</a>, error)</pre>\n<p>\nMultipartReader returns a MIME multipart reader if this is a\nmultipart/form-data POST request, else returns nil and an error.\nUse this function instead of ParseMultipartForm to\nprocess the request body as a stream.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Request_MultipartReader\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) MultipartReader() (*<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/mime/multipart#Reader\">multipart.Reader</a>, error) {\n	<span class=\"key\">if</span> <span id=\"r.MultipartForm\">r.MultipartForm</span> == <span id=\"multipartByReader\">multipartByReader</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/errors#New\">errors.New</a>(<span class=\"str\">&#34;http: MultipartReader called twice&#34;</span>)\n	}\n	<span class=\"key\">if</span> <span id=\"r.MultipartForm\">r.MultipartForm</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/errors#New\">errors.New</a>(<span class=\"str\">&#34;http: multipart handled by ParseMultipartForm&#34;</span>)\n	}\n	<span id=\"r.MultipartForm\">r.MultipartForm</span> = multipartByReader\n	<span class=\"ret\">return</span> r.multipartReader()\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Request_ParseForm\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#722\">ParseForm</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Request_ParseForm\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) ParseForm() error</pre>\n<p>\nParseForm parses the raw query from the URL and updates r.Form.\n</p>\n<p>\nFor POST or PUT requests, it also parses the request body as a form and\nput the results into both r.PostForm and r.Form.\nPOST and PUT body parameters take precedence over URL query string values\nin r.Form.\n</p>\n<p>\nIf the request Body&#39;s size has not already been limited by MaxBytesReader,\nthe size is capped at 10MB.\n</p>\n<p>\nParseMultipartForm calls ParseForm automatically.\nIt is idempotent.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Request_ParseForm\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) ParseForm() <span id=\"error\">error</span> {\n	<span class=\"key\">var</span> <span id=\"err\">err</span> error\n	<span class=\"key\">if</span> <span id=\"r.PostForm\">r.PostForm</span> == <span class=\"boo\">nil</span> {\n		<span class=\"key\">if</span> <span id=\"r.Method\">r.Method</span> == <span class=\"str\">&#34;POST&#34;</span> || <span id=\"r.Method\">r.Method</span> == <span class=\"str\">&#34;PUT&#34;</span> {\n			r.PostForm, <span id=\"err\">err</span> = parsePostForm(r)\n		}\n		<span class=\"key\">if</span> <span id=\"r.PostForm\">r.PostForm</span> == <span class=\"boo\">nil</span> {\n			<span id=\"r.PostForm\">r.PostForm</span> = <span class=\"bui\">make</span>(<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#Values\">url.Values</a>)\n		}\n	}\n	<span class=\"key\">if</span> <span id=\"r.Form\">r.Form</span> == <span class=\"boo\">nil</span> {\n		<span class=\"key\">if</span> <span class=\"bui\">len</span>(r.PostForm) > 0 {\n			<span id=\"r.Form\">r.Form</span> = <span class=\"bui\">make</span>(<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#Values\">url.Values</a>)\n			copyValues(r.Form, r.PostForm)\n		}\n		<span class=\"key\">var</span> <span id=\"newValues\">newValues</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#Values\">url.Values</a>\n		<span class=\"key\">if</span> <span id=\"r.URL\">r.URL</span> != <span class=\"boo\">nil</span> {\n			<span class=\"key\">var</span> e error\n			newValues, e = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#ParseQuery\">url.ParseQuery</a>(r.URL.RawQuery)\n			<span class=\"key\">if</span> <span id=\"err\">err</span> == <span class=\"boo\">nil</span> {\n				<span id=\"err\">err</span> = e\n			}\n		}\n		<span class=\"key\">if</span> <span id=\"newValues\">newValues</span> == <span class=\"boo\">nil</span> {\n			<span id=\"newValues\">newValues</span> = <span class=\"bui\">make</span>(<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#Values\">url.Values</a>)\n		}\n		<span class=\"key\">if</span> <span id=\"r.Form\">r.Form</span> == <span class=\"boo\">nil</span> {\n			<span id=\"r.Form\">r.Form</span> = newValues\n		} <span class=\"key\">else</span> {\n			copyValues(r.Form, newValues)\n		}\n	}\n	<span class=\"ret\">return</span> err\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Request_ParseMultipartForm\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#763\">ParseMultipartForm</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Request_ParseMultipartForm\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) ParseMultipartForm(<span id=\"maxMemory\">maxMemory</span> int64) error</pre>\n<p>\nParseMultipartForm parses a request body as multipart/form-data.\nThe whole request body is parsed and up to a total of maxMemory bytes of\nits file parts are stored in memory, with the remainder stored on\ndisk in temporary files.\nParseMultipartForm calls ParseForm if necessary.\nAfter one call to ParseMultipartForm, subsequent calls have no effect.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Request_ParseMultipartForm\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) ParseMultipartForm(<span id=\"maxMemory\">maxMemory</span> int64) <span id=\"error\">error</span> {\n	<span class=\"key\">if</span> <span id=\"r.MultipartForm\">r.MultipartForm</span> == <span id=\"multipartByReader\">multipartByReader</span> {\n		<span class=\"ret\">return</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/errors#New\">errors.New</a>(<span class=\"str\">&#34;http: multipart handled by MultipartReader&#34;</span>)\n	}\n	<span class=\"key\">if</span> <span id=\"r.Form\">r.Form</span> == <span class=\"boo\">nil</span> {\n		<span id=\"err\">err</span> := r.ParseForm()\n		<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n			<span class=\"ret\">return</span> err\n		}\n	}\n	<span class=\"key\">if</span> <span id=\"r.MultipartForm\">r.MultipartForm</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>\n	}\n\n	mr, <span id=\"err\">err</span> := r.multipartReader()\n	<span class=\"key\">if</span> <span id=\"err\">err</span> == <span id=\"ErrNotMultipart\">ErrNotMultipart</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>\n	} <span class=\"key\">else</span> <span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> err\n	}\n\n	f, <span id=\"err\">err</span> := mr.ReadForm(maxMemory)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> err\n	}\n	<span class=\"key\">for</span> k, v := <span class=\"key\">range</span> <span id=\"f.Value\">f.Value</span> {\n		r.Form[k] = <span class=\"bui\">append</span>(r.Form[k], v...)\n	}\n	<span id=\"r.MultipartForm\">r.MultipartForm</span> = f\n\n	<span class=\"ret\">return</span> <span class=\"boo\">nil</span>\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Request_PostFormValue\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#813\">PostFormValue</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Request_PostFormValue\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) PostFormValue(<span id=\"key\">key</span> string) string</pre>\n<p>\nPostFormValue returns the first value for the named component of the POST\nor PUT request body. URL query parameters are ignored.\nPostFormValue calls ParseMultipartForm and ParseForm if necessary.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Request_PostFormValue\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) PostFormValue(<span id=\"key\">key</span> string) <span id=\"string\">string</span> {\n	<span class=\"key\">if</span> <span id=\"r.PostForm\">r.PostForm</span> == <span class=\"boo\">nil</span> {\n		r.ParseMultipartForm(defaultMaxMemory)\n	}\n	<span class=\"key\">if</span> <span id=\"vs\">vs</span> := r.PostForm[key]; <span class=\"bui\">len</span>(vs) > 0 {\n		<span class=\"ret\">return</span> vs[0]\n	}\n	<span class=\"ret\">return</span> <span class=\"str\">&#34;&#34;</span>\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Request_ProtoAtLeast\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#196\">ProtoAtLeast</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Request_ProtoAtLeast\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) ProtoAtLeast(major, <span id=\"minor\">minor</span> int) bool</pre>\n<p>\nProtoAtLeast reports whether the HTTP protocol used\nin the request is at least major.minor.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Request_ProtoAtLeast\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) ProtoAtLeast(major, <span id=\"minor\">minor</span> int) <span id=\"bool\">bool</span> {\n	<span class=\"ret\">return</span> <span id=\"r.ProtoMajor\">r.ProtoMajor</span> > <span id=\"major\">major</span> ||\n		<span id=\"r.ProtoMajor\">r.ProtoMajor</span> == <span id=\"major\">major</span> && <span id=\"r.ProtoMinor\">r.ProtoMinor</span> >= minor\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Request_Referer\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#243\">Referer</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Request_Referer\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) Referer() string</pre>\n<p>\nReferer returns the referring URL, if sent in the request.\n</p>\n<p>\nReferer is misspelled as in the request itself, a mistake from the\nearliest days of HTTP.  This value can also be fetched from the\nHeader map as Header[&#34;Referer&#34;]; the benefit of making it available\nas a method is that the compiler can diagnose programs that use the\nalternate (correct English) spelling req.Referrer() but cannot\ndiagnose programs that use Header[&#34;Referrer&#34;].\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Request_Referer\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) Referer() <span id=\"string\">string</span> {\n	<span class=\"ret\">return</span> r.Header.Get(<span class=\"str\">&#34;Referer&#34;</span>)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Request_SetBasicAuth\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#477\">SetBasicAuth</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Request_SetBasicAuth\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) SetBasicAuth(username, <span id=\"password\">password</span> string)</pre>\n<p>\nSetBasicAuth sets the request&#39;s Authorization header to use HTTP\nBasic Authentication with the provided username and password.\n</p>\n<p>\nWith HTTP Basic Authentication the provided username and password\nare not encrypted.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Request_SetBasicAuth\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) SetBasicAuth(username, <span id=\"password\">password</span> string) {\n	r.Header.Set(<span class=\"str\">&#34;Authorization&#34;</span>, <span class=\"str\">&#34;Basic &#34;</span>+basicAuth(username, password))\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Request_UserAgent\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#202\">UserAgent</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Request_UserAgent\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) UserAgent() string</pre>\n<p>\nUserAgent returns the client&#39;s User-Agent, if sent in the request.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Request_UserAgent\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) UserAgent() <span id=\"string\">string</span> {\n	<span class=\"ret\">return</span> r.Header.Get(<span class=\"str\">&#34;User-Agent&#34;</span>)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Request_Write\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#309\">Write</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Request_Write\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) Write(w <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#Writer\">io.Writer</a>) error</pre>\n<p>\nWrite writes an HTTP/1.1 request -- header and body -- in wire format.\nThis method consults the following fields of the request:\n</p>\n<pre>Host\nURL\nMethod (defaults to &#34;GET&#34;)\nHeader\nContentLength\nTransferEncoding\nBody\n</pre>\n<p>\nIf Body is present, Content-Length is &lt;= 0 and TransferEncoding\nhasn&#39;t been set to &#34;identity&#34;, Write adds &#34;Transfer-Encoding:\nchunked&#34; to the header. Body is closed after it is sent.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Request_Write\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) Write(w <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#Writer\">io.Writer</a>) <span id=\"error\">error</span> {\n	<span class=\"ret\">return</span> r.write(w, <span class=\"boo\">false</span>, <span class=\"boo\">nil</span>)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Request_WriteProxy\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=#319\">WriteProxy</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Request_WriteProxy\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) WriteProxy(w <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#Writer\">io.Writer</a>) error</pre>\n<p>\nWriteProxy is like Write but writes the request in the form\nexpected by an HTTP proxy.  In particular, WriteProxy writes the\ninitial Request-URI line of the request with an absolute URI, per\nsection 5.1.2 of RFC 2616, including the scheme and host.\nIn either case, WriteProxy also writes a Host header, using\neither r.Host or r.URL.Host.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Request_WriteProxy\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) WriteProxy(w <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#Writer\">io.Writer</a>) <span id=\"error\">error</span> {\n	<span class=\"ret\">return</span> r.write(w, <span class=\"boo\">true</span>, <span class=\"boo\">nil</span>)\n}</pre>\n	</div>\n	</div>\n\n\n\n<b></b>\n\n\n<h3 id=\"Response\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/response.go?r=#27\">Response</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a> <span class=\"key\">struct</span> {\n    <span id=\"Status\">Status</span>     <span id=\"string\">string</span> <span class=\"com\">// e.g. \"200 OK\"\n</span>    <span id=\"StatusCode\">StatusCode</span> <span id=\"int\">int</span>    <span class=\"com\">// e.g. 200\n</span>    <span id=\"Proto\">Proto</span>      <span id=\"string\">string</span> <span class=\"com\">// e.g. \"HTTP/1.0\"\n</span>    <span id=\"ProtoMajor\">ProtoMajor</span> <span id=\"int\">int</span>    <span class=\"com\">// e.g. 1\n</span>    <span id=\"ProtoMinor\">ProtoMinor</span> <span id=\"int\">int</span>    <span class=\"com\">// e.g. 0\n</span>\n    <span class=\"com\">// Header maps header keys to values.  If the response had multiple\n</span>    <span class=\"com\">// headers with the same key, they may be concatenated, with comma\n</span>    <span class=\"com\">// delimiters.  (Section 4.2 of RFC 2616 requires that multiple headers\n</span>    <span class=\"com\">// be semantically equivalent to a comma-delimited sequence.) Values\n</span>    <span class=\"com\">// duplicated by other fields in this struct (e.g., ContentLength) are\n</span>    <span class=\"com\">// omitted from Header.\n</span>    <span class=\"com\">//\n</span>    <span class=\"com\">// Keys in the map are canonicalized (see CanonicalHeaderKey).\n</span>    <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a> <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>\n\n    <span class=\"com\">// Body represents the response body.\n</span>    <span class=\"com\">//\n</span>    <span class=\"com\">// The http Client and Transport guarantee that Body is always\n</span>    <span class=\"com\">// non-nil, even on responses without a body or responses with\n</span>    <span class=\"com\">// a zero-lengthed body.\n</span>    <span class=\"com\">//\n</span>    <span class=\"com\">// The Body is automatically dechunked if the server replied\n</span>    <span class=\"com\">// with a \"chunked\" Transfer-Encoding.\n</span>    <span id=\"Body\">Body</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#ReadCloser\">io.ReadCloser</a>\n\n    <span class=\"com\">// ContentLength records the length of the associated content.  The\n</span>    <span class=\"com\">// value -1 indicates that the length is unknown.  Unless Request.Method\n</span>    <span class=\"com\">// is \"HEAD\", values >= 0 indicate that the given number of bytes may\n</span>    <span class=\"com\">// be read from Body.\n</span>    <span id=\"ContentLength\">ContentLength</span> int64\n\n    <span class=\"com\">// Contains transfer encodings from outer-most to inner-most. Value is\n</span>    <span class=\"com\">// nil, means that \"identity\" encoding is used.\n</span>    <span id=\"TransferEncoding\">TransferEncoding</span> []string\n\n    <span class=\"com\">// Close records whether the header directed that the connection be\n</span>    <span class=\"com\">// closed after reading Body.  The value is advice for clients: neither\n</span>    <span class=\"com\">// ReadResponse nor Response.Write ever closes a connection.\n</span>    <span id=\"Close\">Close</span> bool\n\n    <span class=\"com\">// Trailer maps trailer keys to values, in the same\n</span>    <span class=\"com\">// format as the header.\n</span>    <span id=\"Trailer\">Trailer</span> <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>\n\n    <span class=\"com\">// The Request that was sent to obtain this Response.\n</span>    <span class=\"com\">// Request's Body is nil (having already been consumed).\n</span>    <span class=\"com\">// This is only populated for Client requests.\n</span>    <a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a> *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>\n}</pre>\n<p>\nResponse represents the response from an HTTP request.\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<h4 id=\"Get\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/client.go?r=#224\">Get</a>\n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Get\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> <a class=\"int\" title=\"Get issues a GET to the specified URL.  If the response is one of the following\nredirect codes, Get follows the redirect, up to a maximum of 10 redirects:\n\n   301 (Moved Permanently)\n   302 (Found)\n   303 (See Other)\n   307 (Temporary Redirect)\n\nAn error is returned if there were too many redirects or if there\nwas an HTTP protocol error. A non-2xx response doesn&#39;t cause an\nerror.\n\nWhen err is nil, resp always contains a non-nil resp.Body.\nCaller should close resp.Body when done reading from it.\n\nGet is a wrapper around DefaultClient.Get.\n\" href=\"#Get\">Get</a>(<span id=\"url\">url</span> string) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error)</pre>\n<p>\nGet issues a GET to the specified URL.  If the response is one of the following\nredirect codes, Get follows the redirect, up to a maximum of 10 redirects:\n</p>\n<pre>301 (Moved Permanently)\n302 (Found)\n303 (See Other)\n307 (Temporary Redirect)\n</pre>\n<p>\nAn error is returned if there were too many redirects or if there\nwas an HTTP protocol error. A non-2xx response doesn&#39;t cause an\nerror.\n</p>\n<p>\nWhen err is nil, resp always contains a non-nil resp.Body.\nCaller should close resp.Body when done reading from it.\n</p>\n<p>\nGet is a wrapper around DefaultClient.Get.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_Get\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"Get issues a GET to the specified URL.  If the response is one of the following\nredirect codes, Get follows the redirect, up to a maximum of 10 redirects:\n\n   301 (Moved Permanently)\n   302 (Found)\n   303 (See Other)\n   307 (Temporary Redirect)\n\nAn error is returned if there were too many redirects or if there\nwas an HTTP protocol error. A non-2xx response doesn&#39;t cause an\nerror.\n\nWhen err is nil, resp always contains a non-nil resp.Body.\nCaller should close resp.Body when done reading from it.\n\nGet is a wrapper around DefaultClient.Get.\n\" href=\"#Get\">Get</a>(<span id=\"url\">url</span> string) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error) {\n	<span class=\"ret\">return</span> DefaultClient.Get(url)\n}</pre>\n	</div>\n</div>\n\n\n\n\n<div class=\"accordion\">\n	<div class=\"accordion-group\">\n		<div class=\"accordion-heading\">\n			<a id=\"_ex_btn_Get\" class=\"accordion-toggle collapsed\" data-toggle=\"collapse\" href=\"#_ex_Get\">Example(Get)</a>\n		</div>\n\n		<div id=\"_ex_Get\" class=\"accordion-body collapse\">\n			<div class=\"accordion-inner\">\n			<p>Code:</p>\n			<pre class=\"pre-x-scrollable\">\nres, <span id=\"err\">err</span> := <a class=\"ext\" title=\"\" href=\"#Get\">http.Get</a>(<span class=\"str\">&#34;http://www.google.com/robots.txt&#34;</span>)\n<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n    <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/log#Fatal\">log.Fatal</a>(err)\n}\nrobots, <span id=\"err\">err</span> := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io/ioutil#ReadAll\">ioutil.ReadAll</a>(res.Body)\nres.Body.Close()\n<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n    <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/log#Fatal\">log.Fatal</a>(err)\n}\n<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/fmt#Printf\">fmt.Printf</a>(<span class=\"str\">&#34;%s&#34;</span>, robots)\n</pre>\n			\n			</div>\n		</div>\n	</div>\n</div>\n\n\n\n\n<h4 id=\"Head\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/client.go?r=#392\">Head</a>\n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Head\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> <a class=\"int\" title=\"Head issues a HEAD to the specified URL.  If the response is one of the\nfollowing redirect codes, Head follows the redirect after calling the\nClient&#39;s CheckRedirect function.\n\n   301 (Moved Permanently)\n   302 (Found)\n   303 (See Other)\n   307 (Temporary Redirect)\n\nHead is a wrapper around DefaultClient.Head\n\" href=\"#Head\">Head</a>(<span id=\"url\">url</span> string) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error)</pre>\n<p>\nHead issues a HEAD to the specified URL.  If the response is one of the\nfollowing redirect codes, Head follows the redirect after calling the\nClient&#39;s CheckRedirect function.\n</p>\n<pre>301 (Moved Permanently)\n302 (Found)\n303 (See Other)\n307 (Temporary Redirect)\n</pre>\n<p>\nHead is a wrapper around DefaultClient.Head\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_Head\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"Head issues a HEAD to the specified URL.  If the response is one of the\nfollowing redirect codes, Head follows the redirect after calling the\nClient&#39;s CheckRedirect function.\n\n   301 (Moved Permanently)\n   302 (Found)\n   303 (See Other)\n   307 (Temporary Redirect)\n\nHead is a wrapper around DefaultClient.Head\n\" href=\"#Head\">Head</a>(<span id=\"url\">url</span> string) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error) {\n	<span class=\"ret\">return</span> DefaultClient.Head(url)\n}</pre>\n	</div>\n</div>\n\n\n\n<h4 id=\"Post\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/client.go?r=#343\">Post</a>\n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Post\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> <a class=\"int\" title=\"Post issues a POST to the specified URL.\n\nCaller should close resp.Body when done reading from it.\n\nPost is a wrapper around DefaultClient.Post\n\" href=\"#Post\">Post</a>(<span id=\"url\">url</span> string, <span id=\"bodyType\">bodyType</span> string, <span id=\"body\">body</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#Reader\">io.Reader</a>) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error)</pre>\n<p>\nPost issues a POST to the specified URL.\n</p>\n<p>\nCaller should close resp.Body when done reading from it.\n</p>\n<p>\nPost is a wrapper around DefaultClient.Post\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_Post\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"Post issues a POST to the specified URL.\n\nCaller should close resp.Body when done reading from it.\n\nPost is a wrapper around DefaultClient.Post\n\" href=\"#Post\">Post</a>(<span id=\"url\">url</span> string, <span id=\"bodyType\">bodyType</span> string, <span id=\"body\">body</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#Reader\">io.Reader</a>) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error) {\n	<span class=\"ret\">return</span> DefaultClient.Post(url, bodyType, body)\n}</pre>\n	</div>\n</div>\n\n\n\n<h4 id=\"PostForm\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/client.go?r=#369\">PostForm</a>\n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_PostForm\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> <a class=\"int\" title=\"PostForm issues a POST to the specified URL, with data&#39;s keys and\nvalues URL-encoded as the request body.\n\nWhen err is nil, resp always contains a non-nil resp.Body.\nCaller should close resp.Body when done reading from it.\n\nPostForm is a wrapper around DefaultClient.PostForm\n\" href=\"#PostForm\">PostForm</a>(<span id=\"url\">url</span> string, <span id=\"data\">data</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#Values\">url.Values</a>) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error)</pre>\n<p>\nPostForm issues a POST to the specified URL, with data&#39;s keys and\nvalues URL-encoded as the request body.\n</p>\n<p>\nWhen err is nil, resp always contains a non-nil resp.Body.\nCaller should close resp.Body when done reading from it.\n</p>\n<p>\nPostForm is a wrapper around DefaultClient.PostForm\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_PostForm\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"PostForm issues a POST to the specified URL, with data&#39;s keys and\nvalues URL-encoded as the request body.\n\nWhen err is nil, resp always contains a non-nil resp.Body.\nCaller should close resp.Body when done reading from it.\n\nPostForm is a wrapper around DefaultClient.PostForm\n\" href=\"#PostForm\">PostForm</a>(<span id=\"url\">url</span> string, <span id=\"data\">data</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#Values\">url.Values</a>) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error) {\n	<span class=\"ret\">return</span> DefaultClient.PostForm(url, data)\n}</pre>\n	</div>\n</div>\n\n\n\n<h4 id=\"ReadResponse\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/response.go?r=#107\">ReadResponse</a>\n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ReadResponse\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> <a class=\"int\" title=\"ReadResponse reads and returns an HTTP response from r.\nThe req parameter optionally specifies the Request that corresponds\nto this Response. If nil, a GET request is assumed.\nClients must call resp.Body.Close when finished reading resp.Body.\nAfter that call, clients can inspect resp.Trailer to find key/value\npairs included in the response trailer.\n\" href=\"#ReadResponse\">ReadResponse</a>(r *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/bufio#Reader\">bufio.Reader</a>, <span id=\"req\">req</span> *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) (*<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, error)</pre>\n<p>\nReadResponse reads and returns an HTTP response from r.\nThe req parameter optionally specifies the Request that corresponds\nto this Response. If nil, a GET request is assumed.\nClients must call resp.Body.Close when finished reading resp.Body.\nAfter that call, clients can inspect resp.Trailer to find key/value\npairs included in the response trailer.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_ReadResponse\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"ReadResponse reads and returns an HTTP response from r.\nThe req parameter optionally specifies the Request that corresponds\nto this Response. If nil, a GET request is assumed.\nClients must call resp.Body.Close when finished reading resp.Body.\nAfter that call, clients can inspect resp.Trailer to find key/value\npairs included in the response trailer.\n\" href=\"#ReadResponse\">ReadResponse</a>(r *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/bufio#Reader\">bufio.Reader</a>, <span id=\"req\">req</span> *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) (*<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, error) {\n	<span id=\"tp\">tp</span> := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/textproto#NewReader\">textproto.NewReader</a>(r)\n	<span id=\"resp\">resp</span> := &<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>{\n		<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>: req,\n	}\n\n	<span class=\"com\">// Parse the first line of the response.\n</span>	line, <span id=\"err\">err</span> := tp.ReadLine()\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"key\">if</span> <span id=\"err\">err</span> == <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#EOF\">io.EOF</a> {\n			<span id=\"err\">err</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#ErrUnexpectedEOF\">io.ErrUnexpectedEOF</a>\n		}\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, err\n	}\n	f := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strings#SplitN\">strings.SplitN</a>(line, <span class=\"str\">&#34; &#34;</span>, 3)\n	<span class=\"key\">if</span> <span class=\"bui\">len</span>(f) < 2 {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, &badStringError{<span class=\"str\">&#34;malformed HTTP response&#34;</span>, line}\n	}\n	<span id=\"reasonPhrase\">reasonPhrase</span> := <span class=\"str\">&#34;&#34;</span>\n	<span class=\"key\">if</span> <span class=\"bui\">len</span>(f) > 2 {\n		<span id=\"reasonPhrase\">reasonPhrase</span> = f[2]\n	}\n	<span id=\"resp.Status\">resp.Status</span> = f[1] + <span class=\"str\">&#34; &#34;</span> + reasonPhrase\n	resp.StatusCode, <span id=\"err\">err</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strconv#Atoi\">strconv.Atoi</a>(f[1])\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, &badStringError{<span class=\"str\">&#34;malformed HTTP status code&#34;</span>, f[1]}\n	}\n\n	<span id=\"resp.Proto\">resp.Proto</span> = f[0]\n	<span class=\"key\">var</span> <span id=\"ok\">ok</span> bool\n	<span class=\"key\">if</span> resp.ProtoMajor, resp.ProtoMinor, <span id=\"ok\">ok</span> = <a class=\"int\" title=\"ParseHTTPVersion parses a HTTP version string.\n&#34;HTTP/1.0&#34; returns (1, 0, true).\n\" href=\"#ParseHTTPVersion\">ParseHTTPVersion</a>(resp.Proto); !<span id=\"ok\">ok</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, &badStringError{<span class=\"str\">&#34;malformed HTTP version&#34;</span>, resp.Proto}\n	}\n\n	<span class=\"com\">// Parse the response headers.\n</span>	mimeHeader, <span id=\"err\">err</span> := tp.ReadMIMEHeader()\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, err\n	}\n	<span id=\"resp.Header\">resp.Header</span> = <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>(mimeHeader)\n\n	fixPragmaCacheControl(resp.Header)\n\n	<span id=\"err\">err</span> = readTransfer(resp, r)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, err\n	}\n\n	<span class=\"ret\">return</span> resp, <span class=\"boo\">nil</span>\n}</pre>\n	</div>\n</div>\n\n\n\n<b></b>")
