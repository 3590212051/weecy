document.write("\n\n\n\n\n<h4 id=\"Response_Cookies\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/response.go?r=#80\">Cookies</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Response_Cookies\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (r *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>) Cookies() []*<a class=\"int\" title=\"A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an\nHTTP response or the Cookie header of an HTTP request.\n\" href=\"#Cookie\">Cookie</a></pre>\n<p>\nCookies parses and returns the cookies set in the Set-Cookie headers.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Response_Cookies\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (r *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>) Cookies() []*<a class=\"int\" title=\"A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an\nHTTP response or the Cookie header of an HTTP request.\n\" href=\"#Cookie\">Cookie</a> {\n	<span class=\"ret\">return</span> readSetCookies(r.Header)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Response_Location\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/response.go?r=#90\">Location</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Response_Location\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (r *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>) Location() (*<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#URL\">url.URL</a>, error)</pre>\n<p>\nLocation returns the URL of the response&#39;s &#34;Location&#34; header,\nif present.  Relative redirects are resolved relative to\nthe Response&#39;s Request.  ErrNoLocation is returned if no\nLocation header is present.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Response_Location\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (r *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>) Location() (*<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#URL\">url.URL</a>, error) {\n	<span id=\"lv\">lv</span> := r.Header.Get(<span class=\"str\">&#34;Location&#34;</span>)\n	<span class=\"key\">if</span> <span id=\"lv\">lv</span> == <span class=\"str\">&#34;&#34;</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, ErrNoLocation\n	}\n	<span class=\"key\">if</span> <span id=\"r.Request\">r.Request</span> != <span class=\"boo\">nil</span> && <span id=\"r.Request.URL\">r.Request.URL</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> r.Request.URL.Parse(lv)\n	}\n	<span class=\"ret\">return</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#Parse\">url.Parse</a>(lv)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Response_ProtoAtLeast\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/response.go?r=#172\">ProtoAtLeast</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Response_ProtoAtLeast\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (r *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>) ProtoAtLeast(major, <span id=\"minor\">minor</span> int) bool</pre>\n<p>\nProtoAtLeast reports whether the HTTP protocol used\nin the response is at least major.minor.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Response_ProtoAtLeast\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (r *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>) ProtoAtLeast(major, <span id=\"minor\">minor</span> int) <span id=\"bool\">bool</span> {\n	<span class=\"ret\">return</span> <span id=\"r.ProtoMajor\">r.ProtoMajor</span> > <span id=\"major\">major</span> ||\n		<span id=\"r.ProtoMajor\">r.ProtoMajor</span> == <span id=\"major\">major</span> && <span id=\"r.ProtoMinor\">r.ProtoMinor</span> >= minor\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Response_Write\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/response.go?r=#190\">Write</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Response_Write\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (r *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>) Write(w <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#Writer\">io.Writer</a>) error</pre>\n<p>\nWrites the response (header, body and trailer) in wire format. This method\nconsults the following fields of the response:\n</p>\n<pre>StatusCode\nProtoMajor\nProtoMinor\nRequest.Method\nTransferEncoding\nTrailer\nBody\nContentLength\nHeader, values for non-canonical keys will have unpredictable behavior\n</pre>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Response_Write\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (r *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>) Write(w <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#Writer\">io.Writer</a>) <span id=\"error\">error</span> {\n\n	<span class=\"com\">// Status line\n</span>	<span id=\"text\">text</span> := r.Status\n	<span class=\"key\">if</span> <span id=\"text\">text</span> == <span class=\"str\">&#34;&#34;</span> {\n		<span class=\"key\">var</span> <span id=\"ok\">ok</span> bool\n		text, <span id=\"ok\">ok</span> = statusText[r.StatusCode]\n		<span class=\"key\">if</span> !<span id=\"ok\">ok</span> {\n			<span id=\"text\">text</span> = <span class=\"str\">&#34;status code &#34;</span> + <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strconv#Itoa\">strconv.Itoa</a>(r.StatusCode)\n		}\n	}\n	protoMajor, <span id=\"protoMinor\">protoMinor</span> := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strconv#Itoa\">strconv.Itoa</a>(r.ProtoMajor), <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strconv#Itoa\">strconv.Itoa</a>(r.ProtoMinor)\n	<span id=\"statusCode\">statusCode</span> := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strconv#Itoa\">strconv.Itoa</a>(r.StatusCode) + <span class=\"str\">&#34; &#34;</span>\n	<span id=\"text\">text</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strings#TrimPrefix\">strings.TrimPrefix</a>(text, statusCode)\n	<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#WriteString\">io.WriteString</a>(w, <span class=\"str\">&#34;HTTP/&#34;</span>+protoMajor+<span class=\"str\">&#34;.&#34;</span>+protoMinor+<span class=\"str\">&#34; &#34;</span>+statusCode+text+<span class=\"str\">&#34;\\r\\n&#34;</span>)\n\n	<span class=\"com\">// Process Body,ContentLength,Close,Trailer\n</span>	tw, <span id=\"err\">err</span> := newTransferWriter(r)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> err\n	}\n	<span id=\"err\">err</span> = tw.WriteHeader(w)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> err\n	}\n\n	<span class=\"com\">// Rest of header\n</span>	<span id=\"err\">err</span> = r.Header.WriteSubset(w, respExcludeHeader)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> err\n	}\n\n	<span class=\"com\">// End-of-header\n</span>	<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/io#WriteString\">io.WriteString</a>(w, <span class=\"str\">&#34;\\r\\n&#34;</span>)\n\n	<span class=\"com\">// Write body and trailer\n</span>	<span id=\"err\">err</span> = tw.WriteBody(w)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> err\n	}\n\n	<span class=\"com\">// Success\n</span>	<span class=\"ret\">return</span> <span class=\"boo\">nil</span>\n}</pre>\n	</div>\n	</div>\n\n\n\n<b></b>\n\n\n<h3 id=\"ResponseWriter\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#50\">ResponseWriter</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a> <span id=\"interface\">interface</span> {\n    <span class=\"com\">// Header returns the header map that will be sent by WriteHeader.\n</span>    <span class=\"com\">// Changing the header after a call to WriteHeader (or Write) has\n</span>    <span class=\"com\">// no effect.\n</span>    <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>() <a class=\"int\" title=\"A Header represents the key-value pairs in an HTTP header.\n\" href=\"#Header\">Header</a>\n\n    <span class=\"com\">// Write writes the data to the connection as part of an HTTP reply.\n</span>    <span class=\"com\">// If WriteHeader has not yet been called, Write calls WriteHeader(http.StatusOK)\n</span>    <span class=\"com\">// before writing the data.  If the Header does not contain a\n</span>    <span class=\"com\">// Content-Type line, Write adds a Content-Type set to the result of passing\n</span>    <span class=\"com\">// the initial 512 bytes of written data to DetectContentType.\n</span>    Write([]byte) (int, error)\n\n    <span class=\"com\">// WriteHeader sends an HTTP response header with status code.\n</span>    <span class=\"com\">// If WriteHeader is not called explicitly, the first call to Write\n</span>    <span class=\"com\">// will trigger an implicit WriteHeader(http.StatusOK).\n</span>    <span class=\"com\">// Thus explicit calls to WriteHeader are mainly used to\n</span>    <span class=\"com\">// send error codes.\n</span>    WriteHeader(int)\n}</pre>\n<p>\nA ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n<h3 id=\"RoundTripper\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/client.go?r=#65\">RoundTripper</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"RoundTripper is an interface representing the ability to execute a\nsingle HTTP transaction, obtaining the Response for a given Request.\n\nA RoundTripper must be safe for concurrent use by multiple\ngoroutines.\n\" href=\"#RoundTripper\">RoundTripper</a> <span id=\"interface\">interface</span> {\n    <span class=\"com\">// RoundTrip executes a single HTTP transaction, returning\n</span>    <span class=\"com\">// the Response for the request req.  RoundTrip should not\n</span>    <span class=\"com\">// attempt to interpret the response.  In particular,\n</span>    <span class=\"com\">// RoundTrip must return err == nil if it obtained a response,\n</span>    <span class=\"com\">// regardless of the response's HTTP status code.  A non-nil\n</span>    <span class=\"com\">// err should be reserved for failure to obtain a response.\n</span>    <span class=\"com\">// Similarly, RoundTrip should not attempt to handle\n</span>    <span class=\"com\">// higher-level protocol details such as redirects,\n</span>    <span class=\"com\">// authentication, or cookies.\n</span>    <span class=\"com\">//\n</span>    <span class=\"com\">// RoundTrip should not modify the request, except for\n</span>    <span class=\"com\">// consuming and closing the Body. The request's URL and\n</span>    <span class=\"com\">// Header fields are guaranteed to be initialized.\n</span>    RoundTrip(*<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) (*<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, error)\n}</pre>\n<p>\nRoundTripper is an interface representing the ability to execute a\nsingle HTTP transaction, obtaining the Response for a given Request.\n</p>\n<p>\nA RoundTripper must be safe for concurrent use by multiple\ngoroutines.\n</p>\n\n\n\n\n\n\n\n\n\n\n\n	<pre class=\"pre-x-scrollable\"><span class=\"key\">var</span> <span id=\"DefaultTransport\">DefaultTransport</span> <a class=\"int\" title=\"RoundTripper is an interface representing the ability to execute a\nsingle HTTP transaction, obtaining the Response for a given Request.\n\nA RoundTripper must be safe for concurrent use by multiple\ngoroutines.\n\" href=\"#RoundTripper\">RoundTripper</a> = &<a class=\"int\" title=\"Transport is an implementation of RoundTripper that supports http,\nhttps, and http proxies (for either http or https with CONNECT).\nTransport can also cache connections for future re-use.\n\" href=\"#Transport\">Transport</a>{Proxy: <a class=\"int\" title=\"ProxyFromEnvironment returns the URL of the proxy to use for a\ngiven request, as indicated by the environment variables\n$HTTP_PROXY and $NO_PROXY (or $http_proxy and $no_proxy).\nAn error is returned if the proxy environment is invalid.\nA nil URL and nil error are returned if no proxy is defined in the\nenvironment, or a proxy should not be used for the given request.\n\" href=\"#ProxyFromEnvironment\">ProxyFromEnvironment</a>}</pre>\n	<p>DefaultTransport is the default implementation of Transport and is\nused by DefaultClient. It establishes network connections as needed\nand caches them for reuse by subsequent calls. It uses HTTP proxies\nas directed by the $HTTP_PROXY and $NO_PROXY (or $http_proxy and\n$no_proxy) environment variables.\n</p>\n\n\n<b></b>\n\n\n\n\n<h4 id=\"NewFileTransport\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/filetransport.go?r=#30\">NewFileTransport</a>\n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_NewFileTransport\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> <a class=\"int\" title=\"NewFileTransport returns a new RoundTripper, serving the provided\nFileSystem. The returned RoundTripper ignores the URL host in its\nincoming requests, as well as most other properties of the\nrequest.\n\nThe typical use case for NewFileTransport is to register the &#34;file&#34;\nprotocol with a Transport, as in:\n\n  t := &amp;http.Transport{}\n  t.RegisterProtocol(&#34;file&#34;, http.NewFileTransport(http.Dir(&#34;/&#34;)))\n  c := &amp;http.Client{Transport: t}\n  res, err := c.Get(&#34;file:///etc/passwd&#34;)\n  ...\n\" href=\"#NewFileTransport\">NewFileTransport</a>(<span id=\"fs\">fs</span> <a class=\"int\" title=\"A FileSystem implements access to a collection of named files.\nThe elements in a file path are separated by slash (&#39;/&#39;, U+002F)\ncharacters, regardless of host operating system convention.\n\" href=\"#FileSystem\">FileSystem</a>) <a class=\"int\" title=\"RoundTripper is an interface representing the ability to execute a\nsingle HTTP transaction, obtaining the Response for a given Request.\n\nA RoundTripper must be safe for concurrent use by multiple\ngoroutines.\n\" href=\"#RoundTripper\">RoundTripper</a></pre>\n<p>\nNewFileTransport returns a new RoundTripper, serving the provided\nFileSystem. The returned RoundTripper ignores the URL host in its\nincoming requests, as well as most other properties of the\nrequest.\n</p>\n<p>\nThe typical use case for NewFileTransport is to register the &#34;file&#34;\nprotocol with a Transport, as in:\n</p>\n<pre>t := &amp;http.Transport{}\nt.RegisterProtocol(&#34;file&#34;, http.NewFileTransport(http.Dir(&#34;/&#34;)))\nc := &amp;http.Client{Transport: t}\nres, err := c.Get(&#34;file:///etc/passwd&#34;)\n...\n</pre>\n\n<div class=\"accordion\">\n		<div id=\"collapse_NewFileTransport\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"NewFileTransport returns a new RoundTripper, serving the provided\nFileSystem. The returned RoundTripper ignores the URL host in its\nincoming requests, as well as most other properties of the\nrequest.\n\nThe typical use case for NewFileTransport is to register the &#34;file&#34;\nprotocol with a Transport, as in:\n\n  t := &amp;http.Transport{}\n  t.RegisterProtocol(&#34;file&#34;, http.NewFileTransport(http.Dir(&#34;/&#34;)))\n  c := &amp;http.Client{Transport: t}\n  res, err := c.Get(&#34;file:///etc/passwd&#34;)\n  ...\n\" href=\"#NewFileTransport\">NewFileTransport</a>(<span id=\"fs\">fs</span> <a class=\"int\" title=\"A FileSystem implements access to a collection of named files.\nThe elements in a file path are separated by slash (&#39;/&#39;, U+002F)\ncharacters, regardless of host operating system convention.\n\" href=\"#FileSystem\">FileSystem</a>) <a class=\"int\" title=\"RoundTripper is an interface representing the ability to execute a\nsingle HTTP transaction, obtaining the Response for a given Request.\n\nA RoundTripper must be safe for concurrent use by multiple\ngoroutines.\n\" href=\"#RoundTripper\">RoundTripper</a> {\n	<span class=\"ret\">return</span> fileTransport{fileHandler{fs}}\n}</pre>\n	</div>\n</div>\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n<h3 id=\"ServeMux\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1370\">ServeMux</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"ServeMux is an HTTP request multiplexer.\nIt matches the URL of each incoming request against a list of registered\npatterns and calls the handler for the pattern that\nmost closely matches the URL.\n\nPatterns name fixed, rooted paths, like &#34;/favicon.ico&#34;,\nor rooted subtrees, like &#34;/images/&#34; (note the trailing slash).\nLonger patterns take precedence over shorter ones, so that\nif there are handlers registered for both &#34;/images/&#34;\nand &#34;/images/thumbnails/&#34;, the latter handler will be\ncalled for paths beginning &#34;/images/thumbnails/&#34; and the\nformer will receive requests for any other paths in the\n&#34;/images/&#34; subtree.\n\nPatterns may optionally begin with a host name, restricting matches to\nURLs on that host only.  Host-specific patterns take precedence over\ngeneral patterns, so that a handler might register for the two patterns\n&#34;/codesearch&#34; and &#34;codesearch.google.com/&#34; without also taking over\nrequests for &#34;http://www.google.com/&#34;.\n\nServeMux also takes care of sanitizing the URL request path,\nredirecting any request containing . or .. elements to an\nequivalent .- and ..-free URL.\n\" href=\"#ServeMux\">ServeMux</a> <span class=\"key\">struct</span> {\n    <span class=\"com\">// contains filtered or unexported fields\n</span>}</pre>\n<p>\nServeMux is an HTTP request multiplexer.\nIt matches the URL of each incoming request against a list of registered\npatterns and calls the handler for the pattern that\nmost closely matches the URL.\n</p>\n<p>\nPatterns name fixed, rooted paths, like &#34;/favicon.ico&#34;,\nor rooted subtrees, like &#34;/images/&#34; (note the trailing slash).\nLonger patterns take precedence over shorter ones, so that\nif there are handlers registered for both &#34;/images/&#34;\nand &#34;/images/thumbnails/&#34;, the latter handler will be\ncalled for paths beginning &#34;/images/thumbnails/&#34; and the\nformer will receive requests for any other paths in the\n&#34;/images/&#34; subtree.\n</p>\n<p>\nPatterns may optionally begin with a host name, restricting matches to\nURLs on that host only.  Host-specific patterns take precedence over\ngeneral patterns, so that a handler might register for the two patterns\n&#34;/codesearch&#34; and &#34;codesearch.google.com/&#34; without also taking over\nrequests for &#34;<a href=\"http://www.google.com/\">http://www.google.com/</a>&#34;.\n</p>\n<p>\nServeMux also takes care of sanitizing the URL request path,\nredirecting any request containing . or .. elements to an\nequivalent .- and ..-free URL.\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<h4 id=\"NewServeMux\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1383\">NewServeMux</a>\n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_NewServeMux\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> <a class=\"int\" title=\"NewServeMux allocates and returns a new ServeMux.\n\" href=\"#NewServeMux\">NewServeMux</a>() *<a class=\"int\" title=\"ServeMux is an HTTP request multiplexer.\nIt matches the URL of each incoming request against a list of registered\npatterns and calls the handler for the pattern that\nmost closely matches the URL.\n\nPatterns name fixed, rooted paths, like &#34;/favicon.ico&#34;,\nor rooted subtrees, like &#34;/images/&#34; (note the trailing slash).\nLonger patterns take precedence over shorter ones, so that\nif there are handlers registered for both &#34;/images/&#34;\nand &#34;/images/thumbnails/&#34;, the latter handler will be\ncalled for paths beginning &#34;/images/thumbnails/&#34; and the\nformer will receive requests for any other paths in the\n&#34;/images/&#34; subtree.\n\nPatterns may optionally begin with a host name, restricting matches to\nURLs on that host only.  Host-specific patterns take precedence over\ngeneral patterns, so that a handler might register for the two patterns\n&#34;/codesearch&#34; and &#34;codesearch.google.com/&#34; without also taking over\nrequests for &#34;http://www.google.com/&#34;.\n\nServeMux also takes care of sanitizing the URL request path,\nredirecting any request containing . or .. elements to an\nequivalent .- and ..-free URL.\n\" href=\"#ServeMux\">ServeMux</a></pre>\n<p>\nNewServeMux allocates and returns a new ServeMux.\n</p>\n\n<div class=\"accordion\">\n		<div id=\"collapse_NewServeMux\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> <a class=\"int\" title=\"NewServeMux allocates and returns a new ServeMux.\n\" href=\"#NewServeMux\">NewServeMux</a>() *<a class=\"int\" title=\"ServeMux is an HTTP request multiplexer.\nIt matches the URL of each incoming request against a list of registered\npatterns and calls the handler for the pattern that\nmost closely matches the URL.\n\nPatterns name fixed, rooted paths, like &#34;/favicon.ico&#34;,\nor rooted subtrees, like &#34;/images/&#34; (note the trailing slash).\nLonger patterns take precedence over shorter ones, so that\nif there are handlers registered for both &#34;/images/&#34;\nand &#34;/images/thumbnails/&#34;, the latter handler will be\ncalled for paths beginning &#34;/images/thumbnails/&#34; and the\nformer will receive requests for any other paths in the\n&#34;/images/&#34; subtree.\n\nPatterns may optionally begin with a host name, restricting matches to\nURLs on that host only.  Host-specific patterns take precedence over\ngeneral patterns, so that a handler might register for the two patterns\n&#34;/codesearch&#34; and &#34;codesearch.google.com/&#34; without also taking over\nrequests for &#34;http://www.google.com/&#34;.\n\nServeMux also takes care of sanitizing the URL request path,\nredirecting any request containing . or .. elements to an\nequivalent .- and ..-free URL.\n\" href=\"#ServeMux\">ServeMux</a> {\n        <span class=\"ret\">return</span> &<a class=\"int\" title=\"ServeMux is an HTTP request multiplexer.\nIt matches the URL of each incoming request against a list of registered\npatterns and calls the handler for the pattern that\nmost closely matches the URL.\n\nPatterns name fixed, rooted paths, like &#34;/favicon.ico&#34;,\nor rooted subtrees, like &#34;/images/&#34; (note the trailing slash).\nLonger patterns take precedence over shorter ones, so that\nif there are handlers registered for both &#34;/images/&#34;\nand &#34;/images/thumbnails/&#34;, the latter handler will be\ncalled for paths beginning &#34;/images/thumbnails/&#34; and the\nformer will receive requests for any other paths in the\n&#34;/images/&#34; subtree.\n\nPatterns may optionally begin with a host name, restricting matches to\nURLs on that host only.  Host-specific patterns take precedence over\ngeneral patterns, so that a handler might register for the two patterns\n&#34;/codesearch&#34; and &#34;codesearch.google.com/&#34; without also taking over\nrequests for &#34;http://www.google.com/&#34;.\n\nServeMux also takes care of sanitizing the URL request path,\nredirecting any request containing . or .. elements to an\nequivalent .- and ..-free URL.\n\" href=\"#ServeMux\">ServeMux</a>{m: <span class=\"bui\">make</span>(map[string]muxEntry)} \n}</pre>\n	</div>\n</div>\n\n\n\n<b></b>\n\n\n\n\n<h4 id=\"ServeMux_Handle\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1495\">Handle</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ServeMux_Handle\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (<span id=\"mux\">mux</span> *<a class=\"int\" title=\"ServeMux is an HTTP request multiplexer.\nIt matches the URL of each incoming request against a list of registered\npatterns and calls the handler for the pattern that\nmost closely matches the URL.\n\nPatterns name fixed, rooted paths, like &#34;/favicon.ico&#34;,\nor rooted subtrees, like &#34;/images/&#34; (note the trailing slash).\nLonger patterns take precedence over shorter ones, so that\nif there are handlers registered for both &#34;/images/&#34;\nand &#34;/images/thumbnails/&#34;, the latter handler will be\ncalled for paths beginning &#34;/images/thumbnails/&#34; and the\nformer will receive requests for any other paths in the\n&#34;/images/&#34; subtree.\n\nPatterns may optionally begin with a host name, restricting matches to\nURLs on that host only.  Host-specific patterns take precedence over\ngeneral patterns, so that a handler might register for the two patterns\n&#34;/codesearch&#34; and &#34;codesearch.google.com/&#34; without also taking over\nrequests for &#34;http://www.google.com/&#34;.\n\nServeMux also takes care of sanitizing the URL request path,\nredirecting any request containing . or .. elements to an\nequivalent .- and ..-free URL.\n\" href=\"#ServeMux\">ServeMux</a>) <a class=\"int\" title=\"Handle registers the handler for the given pattern\nin the DefaultServeMux.\nThe documentation for ServeMux explains how patterns are matched.\n\" href=\"#Handle\">Handle</a>(<span id=\"pattern\">pattern</span> string, <span id=\"handler\">handler</span> <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>)</pre>\n<p>\nHandle registers the handler for the given pattern.\nIf a handler already exists for pattern, Handle panics.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ServeMux_Handle\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (<span id=\"mux\">mux</span> *<a class=\"int\" title=\"ServeMux is an HTTP request multiplexer.\nIt matches the URL of each incoming request against a list of registered\npatterns and calls the handler for the pattern that\nmost closely matches the URL.\n\nPatterns name fixed, rooted paths, like &#34;/favicon.ico&#34;,\nor rooted subtrees, like &#34;/images/&#34; (note the trailing slash).\nLonger patterns take precedence over shorter ones, so that\nif there are handlers registered for both &#34;/images/&#34;\nand &#34;/images/thumbnails/&#34;, the latter handler will be\ncalled for paths beginning &#34;/images/thumbnails/&#34; and the\nformer will receive requests for any other paths in the\n&#34;/images/&#34; subtree.\n\nPatterns may optionally begin with a host name, restricting matches to\nURLs on that host only.  Host-specific patterns take precedence over\ngeneral patterns, so that a handler might register for the two patterns\n&#34;/codesearch&#34; and &#34;codesearch.google.com/&#34; without also taking over\nrequests for &#34;http://www.google.com/&#34;.\n\nServeMux also takes care of sanitizing the URL request path,\nredirecting any request containing . or .. elements to an\nequivalent .- and ..-free URL.\n\" href=\"#ServeMux\">ServeMux</a>) <a class=\"int\" title=\"Handle registers the handler for the given pattern\nin the DefaultServeMux.\nThe documentation for ServeMux explains how patterns are matched.\n\" href=\"#Handle\">Handle</a>(<span id=\"pattern\">pattern</span> string, <span id=\"handler\">handler</span> <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>) {\n	mux.mu.Lock()\n	<span class=\"bui\">defer</span> mux.mu.Unlock()\n\n	<span class=\"key\">if</span> <span id=\"pattern\">pattern</span> == <span class=\"str\">&#34;&#34;</span> {\n		<span class=\"bui\">panic</span>(<span class=\"str\">&#34;http: invalid pattern &#34;</span> + pattern)\n	}\n	<span class=\"key\">if</span> <span id=\"handler\">handler</span> == <span class=\"boo\">nil</span> {\n		<span class=\"bui\">panic</span>(<span class=\"str\">&#34;http: nil handler&#34;</span>)\n	}\n	<span class=\"key\">if</span> mux.m[pattern]<span id=\".explicit\">.explicit</span> {\n		<span class=\"bui\">panic</span>(<span class=\"str\">&#34;http: multiple registrations for &#34;</span> + pattern)\n	}\n\n	mux.m[pattern] = muxEntry{explicit: <span class=\"boo\">true</span>, h: handler, pattern: pattern}\n\n	<span class=\"key\">if</span> pattern[0] != <span class=\"str\">&#39;/&#39;</span> {\n		<span id=\"mux.hosts\">mux.hosts</span> = <span class=\"boo\">true</span>\n	}\n\n	<span class=\"com\">// Helpful behavior:\n</span>	<span class=\"com\">// If pattern is /tree/, insert an implicit permanent redirect for /tree.\n</span>	<span class=\"com\">// It can be overridden by an explicit registration.\n</span>	n := <span class=\"bui\">len</span>(pattern)\n	<span class=\"key\">if</span> n > 0 && pattern[n-1] == <span class=\"str\">&#39;/&#39;</span> && !mux.m[pattern[0:n-1]]<span id=\".explicit\">.explicit</span> {\n		<span class=\"com\">// If pattern contains a host name, strip it and use remaining\n</span>		<span class=\"com\">// path for redirect.\n</span>		<span id=\"path\">path</span> := pattern\n		<span class=\"key\">if</span> pattern[0] != <span class=\"str\">&#39;/&#39;</span> {\n			<span class=\"com\">// In pattern, at least the last character is a '/', so\n</span>			<span class=\"com\">// strings.Index can't be -1.\n</span>			<span id=\"path\">path</span> = pattern[<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/strings#Index\">strings.Index</a>(pattern, <span class=\"str\">&#34;/&#34;</span>):]\n		}\n		mux.m[pattern[0:n-1]] = muxEntry{h: <a class=\"int\" title=\"RedirectHandler returns a request handler that redirects\neach request it receives to the given url using the given\nstatus code.\n\" href=\"#RedirectHandler\">RedirectHandler</a>(path, StatusMovedPermanently), pattern: pattern}\n	}\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"ServeMux_HandleFunc\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1533\">HandleFunc</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ServeMux_HandleFunc\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (<span id=\"mux\">mux</span> *<a class=\"int\" title=\"ServeMux is an HTTP request multiplexer.\nIt matches the URL of each incoming request against a list of registered\npatterns and calls the handler for the pattern that\nmost closely matches the URL.\n\nPatterns name fixed, rooted paths, like &#34;/favicon.ico&#34;,\nor rooted subtrees, like &#34;/images/&#34; (note the trailing slash).\nLonger patterns take precedence over shorter ones, so that\nif there are handlers registered for both &#34;/images/&#34;\nand &#34;/images/thumbnails/&#34;, the latter handler will be\ncalled for paths beginning &#34;/images/thumbnails/&#34; and the\nformer will receive requests for any other paths in the\n&#34;/images/&#34; subtree.\n\nPatterns may optionally begin with a host name, restricting matches to\nURLs on that host only.  Host-specific patterns take precedence over\ngeneral patterns, so that a handler might register for the two patterns\n&#34;/codesearch&#34; and &#34;codesearch.google.com/&#34; without also taking over\nrequests for &#34;http://www.google.com/&#34;.\n\nServeMux also takes care of sanitizing the URL request path,\nredirecting any request containing . or .. elements to an\nequivalent .- and ..-free URL.\n\" href=\"#ServeMux\">ServeMux</a>) <a class=\"int\" title=\"HandleFunc registers the handler function for the given pattern\nin the DefaultServeMux.\nThe documentation for ServeMux explains how patterns are matched.\n\" href=\"#HandleFunc\">HandleFunc</a>(<span id=\"pattern\">pattern</span> string, <span id=\"handler\">handler</span> <span class=\"key\">func</span>(<a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>))</pre>\n<p>\nHandleFunc registers the handler function for the given pattern.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ServeMux_HandleFunc\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (<span id=\"mux\">mux</span> *<a class=\"int\" title=\"ServeMux is an HTTP request multiplexer.\nIt matches the URL of each incoming request against a list of registered\npatterns and calls the handler for the pattern that\nmost closely matches the URL.\n\nPatterns name fixed, rooted paths, like &#34;/favicon.ico&#34;,\nor rooted subtrees, like &#34;/images/&#34; (note the trailing slash).\nLonger patterns take precedence over shorter ones, so that\nif there are handlers registered for both &#34;/images/&#34;\nand &#34;/images/thumbnails/&#34;, the latter handler will be\ncalled for paths beginning &#34;/images/thumbnails/&#34; and the\nformer will receive requests for any other paths in the\n&#34;/images/&#34; subtree.\n\nPatterns may optionally begin with a host name, restricting matches to\nURLs on that host only.  Host-specific patterns take precedence over\ngeneral patterns, so that a handler might register for the two patterns\n&#34;/codesearch&#34; and &#34;codesearch.google.com/&#34; without also taking over\nrequests for &#34;http://www.google.com/&#34;.\n\nServeMux also takes care of sanitizing the URL request path,\nredirecting any request containing . or .. elements to an\nequivalent .- and ..-free URL.\n\" href=\"#ServeMux\">ServeMux</a>) <a class=\"int\" title=\"HandleFunc registers the handler function for the given pattern\nin the DefaultServeMux.\nThe documentation for ServeMux explains how patterns are matched.\n\" href=\"#HandleFunc\">HandleFunc</a>(<span id=\"pattern\">pattern</span> string, <span id=\"handler\">handler</span> <span class=\"key\">func</span>(<a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>)) {\n	mux.Handle(pattern, <a class=\"int\" title=\"The HandlerFunc type is an adapter to allow the use of\nordinary functions as HTTP handlers.  If f is a function\nwith the appropriate signature, HandlerFunc(f) is a\nHandler object that calls f.\n\" href=\"#HandlerFunc\">HandlerFunc</a>(handler))\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"ServeMux_Handler\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1447\">Handler</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ServeMux_Handler\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (<span id=\"mux\">mux</span> *<a class=\"int\" title=\"ServeMux is an HTTP request multiplexer.\nIt matches the URL of each incoming request against a list of registered\npatterns and calls the handler for the pattern that\nmost closely matches the URL.\n\nPatterns name fixed, rooted paths, like &#34;/favicon.ico&#34;,\nor rooted subtrees, like &#34;/images/&#34; (note the trailing slash).\nLonger patterns take precedence over shorter ones, so that\nif there are handlers registered for both &#34;/images/&#34;\nand &#34;/images/thumbnails/&#34;, the latter handler will be\ncalled for paths beginning &#34;/images/thumbnails/&#34; and the\nformer will receive requests for any other paths in the\n&#34;/images/&#34; subtree.\n\nPatterns may optionally begin with a host name, restricting matches to\nURLs on that host only.  Host-specific patterns take precedence over\ngeneral patterns, so that a handler might register for the two patterns\n&#34;/codesearch&#34; and &#34;codesearch.google.com/&#34; without also taking over\nrequests for &#34;http://www.google.com/&#34;.\n\nServeMux also takes care of sanitizing the URL request path,\nredirecting any request containing . or .. elements to an\nequivalent .- and ..-free URL.\n\" href=\"#ServeMux\">ServeMux</a>) <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>(r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) (h <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>, <span id=\"pattern\">pattern</span> string)</pre>\n<p>\nHandler returns the handler to use for the given request,\nconsulting r.Method, r.Host, and r.URL.Path. It always returns\na non-nil handler. If the path is not in its canonical form, the\nhandler will be an internally-generated handler that redirects\nto the canonical path.\n</p>\n<p>\nHandler also returns the registered pattern that matches the\nrequest or, in the case of internally-generated redirects,\nthe pattern that will match after following the redirect.\n</p>\n<p>\nIf there is no registered handler that applies to the request,\nHandler returns a &ldquo;page not found&rdquo; handler and an empty pattern.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ServeMux_Handler\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (<span id=\"mux\">mux</span> *<a class=\"int\" title=\"ServeMux is an HTTP request multiplexer.\nIt matches the URL of each incoming request against a list of registered\npatterns and calls the handler for the pattern that\nmost closely matches the URL.\n\nPatterns name fixed, rooted paths, like &#34;/favicon.ico&#34;,\nor rooted subtrees, like &#34;/images/&#34; (note the trailing slash).\nLonger patterns take precedence over shorter ones, so that\nif there are handlers registered for both &#34;/images/&#34;\nand &#34;/images/thumbnails/&#34;, the latter handler will be\ncalled for paths beginning &#34;/images/thumbnails/&#34; and the\nformer will receive requests for any other paths in the\n&#34;/images/&#34; subtree.\n\nPatterns may optionally begin with a host name, restricting matches to\nURLs on that host only.  Host-specific patterns take precedence over\ngeneral patterns, so that a handler might register for the two patterns\n&#34;/codesearch&#34; and &#34;codesearch.google.com/&#34; without also taking over\nrequests for &#34;http://www.google.com/&#34;.\n\nServeMux also takes care of sanitizing the URL request path,\nredirecting any request containing . or .. elements to an\nequivalent .- and ..-free URL.\n\" href=\"#ServeMux\">ServeMux</a>) <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>(r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) (h <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>, <span id=\"pattern\">pattern</span> string) {\n	<span class=\"key\">if</span> <span id=\"r.Method\">r.Method</span> != <span class=\"str\">&#34;CONNECT&#34;</span> {\n		<span class=\"key\">if</span> p := cleanPath(r.URL.Path); p != <span id=\"r.URL.Path\">r.URL.Path</span> {\n			_, <span id=\"pattern\">pattern</span> = mux.handler(r.Host, p)\n			<span id=\"url\">url</span> := *r.URL\n			<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#Path\">url.Path</a> = p\n			<span class=\"ret\">return</span> <a class=\"int\" title=\"RedirectHandler returns a request handler that redirects\neach request it receives to the given url using the given\nstatus code.\n\" href=\"#RedirectHandler\">RedirectHandler</a>(<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#String\">url.String</a>(), StatusMovedPermanently), pattern\n		}\n	}\n\n	<span class=\"ret\">return</span> mux.handler(r.Host, r.URL.Path)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"ServeMux_ServeHTTP\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1481\">ServeHTTP</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_ServeMux_ServeHTTP\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (<span id=\"mux\">mux</span> *<a class=\"int\" title=\"ServeMux is an HTTP request multiplexer.\nIt matches the URL of each incoming request against a list of registered\npatterns and calls the handler for the pattern that\nmost closely matches the URL.\n\nPatterns name fixed, rooted paths, like &#34;/favicon.ico&#34;,\nor rooted subtrees, like &#34;/images/&#34; (note the trailing slash).\nLonger patterns take precedence over shorter ones, so that\nif there are handlers registered for both &#34;/images/&#34;\nand &#34;/images/thumbnails/&#34;, the latter handler will be\ncalled for paths beginning &#34;/images/thumbnails/&#34; and the\nformer will receive requests for any other paths in the\n&#34;/images/&#34; subtree.\n\nPatterns may optionally begin with a host name, restricting matches to\nURLs on that host only.  Host-specific patterns take precedence over\ngeneral patterns, so that a handler might register for the two patterns\n&#34;/codesearch&#34; and &#34;codesearch.google.com/&#34; without also taking over\nrequests for &#34;http://www.google.com/&#34;.\n\nServeMux also takes care of sanitizing the URL request path,\nredirecting any request containing . or .. elements to an\nequivalent .- and ..-free URL.\n\" href=\"#ServeMux\">ServeMux</a>) ServeHTTP(w <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>)</pre>\n<p>\nServeHTTP dispatches the request to the handler whose\npattern most closely matches the request URL.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_ServeMux_ServeHTTP\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (<span id=\"mux\">mux</span> *<a class=\"int\" title=\"ServeMux is an HTTP request multiplexer.\nIt matches the URL of each incoming request against a list of registered\npatterns and calls the handler for the pattern that\nmost closely matches the URL.\n\nPatterns name fixed, rooted paths, like &#34;/favicon.ico&#34;,\nor rooted subtrees, like &#34;/images/&#34; (note the trailing slash).\nLonger patterns take precedence over shorter ones, so that\nif there are handlers registered for both &#34;/images/&#34;\nand &#34;/images/thumbnails/&#34;, the latter handler will be\ncalled for paths beginning &#34;/images/thumbnails/&#34; and the\nformer will receive requests for any other paths in the\n&#34;/images/&#34; subtree.\n\nPatterns may optionally begin with a host name, restricting matches to\nURLs on that host only.  Host-specific patterns take precedence over\ngeneral patterns, so that a handler might register for the two patterns\n&#34;/codesearch&#34; and &#34;codesearch.google.com/&#34; without also taking over\nrequests for &#34;http://www.google.com/&#34;.\n\nServeMux also takes care of sanitizing the URL request path,\nredirecting any request containing . or .. elements to an\nequivalent .- and ..-free URL.\n\" href=\"#ServeMux\">ServeMux</a>) ServeHTTP(w <a class=\"int\" title=\"A ResponseWriter interface is used by an HTTP handler to\nconstruct an HTTP response.\n\" href=\"#ResponseWriter\">ResponseWriter</a>, r *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) {\n	<span class=\"key\">if</span> <span id=\"r.RequestURI\">r.RequestURI</span> == <span class=\"str\">&#34;*&#34;</span> {\n		<span class=\"key\">if</span> r.ProtoAtLeast(1, 1) {\n			w.Header().Set(<span class=\"str\">&#34;Connection&#34;</span>, <span class=\"str\">&#34;close&#34;</span>)\n		}\n		w.WriteHeader(StatusBadRequest)\n		<span class=\"ret\">return</span>\n	}\n	h, _ := mux.Handler(r)\n	h.ServeHTTP(w, r)\n}</pre>\n	</div>\n	</div>\n\n\n\n<b></b>\n\n\n<h3 id=\"Server\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1559\">Server</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"A Server defines parameters for running an HTTP server.\n\" href=\"#Server\">Server</a> <span class=\"key\">struct</span> {\n    <span id=\"Addr\">Addr</span>           <span id=\"string\">string</span>        <span class=\"com\">// TCP address to listen on, \":http\" if empty\n</span>    <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>        <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>       <span class=\"com\">// handler to invoke, http.DefaultServeMux if nil\n</span>    <span id=\"ReadTimeout\">ReadTimeout</span>    <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/time#Duration\">time.Duration</a> <span class=\"com\">// maximum duration before timing out read of the request\n</span>    <span id=\"WriteTimeout\">WriteTimeout</span>   <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/time#Duration\">time.Duration</a> <span class=\"com\">// maximum duration before timing out write of the response\n</span>    <span id=\"MaxHeaderBytes\">MaxHeaderBytes</span> <span id=\"int\">int</span>           <span class=\"com\">// maximum size of request headers, DefaultMaxHeaderBytes if 0\n</span>    <span id=\"TLSConfig\">TLSConfig</span>      *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/crypto/tls#Config\">tls.Config</a>   <span class=\"com\">// optional TLS config, used by ListenAndServeTLS\n</span>\n    <span class=\"com\">// TLSNextProto optionally specifies a function to take over\n</span>    <span class=\"com\">// ownership of the provided TLS connection when an NPN\n</span>    <span class=\"com\">// protocol upgrade has occurred.  The map key is the protocol\n</span>    <span class=\"com\">// name negotiated. The Handler argument should be used to\n</span>    <span class=\"com\">// handle HTTP requests and will initialize the Request's TLS\n</span>    <span class=\"com\">// and RemoteAddr if not already set.  The connection is\n</span>    <span class=\"com\">// automatically closed when the function returns.\n</span>    <span id=\"TLSNextProto\">TLSNextProto</span> map[string]<span class=\"key\">func</span>(*<a class=\"int\" title=\"A Server defines parameters for running an HTTP server.\n\" href=\"#Server\">Server</a>, *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/crypto/tls#Conn\">tls.Conn</a>, <a class=\"int\" title=\"Objects implementing the Handler interface can be\nregistered to serve a particular path or subtree\nin the HTTP server.\n\nServeHTTP should write reply headers and data to the ResponseWriter\nand then return.  Returning signals that the request is finished\nand that the HTTP server can move on to the next request on\nthe connection.\n\" href=\"#Handler\">Handler</a>)\n}</pre>\n<p>\nA Server defines parameters for running an HTTP server.\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n\n\n<h4 id=\"Server_ListenAndServe\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1597\">ListenAndServe</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Server_ListenAndServe\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (<span id=\"srv\">srv</span> *<a class=\"int\" title=\"A Server defines parameters for running an HTTP server.\n\" href=\"#Server\">Server</a>) <a class=\"int\" title=\"ListenAndServe listens on the TCP network address addr\nand then calls Serve with handler to handle requests\non incoming connections.  Handler is typically nil,\nin which case the DefaultServeMux is used.\n\nA trivial example server is:\n\n	package main\n\n	import (\n		&#34;io&#34;\n		&#34;net/http&#34;\n		&#34;log&#34;\n	)\n\n	// hello world, the web server\n	func HelloServer(w http.ResponseWriter, req *http.Request) {\n		io.WriteString(w, &#34;hello, world!\\n&#34;)\n	}\n\n	func main() {\n		http.HandleFunc(&#34;/hello&#34;, HelloServer)\n		err := http.ListenAndServe(&#34;:12345&#34;, nil)\n		if err != nil {\n			log.Fatal(&#34;ListenAndServe: &#34;, err)\n		}\n	}\n\" href=\"#ListenAndServe\">ListenAndServe</a>() error</pre>\n<p>\nListenAndServe listens on the TCP network address srv.Addr and then\ncalls Serve to handle requests on incoming connections.  If\nsrv.Addr is blank, &#34;:http&#34; is used.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Server_ListenAndServe\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (<span id=\"srv\">srv</span> *<a class=\"int\" title=\"A Server defines parameters for running an HTTP server.\n\" href=\"#Server\">Server</a>) <a class=\"int\" title=\"ListenAndServe listens on the TCP network address addr\nand then calls Serve with handler to handle requests\non incoming connections.  Handler is typically nil,\nin which case the DefaultServeMux is used.\n\nA trivial example server is:\n\n	package main\n\n	import (\n		&#34;io&#34;\n		&#34;net/http&#34;\n		&#34;log&#34;\n	)\n\n	// hello world, the web server\n	func HelloServer(w http.ResponseWriter, req *http.Request) {\n		io.WriteString(w, &#34;hello, world!\\n&#34;)\n	}\n\n	func main() {\n		http.HandleFunc(&#34;/hello&#34;, HelloServer)\n		err := http.ListenAndServe(&#34;:12345&#34;, nil)\n		if err != nil {\n			log.Fatal(&#34;ListenAndServe: &#34;, err)\n		}\n	}\n\" href=\"#ListenAndServe\">ListenAndServe</a>() <span id=\"error\">error</span> {\n	<span id=\"addr\">addr</span> := srv.Addr\n	<span class=\"key\">if</span> <span id=\"addr\">addr</span> == <span class=\"str\">&#34;&#34;</span> {\n		<span id=\"addr\">addr</span> = <span class=\"str\">&#34;:http&#34;</span>\n	}\n	l, e := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net#Listen\">net.Listen</a>(<span class=\"str\">&#34;tcp&#34;</span>, addr)\n	<span class=\"key\">if</span> e != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> e\n	}\n	<span class=\"ret\">return</span> srv.Serve(l)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Server_ListenAndServeTLS\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1716\">ListenAndServeTLS</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Server_ListenAndServeTLS\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (<span id=\"srv\">srv</span> *<a class=\"int\" title=\"A Server defines parameters for running an HTTP server.\n\" href=\"#Server\">Server</a>) <a class=\"int\" title=\"ListenAndServeTLS acts identically to ListenAndServe, except that it\nexpects HTTPS connections. Additionally, files containing a certificate and\nmatching private key for the server must be provided. If the certificate\nis signed by a certificate authority, the certFile should be the concatenation\nof the server&#39;s certificate followed by the CA&#39;s certificate.\n\nA trivial example server is:\n\n	import (\n		&#34;log&#34;\n		&#34;net/http&#34;\n	)\n\n	func handler(w http.ResponseWriter, req *http.Request) {\n		w.Header().Set(&#34;Content-Type&#34;, &#34;text/plain&#34;)\n		w.Write([]byte(&#34;This is an example server.\\n&#34;))\n	}\n\n	func main() {\n		http.HandleFunc(&#34;/&#34;, handler)\n		log.Printf(&#34;About to listen on 10443. Go to https://127.0.0.1:10443/&#34;)\n		err := http.ListenAndServeTLS(&#34;:10443&#34;, &#34;cert.pem&#34;, &#34;key.pem&#34;, nil)\n		if err != nil {\n			log.Fatal(err)\n		}\n	}\n\nOne can use generate_cert.go in crypto/tls to generate cert.pem and key.pem.\n\" href=\"#ListenAndServeTLS\">ListenAndServeTLS</a>(certFile, <span id=\"keyFile\">keyFile</span> string) error</pre>\n<p>\nListenAndServeTLS listens on the TCP network address srv.Addr and\nthen calls Serve to handle requests on incoming TLS connections.\n</p>\n<p>\nFilenames containing a certificate and matching private key for\nthe server must be provided. If the certificate is signed by a\ncertificate authority, the certFile should be the concatenation\nof the server&#39;s certificate followed by the CA&#39;s certificate.\n</p>\n<p>\nIf srv.Addr is blank, &#34;:https&#34; is used.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Server_ListenAndServeTLS\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (<span id=\"srv\">srv</span> *<a class=\"int\" title=\"A Server defines parameters for running an HTTP server.\n\" href=\"#Server\">Server</a>) <a class=\"int\" title=\"ListenAndServeTLS acts identically to ListenAndServe, except that it\nexpects HTTPS connections. Additionally, files containing a certificate and\nmatching private key for the server must be provided. If the certificate\nis signed by a certificate authority, the certFile should be the concatenation\nof the server&#39;s certificate followed by the CA&#39;s certificate.\n\nA trivial example server is:\n\n	import (\n		&#34;log&#34;\n		&#34;net/http&#34;\n	)\n\n	func handler(w http.ResponseWriter, req *http.Request) {\n		w.Header().Set(&#34;Content-Type&#34;, &#34;text/plain&#34;)\n		w.Write([]byte(&#34;This is an example server.\\n&#34;))\n	}\n\n	func main() {\n		http.HandleFunc(&#34;/&#34;, handler)\n		log.Printf(&#34;About to listen on 10443. Go to https://127.0.0.1:10443/&#34;)\n		err := http.ListenAndServeTLS(&#34;:10443&#34;, &#34;cert.pem&#34;, &#34;key.pem&#34;, nil)\n		if err != nil {\n			log.Fatal(err)\n		}\n	}\n\nOne can use generate_cert.go in crypto/tls to generate cert.pem and key.pem.\n\" href=\"#ListenAndServeTLS\">ListenAndServeTLS</a>(certFile, <span id=\"keyFile\">keyFile</span> string) <span id=\"error\">error</span> {\n	<span id=\"addr\">addr</span> := srv.Addr\n	<span class=\"key\">if</span> <span id=\"addr\">addr</span> == <span class=\"str\">&#34;&#34;</span> {\n		<span id=\"addr\">addr</span> = <span class=\"str\">&#34;:https&#34;</span>\n	}\n	<span id=\"config\">config</span> := &<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/crypto/tls#Config\">tls.Config</a>{}\n	<span class=\"key\">if</span> <span id=\"srv.TLSConfig\">srv.TLSConfig</span> != <span class=\"boo\">nil</span> {\n		*<span id=\"config\">config</span> = *srv.TLSConfig\n	}\n	<span class=\"key\">if</span> <span id=\"config.NextProtos\">config.NextProtos</span> == <span class=\"boo\">nil</span> {\n		<span id=\"config.NextProtos\">config.NextProtos</span> = []string{<span class=\"str\">&#34;http/1.1&#34;</span>}\n	}\n\n	<span class=\"key\">var</span> <span id=\"err\">err</span> error\n	<span id=\"config.Certificates\">config.Certificates</span> = <span class=\"bui\">make</span>([]<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/crypto/tls#Certificate\">tls.Certificate</a>, 1)\n	config.Certificates[0], <span id=\"err\">err</span> = <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/crypto/tls#LoadX509KeyPair\">tls.LoadX509KeyPair</a>(certFile, keyFile)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> err\n	}\n\n	conn, <span id=\"err\">err</span> := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net#Listen\">net.Listen</a>(<span class=\"str\">&#34;tcp&#34;</span>, addr)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> err\n	}\n\n	<span id=\"tlsListener\">tlsListener</span> := <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/crypto/tls#NewListener\">tls.NewListener</a>(conn, config)\n	<span class=\"ret\">return</span> srv.Serve(tlsListener)\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Server_Serve\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=#1612\">Serve</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Server_Serve\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (<span id=\"srv\">srv</span> *<a class=\"int\" title=\"A Server defines parameters for running an HTTP server.\n\" href=\"#Server\">Server</a>) <a class=\"int\" title=\"Serve accepts incoming HTTP connections on the listener l,\ncreating a new service goroutine for each.  The service goroutines\nread requests and then call handler to reply to them.\nHandler is typically nil, in which case the DefaultServeMux is used.\n\" href=\"#Serve\">Serve</a>(l <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net#Listener\">net.Listener</a>) error</pre>\n<p>\nServe accepts incoming connections on the Listener l, creating a\nnew service goroutine for each.  The service goroutines read requests and\nthen call srv.Handler to reply to them.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Server_Serve\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (<span id=\"srv\">srv</span> *<a class=\"int\" title=\"A Server defines parameters for running an HTTP server.\n\" href=\"#Server\">Server</a>) <a class=\"int\" title=\"Serve accepts incoming HTTP connections on the listener l,\ncreating a new service goroutine for each.  The service goroutines\nread requests and then call handler to reply to them.\nHandler is typically nil, in which case the DefaultServeMux is used.\n\" href=\"#Serve\">Serve</a>(l <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net#Listener\">net.Listener</a>) <span id=\"error\">error</span> {\n	<span class=\"bui\">defer</span> l.Close()\n	<span class=\"key\">var</span> <span id=\"tempDelay\">tempDelay</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/time#Duration\">time.Duration</a> <span class=\"com\">// how long to sleep on accept failure\n</span>	<span class=\"key\">for</span> {\n		rw, e := l.Accept()\n		<span class=\"key\">if</span> e != <span class=\"boo\">nil</span> {\n			<span class=\"key\">if</span> ne, <span id=\"ok\">ok</span> := e.(<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net#Error\">net.Error</a>); <span id=\"ok\">ok</span> && ne.Temporary() {\n				<span class=\"key\">if</span> <span id=\"tempDelay\">tempDelay</span> == 0 {\n					<span id=\"tempDelay\">tempDelay</span> = 5 * <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/time#Millisecond\">time.Millisecond</a>\n				} <span class=\"key\">else</span> {\n					<span id=\"tempDelay\">tempDelay</span> *= 2\n				}\n				<span class=\"key\">if</span> <span id=\"max\">max</span> := 1 * <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/time#Second\">time.Second</a>; <span id=\"tempDelay\">tempDelay</span> > <span id=\"max\">max</span> {\n					<span id=\"tempDelay\">tempDelay</span> = max\n				}\n				<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/log#Printf\">log.Printf</a>(<span class=\"str\">&#34;http: Accept error: %v; retrying in %v&#34;</span>, e, tempDelay)\n				<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/time#Sleep\">time.Sleep</a>(tempDelay)\n				<span class=\"key\">continue</span>\n			}\n			<span class=\"ret\">return</span> e\n		}\n		<span id=\"tempDelay\">tempDelay</span> = 0\n		c, <span id=\"err\">err</span> := srv.newConn(rw)\n		<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n			<span class=\"key\">continue</span>\n		}\n		<span id=\"go\">go</span> c.serve()\n	}\n}</pre>\n	</div>\n	</div>\n\n\n\n<b></b>\n\n\n<h3 id=\"Transport\">\n	type \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/transport.go?r=#42\">Transport</a>\n</h3>\n\n<pre class=\"pre-x-scrollable\"><span class=\"key\">type</span> <a class=\"int\" title=\"Transport is an implementation of RoundTripper that supports http,\nhttps, and http proxies (for either http or https with CONNECT).\nTransport can also cache connections for future re-use.\n\" href=\"#Transport\">Transport</a> <span class=\"key\">struct</span> {\n\n    <span class=\"com\">// Proxy specifies a function to return a proxy for a given\n</span>    <span class=\"com\">// Request. If the function returns a non-nil error, the\n</span>    <span class=\"com\">// request is aborted with the provided error.\n</span>    <span class=\"com\">// If Proxy is nil or returns a nil *URL, no proxy is used.\n</span>    <span id=\"Proxy\">Proxy</span> <span class=\"key\">func</span>(*<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) (*<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net/url#URL\">url.URL</a>, error)\n\n    <span class=\"com\">// Dial specifies the dial function for creating TCP\n</span>    <span class=\"com\">// connections.\n</span>    <span class=\"com\">// If Dial is nil, net.Dial is used.\n</span>    <span id=\"Dial\">Dial</span> <span class=\"key\">func</span>(network, <span id=\"addr\">addr</span> string) (<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/net#Conn\">net.Conn</a>, error)\n\n    <span class=\"com\">// TLSClientConfig specifies the TLS configuration to use with\n</span>    <span class=\"com\">// tls.Client. If nil, the default configuration is used.\n</span>    <span id=\"TLSClientConfig\">TLSClientConfig</span> *<a class=\"ext\" title=\"\" target=\"_blank\" href=\"/crypto/tls#Config\">tls.Config</a>\n\n    <span class=\"com\">// DisableKeepAlives, if true, prevents re-use of TCP connections\n</span>    <span class=\"com\">// between different HTTP requests.\n</span>    <span id=\"DisableKeepAlives\">DisableKeepAlives</span> bool\n\n    <span class=\"com\">// DisableCompression, if true, prevents the Transport from\n</span>    <span class=\"com\">// requesting compression with an \"Accept-Encoding: gzip\"\n</span>    <span class=\"com\">// request header when the Request contains no existing\n</span>    <span class=\"com\">// Accept-Encoding value. If the Transport requests gzip on\n</span>    <span class=\"com\">// its own and gets a gzipped response, it's transparently\n</span>    <span class=\"com\">// decoded in the Response.Body. However, if the user\n</span>    <span class=\"com\">// explicitly requested gzip it is not automatically\n</span>    <span class=\"com\">// uncompressed.\n</span>    <span id=\"DisableCompression\">DisableCompression</span> bool\n\n    <span class=\"com\">// MaxIdleConnsPerHost, if non-zero, controls the maximum idle\n</span>    <span class=\"com\">// (keep-alive) to keep per-host.  If zero,\n</span>    <span class=\"com\">// DefaultMaxIdleConnsPerHost is used.\n</span>    <span id=\"MaxIdleConnsPerHost\">MaxIdleConnsPerHost</span> int\n\n    <span class=\"com\">// ResponseHeaderTimeout, if non-zero, specifies the amount of\n</span>    <span class=\"com\">// time to wait for a server's response headers after fully\n</span>    <span class=\"com\">// writing the request (including its body, if any). This\n</span>    <span class=\"com\">// time does not include the time to read the response body.\n</span>    <span id=\"ResponseHeaderTimeout\">ResponseHeaderTimeout</span> <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/time#Duration\">time.Duration</a>\n    <span class=\"com\">// contains filtered or unexported fields\n</span>}</pre>\n<p>\nTransport is an implementation of RoundTripper that supports http,\nhttps, and http proxies (for either http or https with CONNECT).\nTransport can also cache connections for future re-use.\n</p>\n\n\n\n\n\n\n\n\n\n\n<b></b>\n\n\n\n\n<b></b>\n\n\n\n\n<h4 id=\"Transport_CancelRequest\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/transport.go?r=#233\">CancelRequest</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Transport_CancelRequest\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (t *<a class=\"int\" title=\"Transport is an implementation of RoundTripper that supports http,\nhttps, and http proxies (for either http or https with CONNECT).\nTransport can also cache connections for future re-use.\n\" href=\"#Transport\">Transport</a>) CancelRequest(<span id=\"req\">req</span> *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>)</pre>\n<p>\nCancelRequest cancels an in-flight request by closing its\nconnection.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Transport_CancelRequest\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (t *<a class=\"int\" title=\"Transport is an implementation of RoundTripper that supports http,\nhttps, and http proxies (for either http or https with CONNECT).\nTransport can also cache connections for future re-use.\n\" href=\"#Transport\">Transport</a>) CancelRequest(<span id=\"req\">req</span> *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) {\n	t.reqMu.Lock()\n	<span id=\"pc\">pc</span> := t.reqConn[req]\n	t.reqMu.Unlock()\n	<span class=\"key\">if</span> <span id=\"pc\">pc</span> != <span class=\"boo\">nil</span> {\n		pc.conn.Close()\n	}\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Transport_CloseIdleConnections\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/transport.go?r=#215\">CloseIdleConnections</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Transport_CloseIdleConnections\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (t *<a class=\"int\" title=\"Transport is an implementation of RoundTripper that supports http,\nhttps, and http proxies (for either http or https with CONNECT).\nTransport can also cache connections for future re-use.\n\" href=\"#Transport\">Transport</a>) CloseIdleConnections()</pre>\n<p>\nCloseIdleConnections closes any connections which were previously\nconnected from previous requests but are now sitting idle in\na &#34;keep-alive&#34; state. It does not interrupt any connections currently\nin use.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Transport_CloseIdleConnections\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (t *<a class=\"int\" title=\"Transport is an implementation of RoundTripper that supports http,\nhttps, and http proxies (for either http or https with CONNECT).\nTransport can also cache connections for future re-use.\n\" href=\"#Transport\">Transport</a>) CloseIdleConnections() {\n	t.idleMu.Lock()\n	m := t.idleConn\n	<span id=\"t.idleConn\">t.idleConn</span> = <span class=\"boo\">nil</span>\n	<span id=\"t.idleConnCh\">t.idleConnCh</span> = <span class=\"boo\">nil</span>\n	t.idleMu.Unlock()\n	<span class=\"key\">if</span> m == <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span>\n	}\n	<span class=\"key\">for</span> _, <span id=\"conns\">conns</span> := <span class=\"key\">range</span> m {\n		<span class=\"key\">for</span> _, <span id=\"pconn\">pconn</span> := <span class=\"key\">range</span> <span id=\"conns\">conns</span> {\n			pconn.close()\n		}\n	}\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Transport_RegisterProtocol\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/transport.go?r=#196\">RegisterProtocol</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Transport_RegisterProtocol\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (t *<a class=\"int\" title=\"Transport is an implementation of RoundTripper that supports http,\nhttps, and http proxies (for either http or https with CONNECT).\nTransport can also cache connections for future re-use.\n\" href=\"#Transport\">Transport</a>) RegisterProtocol(<span id=\"scheme\">scheme</span> string, <span id=\"rt\">rt</span> <a class=\"int\" title=\"RoundTripper is an interface representing the ability to execute a\nsingle HTTP transaction, obtaining the Response for a given Request.\n\nA RoundTripper must be safe for concurrent use by multiple\ngoroutines.\n\" href=\"#RoundTripper\">RoundTripper</a>)</pre>\n<p>\nRegisterProtocol registers a new protocol with scheme.\nThe Transport will pass requests using the given scheme to rt.\nIt is rt&#39;s responsibility to simulate HTTP request semantics.\n</p>\n<p>\nRegisterProtocol can be used by other packages to provide\nimplementations of protocol schemes like &#34;ftp&#34; or &#34;file&#34;.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Transport_RegisterProtocol\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (t *<a class=\"int\" title=\"Transport is an implementation of RoundTripper that supports http,\nhttps, and http proxies (for either http or https with CONNECT).\nTransport can also cache connections for future re-use.\n\" href=\"#Transport\">Transport</a>) RegisterProtocol(<span id=\"scheme\">scheme</span> string, <span id=\"rt\">rt</span> <a class=\"int\" title=\"RoundTripper is an interface representing the ability to execute a\nsingle HTTP transaction, obtaining the Response for a given Request.\n\nA RoundTripper must be safe for concurrent use by multiple\ngoroutines.\n\" href=\"#RoundTripper\">RoundTripper</a>) {\n	<span class=\"key\">if</span> <span id=\"scheme\">scheme</span> == <span class=\"str\">&#34;http&#34;</span> || <span id=\"scheme\">scheme</span> == <span class=\"str\">&#34;https&#34;</span> {\n		<span class=\"bui\">panic</span>(<span class=\"str\">&#34;protocol &#34;</span> + <span id=\"scheme\">scheme</span> + <span class=\"str\">&#34; already registered&#34;</span>)\n	}\n	t.altMu.Lock()\n	<span class=\"bui\">defer</span> t.altMu.Unlock()\n	<span class=\"key\">if</span> <span id=\"t.altProto\">t.altProto</span> == <span class=\"boo\">nil</span> {\n		<span id=\"t.altProto\">t.altProto</span> = <span class=\"bui\">make</span>(map[string]<a class=\"int\" title=\"RoundTripper is an interface representing the ability to execute a\nsingle HTTP transaction, obtaining the Response for a given Request.\n\nA RoundTripper must be safe for concurrent use by multiple\ngoroutines.\n\" href=\"#RoundTripper\">RoundTripper</a>)\n	}\n	<span class=\"key\">if</span> _, <span id=\"exists\">exists</span> := t.altProto[scheme]; <span id=\"exists\">exists</span> {\n		<span class=\"bui\">panic</span>(<span class=\"str\">&#34;protocol &#34;</span> + <span id=\"scheme\">scheme</span> + <span class=\"str\">&#34; already registered&#34;</span>)\n	}\n	t.altProto[scheme] = rt\n}</pre>\n	</div>\n	</div>\n\n\n\n<h4 id=\"Transport_RoundTrip\">\n	func \n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/transport.go?r=#150\">RoundTrip</a> \n	<small>\n		<a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapse_Transport_RoundTrip\">View Code</a>\n	</small>\n</h4>\n\n<pre><span class=\"key\">func</span> (t *<a class=\"int\" title=\"Transport is an implementation of RoundTripper that supports http,\nhttps, and http proxies (for either http or https with CONNECT).\nTransport can also cache connections for future re-use.\n\" href=\"#Transport\">Transport</a>) RoundTrip(<span id=\"req\">req</span> *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error)</pre>\n<p>\nRoundTrip implements the RoundTripper interface.\n</p>\n<p>\nFor higher-level HTTP client support (such as handling of cookies\nand redirects), see Get, Post, and the Client type.\n</p>\n\n	<div class=\"accordion\">\n		<div id=\"collapse_Transport_RoundTrip\" class=\"accordion-body collapse\">\n		<pre class=\"accordion-inner\"><span class=\"key\">func</span> (t *<a class=\"int\" title=\"Transport is an implementation of RoundTripper that supports http,\nhttps, and http proxies (for either http or https with CONNECT).\nTransport can also cache connections for future re-use.\n\" href=\"#Transport\">Transport</a>) RoundTrip(<span id=\"req\">req</span> *<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>) (<span id=\"resp\">resp</span> *<a class=\"int\" title=\"Response represents the response from an HTTP request.\n\" href=\"#Response\">Response</a>, <span id=\"err\">err</span> error) {\n	<span class=\"key\">if</span> <span id=\"req.URL\">req.URL</span> == <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/errors#New\">errors.New</a>(<span class=\"str\">&#34;http: nil Request.URL&#34;</span>)\n	}\n	<span class=\"key\">if</span> <span id=\"req.Header\">req.Header</span> == <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/errors#New\">errors.New</a>(<span class=\"str\">&#34;http: nil Request.Header&#34;</span>)\n	}\n	<span class=\"key\">if</span> <span id=\"req.URL.Scheme\">req.URL.Scheme</span> != <span class=\"str\">&#34;http&#34;</span> && <span id=\"req.URL.Scheme\">req.URL.Scheme</span> != <span class=\"str\">&#34;https&#34;</span> {\n		t.altMu.RLock()\n		<span class=\"key\">var</span> <span id=\"rt\">rt</span> <a class=\"int\" title=\"RoundTripper is an interface representing the ability to execute a\nsingle HTTP transaction, obtaining the Response for a given Request.\n\nA RoundTripper must be safe for concurrent use by multiple\ngoroutines.\n\" href=\"#RoundTripper\">RoundTripper</a>\n		<span class=\"key\">if</span> <span id=\"t.altProto\">t.altProto</span> != <span class=\"boo\">nil</span> {\n			<span id=\"rt\">rt</span> = t.altProto[req.URL.Scheme]\n		}\n		t.altMu.RUnlock()\n		<span class=\"key\">if</span> <span id=\"rt\">rt</span> == <span class=\"boo\">nil</span> {\n			<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, &badStringError{<span class=\"str\">&#34;unsupported protocol scheme&#34;</span>, req.URL.Scheme}\n		}\n		<span class=\"ret\">return</span> rt.RoundTrip(req)\n	}\n	<span class=\"key\">if</span> <span id=\"req.URL.Host\">req.URL.Host</span> == <span class=\"str\">&#34;&#34;</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, <a class=\"ext\" title=\"\" target=\"_blank\" href=\"/errors#New\">errors.New</a>(<span class=\"str\">&#34;http: no Host in request URL&#34;</span>)\n	}\n	<span id=\"treq\">treq</span> := &transportRequest{<a class=\"int\" title=\"A Request represents an HTTP request received by a server\nor to be sent by a client.\n\" href=\"#Request\">Request</a>: req}\n	cm, <span id=\"err\">err</span> := t.connectMethodForRequest(treq)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, err\n	}\n\n	<span class=\"com\">// Get the cached or newly-created connection to either the\n</span>	<span class=\"com\">// host (for http or https), the http proxy, or the http proxy\n</span>	<span class=\"com\">// pre-CONNECTed to https server.  In any case, we'll be ready\n</span>	<span class=\"com\">// to send it requests.\n</span>	pconn, <span id=\"err\">err</span> := t.getConn(cm)\n	<span class=\"key\">if</span> <span id=\"err\">err</span> != <span class=\"boo\">nil</span> {\n		<span class=\"ret\">return</span> <span class=\"boo\">nil</span>, err\n	}\n\n	<span class=\"ret\">return</span> pconn.roundTrip(treq)\n}</pre>\n	</div>\n	</div>\n\n\n\n<b></b>\n\n\n<b></b>\n\n\n\n<h3 id=\"_files\">\n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http\">Files</a>\n</h3>\n\n\n<p>\n	\n	\n	\n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/doc.go?r=\">doc.go</a>\n	\n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/header.go?r=\">header.go</a>\n	\n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/jar.go?r=\">jar.go</a>\n	\n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/request.go?r=\">request.go</a>\n	\n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/response.go?r=\">response.go</a>\n	\n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/server.go?r=\">server.go</a>\n	\n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/transfer.go?r=\">transfer.go</a>\n	\n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/filetransport.go?r=\">filetransport.go</a>\n	\n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/chunked.go?r=\">chunked.go</a>\n	\n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/cookie.go?r=\">cookie.go</a>\n	\n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/sniff.go?r=\">sniff.go</a>\n	\n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/status.go?r=\">status.go</a>\n	\n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/client.go?r=\">client.go</a>\n	\n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/fs.go?r=\">fs.go</a>\n	\n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/lex.go?r=\">lex.go</a>\n	\n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http/transport.go?r=\">transport.go</a>\n	\n</p>\n\n\n<h3 id=\"_subdirs\">\n	<a target=\"_blank\" href=\"http://code.google.com/p/go/source/browse/src/pkg/net/http\">Directories</a>\n</h3>\n\n<table class=\"table table-hover table-striped table-condensed\">\n	<thead>\n		<tr>\n			<th>Import Path</th>\n			<th>Synopsis</th>\n		</tr>\n	</thead>\n\n	<tbody>\n		\n		<tr>\n			<td><a href=\"/net/http/cgi\">net/http/cgi</a></td>\n			<td></td>\n		</tr>\n		\n		<tr>\n			<td><a href=\"/net/http/cookiejar\">net/http/cookiejar</a></td>\n			<td></td>\n		</tr>\n		\n		<tr>\n			<td><a href=\"/net/http/fcgi\">net/http/fcgi</a></td>\n			<td></td>\n		</tr>\n		\n		<tr>\n			<td><a href=\"/net/http/httptest\">net/http/httptest</a></td>\n			<td></td>\n		</tr>\n		\n		<tr>\n			<td><a href=\"/net/http/httputil\">net/http/httputil</a></td>\n			<td></td>\n		</tr>\n		\n		<tr>\n			<td><a href=\"/net/http/pprof\">net/http/pprof</a></td>\n			<td></td>\n		</tr>\n		\n		<tr>\n			<td><a href=\"/net/http/testdata\">net/http/testdata</a></td>\n			<td></td>\n		</tr>\n		\n	</tbody>\n</table>\n")
